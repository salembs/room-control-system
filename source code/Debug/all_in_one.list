
all_in_one.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008458  08008458  00009458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008854  08008854  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800885c  0800885c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800885c  0800885c  0000985c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008860  08008860  00009860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008864  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d4  08008a38  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08008a38  0000a4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa06  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002819  00000000  00000000  00019c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c67  00000000  00000000  0001d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191c6  00000000  00000000  0001e08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cb4  00000000  00000000  00037255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c96f  00000000  00000000  00048f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005440  00000000  00000000  000e58bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000eacfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008440 	.word	0x08008440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008440 	.word	0x08008440

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8000fac <GetSector+0xc8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d806      	bhi.n	8000f06 <GetSector+0x22>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000efe:	d302      	bcc.n	8000f06 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e04b      	b.n	8000f9e <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <GetSector+0xcc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d806      	bhi.n	8000f1c <GetSector+0x38>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a28      	ldr	r2, [pc, #160]	@ (8000fb4 <GetSector+0xd0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d302      	bcc.n	8000f1c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	e040      	b.n	8000f9e <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a26      	ldr	r2, [pc, #152]	@ (8000fb8 <GetSector+0xd4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d806      	bhi.n	8000f32 <GetSector+0x4e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a25      	ldr	r2, [pc, #148]	@ (8000fbc <GetSector+0xd8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d302      	bcc.n	8000f32 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e035      	b.n	8000f9e <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a22      	ldr	r2, [pc, #136]	@ (8000fc0 <GetSector+0xdc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d206      	bcs.n	8000f48 <GetSector+0x64>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <GetSector+0xe0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d302      	bcc.n	8000f48 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000f42:	2303      	movs	r3, #3
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	e02a      	b.n	8000f9e <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc8 <GetSector+0xe4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d206      	bcs.n	8000f5e <GetSector+0x7a>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <GetSector+0xdc>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d902      	bls.n	8000f5e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e01f      	b.n	8000f9e <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a1a      	ldr	r2, [pc, #104]	@ (8000fcc <GetSector+0xe8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d206      	bcs.n	8000f74 <GetSector+0x90>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <GetSector+0xe4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d902      	bls.n	8000f74 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e014      	b.n	8000f9e <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <GetSector+0xec>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d206      	bcs.n	8000f8a <GetSector+0xa6>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <GetSector+0xe8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d902      	bls.n	8000f8a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000f84:	2306      	movs	r3, #6
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e009      	b.n	8000f9e <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <GetSector+0xf0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d205      	bcs.n	8000f9e <GetSector+0xba>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd0 <GetSector+0xec>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d901      	bls.n	8000f9e <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	08003ffe 	.word	0x08003ffe
 8000fb0:	08007ffe 	.word	0x08007ffe
 8000fb4:	08004000 	.word	0x08004000
 8000fb8:	0800bffe 	.word	0x0800bffe
 8000fbc:	08008000 	.word	0x08008000
 8000fc0:	0800ffff 	.word	0x0800ffff
 8000fc4:	0800c000 	.word	0x0800c000
 8000fc8:	0801ffff 	.word	0x0801ffff
 8000fcc:	0803ffff 	.word	0x0803ffff
 8000fd0:	0805ffff 	.word	0x0805ffff
 8000fd4:	0807ffff 	.word	0x0807ffff

08000fd8 <float2Bytes>:

uint8_t bytes_temp[4];


void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e00b      	b.n	8001006 <float2Bytes+0x2e>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3210      	adds	r2, #16
 8000ff8:	443a      	add	r2, r7
 8000ffa:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000ffe:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	3301      	adds	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d9f0      	bls.n	8000fee <float2Bytes+0x16>
    }

}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
 8001026:	e00b      	b.n	8001040 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	441a      	add	r2, r3
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	3318      	adds	r3, #24
 8001034:	443b      	add	r3, r7
 8001036:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	3301      	adds	r3, #1
 800103e:	75fb      	strb	r3, [r7, #23]
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d9f0      	bls.n	8001028 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	613b      	str	r3, [r7, #16]
   return float_variable;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	ee07 3a90 	vmov	s15, r3
}
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <Flash_Write_Data>:


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	4613      	mov	r3, r2
 800106c:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001072:	f001 ffe1 	bl	8003038 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff ff34 	bl	8000ee4 <GetSector>
 800107c:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800108a:	69f8      	ldr	r0, [r7, #28]
 800108c:	f7ff ff2a 	bl	8000ee4 <GetSector>
 8001090:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <Flash_Write_Data+0xb8>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <Flash_Write_Data+0xb8>)
 800109a:	2202      	movs	r2, #2
 800109c:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800109e:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <Flash_Write_Data+0xb8>)
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001118 <Flash_Write_Data+0xb8>)
 80010ae:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4818      	ldr	r0, [pc, #96]	@ (8001118 <Flash_Write_Data+0xb8>)
 80010b8:	f002 f93c 	bl	8003334 <HAL_FLASHEx_Erase>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d01f      	beq.n	8001102 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 80010c2:	f001 ffeb 	bl	800309c <HAL_FLASH_GetError>
 80010c6:	4603      	mov	r3, r0
 80010c8:	e022      	b.n	8001110 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	461c      	mov	r4, r3
 80010d8:	4615      	mov	r5, r2
 80010da:	4622      	mov	r2, r4
 80010dc:	462b      	mov	r3, r5
 80010de:	68f9      	ldr	r1, [r7, #12]
 80010e0:	2002      	movs	r0, #2
 80010e2:	f001 ff55 	bl	8002f90 <HAL_FLASH_Program>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d106      	bne.n	80010fa <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3304      	adds	r3, #4
 80010f0:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	3301      	adds	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f8:	e003      	b.n	8001102 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80010fa:	f001 ffcf 	bl	800309c <HAL_FLASH_GetError>
 80010fe:	4603      	mov	r3, r0
 8001100:	e006      	b.n	8001110 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001106:	429a      	cmp	r2, r3
 8001108:	dbdf      	blt.n	80010ca <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800110a:	f001 ffb7 	bl	800307c <HAL_FLASH_Lock>

	   return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3728      	adds	r7, #40	@ 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	200001f4 	.word	0x200001f4

0800111c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3304      	adds	r3, #4
 8001136:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3304      	adds	r3, #4
 800113c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	80fa      	strh	r2, [r7, #6]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d000      	beq.n	800114a <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001148:	e7ef      	b.n	800112a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 800114a:	bf00      	nop
	}
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <Flash_Write_NUM>:
	}
}


void Flash_Write_NUM (uint32_t StartSectorAddress, float Num)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	ed87 0a00 	vstr	s0, [r7]

	float2Bytes(bytes_temp, Num);
 8001164:	ed97 0a00 	vldr	s0, [r7]
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <Flash_Write_NUM+0x28>)
 800116a:	f7ff ff35 	bl	8000fd8 <float2Bytes>

	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
 800116e:	2201      	movs	r2, #1
 8001170:	4903      	ldr	r1, [pc, #12]	@ (8001180 <Flash_Write_NUM+0x28>)
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff74 	bl	8001060 <Flash_Write_Data>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200001f0 	.word	0x200001f0

08001184 <Flash_Read_NUM>:


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffc1 	bl	800111c <Flash_Read_Data>
	value = Bytes2float(buffer);
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff3b 	bl	800101a <Bytes2float>
 80011a4:	ed87 0a03 	vstr	s0, [r7, #12]
	return value;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	ee07 3a90 	vmov	s15, r3
}
 80011ae:	eeb0 0a67 	vmov.f32	s0, s15
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <LCD_Enable>:
    uint32_t delayTicks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
    while ((DWT->CYCCNT - start) < delayTicks);
}

void LCD_Enable()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2108      	movs	r1, #8
 80011c0:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <LCD_Enable+0x28>)
 80011c2:	f002 fb5d 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f001 f9ca 	bl	8002560 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2108      	movs	r1, #8
 80011d0:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <LCD_Enable+0x28>)
 80011d2:	f002 fb55 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f001 f9c2 	bl	8002560 <HAL_Delay>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000

080011e4 <LCD_Send_4Bits>:

void LCD_Send_4Bits(uint8_t data)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Port, D4_Pin, (data >> 0) & 0x01);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	2110      	movs	r1, #16
 80011fa:	4815      	ldr	r0, [pc, #84]	@ (8001250 <LCD_Send_4Bits+0x6c>)
 80011fc:	f002 fb40 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D5_Pin, (data >> 1) & 0x01);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	085b      	lsrs	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	2120      	movs	r1, #32
 8001210:	480f      	ldr	r0, [pc, #60]	@ (8001250 <LCD_Send_4Bits+0x6c>)
 8001212:	f002 fb35 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D6_Pin, (data >> 2) & 0x01);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	2140      	movs	r1, #64	@ 0x40
 8001226:	480a      	ldr	r0, [pc, #40]	@ (8001250 <LCD_Send_4Bits+0x6c>)
 8001228:	f002 fb2a 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D7_Pin, (data >> 3) & 0x01);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	08db      	lsrs	r3, r3, #3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	2180      	movs	r1, #128	@ 0x80
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <LCD_Send_4Bits+0x6c>)
 800123e:	f002 fb1f 	bl	8003880 <HAL_GPIO_WritePin>
    LCD_Enable();
 8001242:	f7ff ffb9 	bl	80011b8 <LCD_Enable>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <LCD_Send_Cmd>:

void LCD_Send_Cmd(char cmd)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Port, RS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2104      	movs	r1, #4
 8001262:	480b      	ldr	r0, [pc, #44]	@ (8001290 <LCD_Send_Cmd+0x3c>)
 8001264:	f002 fb0c 	bl	8003880 <HAL_GPIO_WritePin>
    LCD_Send_4Bits(cmd >> 4);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffb8 	bl	80011e4 <LCD_Send_4Bits>
    LCD_Send_4Bits(cmd & 0x0F);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffb1 	bl	80011e4 <LCD_Send_4Bits>
    HAL_Delay(2);
 8001282:	2002      	movs	r0, #2
 8001284:	f001 f96c 	bl	8002560 <HAL_Delay>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <LCD_Send_Data>:

void LCD_Send_Data(char data)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Port, RS_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2104      	movs	r1, #4
 80012a2:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <LCD_Send_Data+0x3c>)
 80012a4:	f002 faec 	bl	8003880 <HAL_GPIO_WritePin>
    LCD_Send_4Bits(data >> 4);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff98 	bl	80011e4 <LCD_Send_4Bits>
    LCD_Send_4Bits(data & 0x0F);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff91 	bl	80011e4 <LCD_Send_4Bits>
    HAL_Delay(2);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f001 f94c 	bl	8002560 <HAL_Delay>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000

080012d4 <LCD_Send_String>:

void LCD_Send_String(char *str)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    while (*str) {
 80012dc:	e006      	b.n	80012ec <LCD_Send_String+0x18>
        LCD_Send_Data(*str++);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffd4 	bl	8001294 <LCD_Send_Data>
    while (*str) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f4      	bne.n	80012de <LCD_Send_String+0xa>
    }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t row, uint8_t col)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	460a      	mov	r2, r1
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	4613      	mov	r3, r2
 800130c:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x80 + col : 0xC0 + col;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d103      	bne.n	800131c <LCD_Set_Cursor+0x1e>
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	3b80      	subs	r3, #128	@ 0x80
 8001318:	b2db      	uxtb	r3, r3
 800131a:	e002      	b.n	8001322 <LCD_Set_Cursor+0x24>
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	3b40      	subs	r3, #64	@ 0x40
 8001320:	b2db      	uxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
    LCD_Send_Cmd(address);
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff94 	bl	8001254 <LCD_Send_Cmd>
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LCD_Init>:

void LCD_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    HAL_Delay(20);
 8001338:	2014      	movs	r0, #20
 800133a:	f001 f911 	bl	8002560 <HAL_Delay>
    LCD_Send_Cmd(0x02); // Init LCD in 4-bit mode
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff ff88 	bl	8001254 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x28); // 2 line, 5x8 font
 8001344:	2028      	movs	r0, #40	@ 0x28
 8001346:	f7ff ff85 	bl	8001254 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x0C); // Display ON, cursor OFF
 800134a:	200c      	movs	r0, #12
 800134c:	f7ff ff82 	bl	8001254 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x06); // Entry mode
 8001350:	2006      	movs	r0, #6
 8001352:	f7ff ff7f 	bl	8001254 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x01); // Clear display
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff ff7c 	bl	8001254 <LCD_Send_Cmd>
    HAL_Delay(2);
 800135c:	2002      	movs	r0, #2
 800135e:	f001 f8ff 	bl	8002560 <HAL_Delay>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <write_temp_min>:

bool led_green_state = false;
bool BCD_state = false;
bool BCD_buzz_state = false;

void write_temp_min (float temp){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	ed87 0a01 	vstr	s0, [r7, #4]
	Flash_Write_NUM(temp_MIN,temp);
 8001372:	ed97 0a01 	vldr	s0, [r7, #4]
 8001376:	4803      	ldr	r0, [pc, #12]	@ (8001384 <write_temp_min+0x1c>)
 8001378:	f7ff feee 	bl	8001158 <Flash_Write_NUM>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0807ff00 	.word	0x0807ff00

08001388 <write_temp_max>:
void write_temp_max (float temp){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0a01 	vstr	s0, [r7, #4]
	Flash_Write_NUM(temp_MAX,temp);
 8001392:	ed97 0a01 	vldr	s0, [r7, #4]
 8001396:	4803      	ldr	r0, [pc, #12]	@ (80013a4 <write_temp_max+0x1c>)
 8001398:	f7ff fede 	bl	8001158 <Flash_Write_NUM>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	0807ff20 	.word	0x0807ff20

080013a8 <write_alert_number>:
void write_alert_number (int num){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	Flash_Write_NUM(alert_number,num);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	eeb0 0a67 	vmov.f32	s0, s15
 80013be:	4803      	ldr	r0, [pc, #12]	@ (80013cc <write_alert_number+0x24>)
 80013c0:	f7ff feca 	bl	8001158 <Flash_Write_NUM>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	0807ff40 	.word	0x0807ff40

080013d0 <read_alert_number>:

int read_alert_number (void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	  int RxVal;
	  RxVal = Flash_Read_NUM(alert_number);
 80013d6:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <read_alert_number+0x24>)
 80013d8:	f7ff fed4 	bl	8001184 <Flash_Read_NUM>
 80013dc:	eef0 7a40 	vmov.f32	s15, s0
 80013e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	607b      	str	r3, [r7, #4]
	  return RxVal;
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	0807ff40 	.word	0x0807ff40

080013f8 <read_temp_min>:
float read_temp_min  (void){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	  float RxVal;
	  RxVal = Flash_Read_NUM(temp_MIN);
 80013fe:	4806      	ldr	r0, [pc, #24]	@ (8001418 <read_temp_min+0x20>)
 8001400:	f7ff fec0 	bl	8001184 <Flash_Read_NUM>
 8001404:	ed87 0a01 	vstr	s0, [r7, #4]
	  return RxVal;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	ee07 3a90 	vmov	s15, r3
}
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	0807ff00 	.word	0x0807ff00

0800141c <read_temp_max>:
float read_temp_max (void){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
	  float RxVal;
	  RxVal = Flash_Read_NUM(temp_MAX);
 8001422:	4806      	ldr	r0, [pc, #24]	@ (800143c <read_temp_max+0x20>)
 8001424:	f7ff feae 	bl	8001184 <Flash_Read_NUM>
 8001428:	ed87 0a01 	vstr	s0, [r7, #4]
	  return RxVal;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	ee07 3a90 	vmov	s15, r3
}
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0807ff20 	.word	0x0807ff20

08001440 <setMotor>:

void setMotor(bool on) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
    if (on) {
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d009      	beq.n	8001464 <setMotor+0x24>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2110      	movs	r1, #16
 8001454:	480a      	ldr	r0, [pc, #40]	@ (8001480 <setMotor+0x40>)
 8001456:	f002 fa13 	bl	8003880 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <setMotor+0x44>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2264      	movs	r2, #100	@ 0x64
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
    }
}
 8001462:	e008      	b.n	8001476 <setMotor+0x36>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <setMotor+0x40>)
 800146a:	f002 fa09 	bl	8003880 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800146e:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <setMotor+0x44>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40020000 	.word	0x40020000
 8001484:	20000250 	.word	0x20000250

08001488 <read_temperature>:

float read_temperature(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
    uint32_t adc_val1 = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]


    sConfig.Channel = ADC_CHANNEL_1;
 800149e:	2301      	movs	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
    sConfig.Rank = 1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	481b      	ldr	r0, [pc, #108]	@ (800151c <read_temperature+0x94>)
 80014b0:	f001 fa3e 	bl	8002930 <HAL_ADC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <read_temperature+0x36>
    {
        Error_Handler();
 80014ba:	f000 fd53 	bl	8001f64 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 80014be:	4817      	ldr	r0, [pc, #92]	@ (800151c <read_temperature+0x94>)
 80014c0:	f001 f8b6 	bl	8002630 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	4814      	ldr	r0, [pc, #80]	@ (800151c <read_temperature+0x94>)
 80014ca:	f001 f998 	bl	80027fe <HAL_ADC_PollForConversion>
    adc_val1 = HAL_ADC_GetValue(&hadc1);
 80014ce:	4813      	ldr	r0, [pc, #76]	@ (800151c <read_temperature+0x94>)
 80014d0:	f001 fa20 	bl	8002914 <HAL_ADC_GetValue>
 80014d4:	61f8      	str	r0, [r7, #28]
    HAL_ADC_Stop(&hadc1);
 80014d6:	4811      	ldr	r0, [pc, #68]	@ (800151c <read_temperature+0x94>)
 80014d8:	f001 f95e 	bl	8002798 <HAL_ADC_Stop>

    float voltage = (adc_val1 * 5.0f) / 4095.0f;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80014ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ee:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001520 <read_temperature+0x98>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	edc7 7a06 	vstr	s15, [r7, #24]
    float temperature = voltage * 100.0f;
 80014fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80014fe:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001524 <read_temperature+0x9c>
 8001502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001506:	edc7 7a05 	vstr	s15, [r7, #20]

    return temperature;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	ee07 3a90 	vmov	s15, r3
}
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000208 	.word	0x20000208
 8001520:	457ff000 	.word	0x457ff000
 8001524:	42c80000 	.word	0x42c80000

08001528 <afficherLettreA>:

void afficherLettreA(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
    uint8_t segmentsActifs = 0x77;
 800152e:	2377      	movs	r3, #119	@ 0x77
 8001530:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 7; i++) {
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	e01f      	b.n	8001578 <afficherLettreA+0x50>
        if (segmentsActifs & (1 << i)) {
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	fa42 f303 	asr.w	r3, r2, r3
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00a      	beq.n	800155e <afficherLettreA+0x36>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 << i, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	480c      	ldr	r0, [pc, #48]	@ (8001588 <afficherLettreA+0x60>)
 8001558:	f002 f992 	bl	8003880 <HAL_GPIO_WritePin>
 800155c:	e009      	b.n	8001572 <afficherLettreA+0x4a>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 << i, GPIO_PIN_RESET);
 800155e:	2201      	movs	r2, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	b29b      	uxth	r3, r3
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	4806      	ldr	r0, [pc, #24]	@ (8001588 <afficherLettreA+0x60>)
 800156e:	f002 f987 	bl	8003880 <HAL_GPIO_WritePin>
    for (int i = 0; i < 7; i++) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3301      	adds	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b06      	cmp	r3, #6
 800157c:	dddc      	ble.n	8001538 <afficherLettreA+0x10>
        }
    }
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40020c00 	.word	0x40020c00

0800158c <eteindreAfficheur>:

void eteindreAfficheur(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
    for (int i = 0; i < 7; i++) {
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e00c      	b.n	80015b2 <eteindreAfficheur+0x26>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 << i, GPIO_PIN_RESET);
 8001598:	2201      	movs	r2, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	4619      	mov	r1, r3
 80015a6:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <eteindreAfficheur+0x38>)
 80015a8:	f002 f96a 	bl	8003880 <HAL_GPIO_WritePin>
    for (int i = 0; i < 7; i++) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	ddef      	ble.n	8001598 <eteindreAfficheur+0xc>
    }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <light_sensor>:


uint32_t light_sensor(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]


    sConfig.Channel = ADC_CHANNEL_0;
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4811      	ldr	r0, [pc, #68]	@ (8001630 <light_sensor+0x68>)
 80015ec:	f001 f9a0 	bl	8002930 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <light_sensor+0x32>
    {
        Error_Handler();
 80015f6:	f000 fcb5 	bl	8001f64 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 80015fa:	480d      	ldr	r0, [pc, #52]	@ (8001630 <light_sensor+0x68>)
 80015fc:	f001 f818 	bl	8002630 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	480a      	ldr	r0, [pc, #40]	@ (8001630 <light_sensor+0x68>)
 8001606:	f001 f8fa 	bl	80027fe <HAL_ADC_PollForConversion>
    adcValue = HAL_ADC_GetValue(&hadc1);
 800160a:	4809      	ldr	r0, [pc, #36]	@ (8001630 <light_sensor+0x68>)
 800160c:	f001 f982 	bl	8002914 <HAL_ADC_GetValue>
 8001610:	4603      	mov	r3, r0
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <light_sensor+0x6c>)
 8001614:	6013      	str	r3, [r2, #0]
    HAL_ADC_Stop(&hadc1);
 8001616:	4806      	ldr	r0, [pc, #24]	@ (8001630 <light_sensor+0x68>)
 8001618:	f001 f8be 	bl	8002798 <HAL_ADC_Stop>


    HAL_Delay(100);
 800161c:	2064      	movs	r0, #100	@ 0x64
 800161e:	f000 ff9f 	bl	8002560 <HAL_Delay>
    return adcValue;
 8001622:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <light_sensor+0x6c>)
 8001624:	681b      	ldr	r3, [r3, #0]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000208 	.word	0x20000208
 8001634:	20000328 	.word	0x20000328

08001638 <main>:

int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b094      	sub	sp, #80	@ 0x50
 800163c:	af00      	add	r7, sp, #0

  HAL_Init();
 800163e:	f000 ff1d 	bl	800247c <HAL_Init>
  SystemClock_Config();
 8001642:	f000 f907 	bl	8001854 <SystemClock_Config>
  MX_GPIO_Init();
 8001646:	f000 fac3 	bl	8001bd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 f963 	bl	8001914 <MX_ADC1_Init>
  MX_TIM1_Init();
 800164e:	f000 f9c3 	bl	80019d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001652:	f000 fa45 	bl	8001ae0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001656:	f000 fa91 	bl	8001b7c <MX_USART2_UART_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800165a:	2100      	movs	r1, #0
 800165c:	486e      	ldr	r0, [pc, #440]	@ (8001818 <main+0x1e0>)
 800165e:	f002 fee3 	bl	8004428 <HAL_TIM_PWM_Start>
  char msg[64];

  write_alert_number(0);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fea0 	bl	80013a8 <write_alert_number>
  write_temp_max(0);
 8001668:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 800181c <main+0x1e4>
 800166c:	f7ff fe8c 	bl	8001388 <write_temp_max>
  write_temp_min(999);
 8001670:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8001820 <main+0x1e8>
 8001674:	f7ff fe78 	bl	8001368 <write_temp_min>

  LCD_Init();
 8001678:	f7ff fe5c 	bl	8001334 <LCD_Init>
  LCD_Set_Cursor(0, 0);
 800167c:	2100      	movs	r1, #0
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff fe3d 	bl	80012fe <LCD_Set_Cursor>
  LCD_Send_String("   Bienvenue");
 8001684:	4867      	ldr	r0, [pc, #412]	@ (8001824 <main+0x1ec>)
 8001686:	f7ff fe25 	bl	80012d4 <LCD_Send_String>
  HAL_Delay(200);
 800168a:	20c8      	movs	r0, #200	@ 0xc8
 800168c:	f000 ff68 	bl	8002560 <HAL_Delay>
  LCD_Init();
 8001690:	f7ff fe50 	bl	8001334 <LCD_Init>
  LCD_Set_Cursor(0, 0);
 8001694:	2100      	movs	r1, #0
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fe31 	bl	80012fe <LCD_Set_Cursor>
  LCD_Send_String("                      ");
 800169c:	4862      	ldr	r0, [pc, #392]	@ (8001828 <main+0x1f0>)
 800169e:	f7ff fe19 	bl	80012d4 <LCD_Send_String>
  float temps_max=0;
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float temps_min=0;
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	64bb      	str	r3, [r7, #72]	@ 0x48

  while (1)
  {
	  HAL_Delay(100);
 80016ae:	2064      	movs	r0, #100	@ 0x64
 80016b0:	f000 ff56 	bl	8002560 <HAL_Delay>
	  if (led_green_state){
 80016b4:	4b5d      	ldr	r3, [pc, #372]	@ (800182c <main+0x1f4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d021      	beq.n	8001700 <main+0xc8>
		  LCD_Init();
 80016bc:	f7ff fe3a 	bl	8001334 <LCD_Init>
		  LCD_Set_Cursor(2, 0);
 80016c0:	2100      	movs	r1, #0
 80016c2:	2002      	movs	r0, #2
 80016c4:	f7ff fe1b 	bl	80012fe <LCD_Set_Cursor>
		  LCD_Send_String("Personne detecté");
 80016c8:	4859      	ldr	r0, [pc, #356]	@ (8001830 <main+0x1f8>)
 80016ca:	f7ff fe03 	bl	80012d4 <LCD_Send_String>
		  if (HAL_GetTick()-led_green_Time >= 300){
 80016ce:	f000 ff3b 	bl	8002548 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	4b57      	ldr	r3, [pc, #348]	@ (8001834 <main+0x1fc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80016de:	d30f      	bcc.n	8001700 <main+0xc8>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80016e0:	2102      	movs	r1, #2
 80016e2:	4855      	ldr	r0, [pc, #340]	@ (8001838 <main+0x200>)
 80016e4:	f002 f8e5 	bl	80038b2 <HAL_GPIO_TogglePin>
			  led_green_state = false;
 80016e8:	4b50      	ldr	r3, [pc, #320]	@ (800182c <main+0x1f4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
			  LCD_Init();
 80016ee:	f7ff fe21 	bl	8001334 <LCD_Init>
    		  LCD_Set_Cursor(0, 0);
 80016f2:	2100      	movs	r1, #0
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fe02 	bl	80012fe <LCD_Set_Cursor>
    		  LCD_Send_String("\n                         ");
 80016fa:	4850      	ldr	r0, [pc, #320]	@ (800183c <main+0x204>)
 80016fc:	f7ff fdea 	bl	80012d4 <LCD_Send_String>
		  }
	  }

	  if(BCD_state){
 8001700:	4b4f      	ldr	r3, [pc, #316]	@ (8001840 <main+0x208>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01a      	beq.n	800173e <main+0x106>


		  if((HAL_GetTick() - start) > 300){
 8001708:	f000 ff1e 	bl	8002548 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	4b4d      	ldr	r3, [pc, #308]	@ (8001844 <main+0x20c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001718:	d901      	bls.n	800171e <main+0xe6>
		  eteindreAfficheur();
 800171a:	f7ff ff37 	bl	800158c <eteindreAfficheur>
		  }
		  if((HAL_GetTick() - start) > 600){
 800171e:	f000 ff13 	bl	8002548 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <main+0x20c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800172e:	d906      	bls.n	800173e <main+0x106>
		  afficherLettreA();
 8001730:	f7ff fefa 	bl	8001528 <afficherLettreA>
		  start=HAL_GetTick();
 8001734:	f000 ff08 	bl	8002548 <HAL_GetTick>
 8001738:	4603      	mov	r3, r0
 800173a:	4a42      	ldr	r2, [pc, #264]	@ (8001844 <main+0x20c>)
 800173c:	6013      	str	r3, [r2, #0]
		  }

	  }
  	  float temp = read_temperature();
 800173e:	f7ff fea3 	bl	8001488 <read_temperature>
 8001742:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
   	  temps_max=read_temp_max();
 8001746:	f7ff fe69 	bl	800141c <read_temp_max>
 800174a:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
  	  if ((temps_max)<temp){
 800174e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001752:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d503      	bpl.n	8001768 <main+0x130>
  		  write_temp_max(temp);
 8001760:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001764:	f7ff fe10 	bl	8001388 <write_temp_max>
  	  }
   	  temps_min=read_temp_min();
 8001768:	f7ff fe46 	bl	80013f8 <read_temp_min>
 800176c:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
  	  if ((temps_min)>temp){
 8001770:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001774:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	dd03      	ble.n	800178a <main+0x152>
  		  write_temp_min(temp);
 8001782:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001786:	f7ff fdef 	bl	8001368 <write_temp_min>
  	  }

  	  write_alert_number(alert_compteur);
 800178a:	4b2f      	ldr	r3, [pc, #188]	@ (8001848 <main+0x210>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fe0a 	bl	80013a8 <write_alert_number>


  	  read_alert_number();
 8001794:	f7ff fe1c 	bl	80013d0 <read_alert_number>
      LCD_Set_Cursor(2, 0);
 8001798:	2100      	movs	r1, #0
 800179a:	2002      	movs	r0, #2
 800179c:	f7ff fdaf 	bl	80012fe <LCD_Set_Cursor>
      sprintf(msg, "Temperature: %.2f C\r\n", temp);
 80017a0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80017a2:	f7fe fed9 	bl	8000558 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	1d38      	adds	r0, r7, #4
 80017ac:	4927      	ldr	r1, [pc, #156]	@ (800184c <main+0x214>)
 80017ae:	f004 fd15 	bl	80061dc <siprintf>
      LCD_Send_String(msg);
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fd8d 	bl	80012d4 <LCD_Send_String>



      if (temp >= TEMP_MAX ) {
 80017ba:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80017be:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80017c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	db03      	blt.n	80017d4 <main+0x19c>
    	  HAL_TIM_Base_Start_IT(&htim2);
 80017cc:	4820      	ldr	r0, [pc, #128]	@ (8001850 <main+0x218>)
 80017ce:	f002 fd4b 	bl	8004268 <HAL_TIM_Base_Start_IT>
 80017d2:	e00e      	b.n	80017f2 <main+0x1ba>
      } else if (temp <= TEMP_MIN ) {
 80017d4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80017d8:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	d805      	bhi.n	80017f2 <main+0x1ba>
    	  HAL_TIM_Base_Stop_IT(&htim2);
 80017e6:	481a      	ldr	r0, [pc, #104]	@ (8001850 <main+0x218>)
 80017e8:	f002 fda0 	bl	800432c <HAL_TIM_Base_Stop_IT>
    	  setMotor(false);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fe27 	bl	8001440 <setMotor>
      }

      if(light_sensor() >= 1539){
 80017f2:	f7ff fee9 	bl	80015c8 <light_sensor>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f240 6202 	movw	r2, #1538	@ 0x602
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d905      	bls.n	800180c <main+0x1d4>
      		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	2120      	movs	r1, #32
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <main+0x200>)
 8001806:	f002 f83b 	bl	8003880 <HAL_GPIO_WritePin>
 800180a:	e750      	b.n	80016ae <main+0x76>
      	  }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2120      	movs	r1, #32
 8001810:	4809      	ldr	r0, [pc, #36]	@ (8001838 <main+0x200>)
 8001812:	f002 f835 	bl	8003880 <HAL_GPIO_WritePin>
  {
 8001816:	e74a      	b.n	80016ae <main+0x76>
 8001818:	20000250 	.word	0x20000250
 800181c:	00000000 	.word	0x00000000
 8001820:	4479c000 	.word	0x4479c000
 8001824:	08008458 	.word	0x08008458
 8001828:	08008468 	.word	0x08008468
 800182c:	20000346 	.word	0x20000346
 8001830:	08008480 	.word	0x08008480
 8001834:	20000338 	.word	0x20000338
 8001838:	40020400 	.word	0x40020400
 800183c:	08008494 	.word	0x08008494
 8001840:	20000347 	.word	0x20000347
 8001844:	20000340 	.word	0x20000340
 8001848:	20000344 	.word	0x20000344
 800184c:	080084b0 	.word	0x080084b0
 8001850:	20000298 	.word	0x20000298

08001854 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	@ 0x50
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	2230      	movs	r2, #48	@ 0x30
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fd1f 	bl	80062a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	4b23      	ldr	r3, [pc, #140]	@ (800190c <SystemClock_Config+0xb8>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	4a22      	ldr	r2, [pc, #136]	@ (800190c <SystemClock_Config+0xb8>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001886:	6413      	str	r3, [r2, #64]	@ 0x40
 8001888:	4b20      	ldr	r3, [pc, #128]	@ (800190c <SystemClock_Config+0xb8>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <SystemClock_Config+0xbc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001910 <SystemClock_Config+0xbc>)
 80018a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <SystemClock_Config+0xbc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b4:	2302      	movs	r3, #2
 80018b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b8:	2301      	movs	r3, #1
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018bc:	2310      	movs	r3, #16
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 f825 	bl	8003918 <HAL_RCC_OscConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018d4:	f000 fb46 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	230f      	movs	r3, #15
 80018da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fa88 	bl	8003e08 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80018fe:	f000 fb31 	bl	8001f64 <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	@ 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000

08001914 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800191a:	463b      	mov	r3, r7
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001928:	4a29      	ldr	r2, [pc, #164]	@ (80019d0 <MX_ADC1_Init+0xbc>)
 800192a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <MX_ADC1_Init+0xb8>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001932:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001938:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <MX_ADC1_Init+0xb8>)
 800193a:	2201      	movs	r2, #1
 800193c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800193e:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001940:	2200      	movs	r2, #0
 8001942:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001944:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194c:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <MX_ADC1_Init+0xb8>)
 800194e:	2200      	movs	r2, #0
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001954:	4a1f      	ldr	r2, [pc, #124]	@ (80019d4 <MX_ADC1_Init+0xc0>)
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001958:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <MX_ADC1_Init+0xb8>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800195e:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001960:	2202      	movs	r2, #2
 8001962:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <MX_ADC1_Init+0xb8>)
 800196e:	2201      	movs	r2, #1
 8001970:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001972:	4816      	ldr	r0, [pc, #88]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001974:	f000 fe18 	bl	80025a8 <HAL_ADC_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800197e:	f000 faf1 	bl	8001f64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  // Channel 0 - Light Sensor (PA0)
  sConfig.Channel = ADC_CHANNEL_0;
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	480e      	ldr	r0, [pc, #56]	@ (80019cc <MX_ADC1_Init+0xb8>)
 8001994:	f000 ffcc 	bl	8002930 <HAL_ADC_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_ADC1_Init+0x8e>
  {
      Error_Handler();
 800199e:	f000 fae1 	bl	8001f64 <Error_Handler>
  }

  // Channel 1 - Temperature Sensor (PA1)
  sConfig.Channel = ADC_CHANNEL_1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	@ (80019cc <MX_ADC1_Init+0xb8>)
 80019b4:	f000 ffbc 	bl	8002930 <HAL_ADC_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_ADC1_Init+0xae>
  {
      Error_Handler();
 80019be:	f000 fad1 	bl	8001f64 <Error_Handler>
  }

}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000208 	.word	0x20000208
 80019d0:	40012000 	.word	0x40012000
 80019d4:	0f000001 	.word	0x0f000001

080019d8 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b092      	sub	sp, #72	@ 0x48
 80019dc:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2220      	movs	r2, #32
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 fc4f 	bl	80062a6 <memset>

  htim1.Instance = TIM1;
 8001a08:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a0a:	4a34      	ldr	r2, [pc, #208]	@ (8001adc <MX_TIM1_Init+0x104>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001a0e:	4b32      	ldr	r3, [pc, #200]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a10:	2254      	movs	r2, #84	@ 0x54
 8001a12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a34:	4828      	ldr	r0, [pc, #160]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a36:	f002 fca8 	bl	800438a <HAL_TIM_PWM_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a40:	f000 fa90 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a50:	4619      	mov	r1, r3
 8001a52:	4821      	ldr	r0, [pc, #132]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a54:	f003 fb12 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a5e:	f000 fa81 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a62:	2360      	movs	r3, #96	@ 0x60
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	4814      	ldr	r0, [pc, #80]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001a88:	f002 fe6e 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001a92:	f000 fa67 	bl	8001f64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4807      	ldr	r0, [pc, #28]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001aba:	f003 fb4d 	bl	8005158 <HAL_TIMEx_ConfigBreakDeadTime>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001ac4:	f000 fa4e 	bl	8001f64 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001ac8:	4803      	ldr	r0, [pc, #12]	@ (8001ad8 <MX_TIM1_Init+0x100>)
 8001aca:	f000 fb05 	bl	80020d8 <HAL_TIM_MspPostInit>
}
 8001ace:	bf00      	nop
 8001ad0:	3748      	adds	r7, #72	@ 0x48
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000250 	.word	0x20000250
 8001adc:	40010000 	.word	0x40010000

08001ae0 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001b04:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001b06:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001b14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b20:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b26:	4814      	ldr	r0, [pc, #80]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001b28:	f002 fb4e 	bl	80041c8 <HAL_TIM_Base_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b32:	f000 fa17 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	4619      	mov	r1, r3
 8001b42:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001b44:	f002 fed2 	bl	80048ec <HAL_TIM_ConfigClockSource>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b4e:	f000 fa09 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <MX_TIM2_Init+0x98>)
 8001b60:	f003 fa8c 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b6a:	f000 f9fb 	bl	8001f64 <Error_Handler>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000298 	.word	0x20000298

08001b7c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <MX_USART2_UART_Init+0x50>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f003 fb36 	bl	8005224 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bbe:	f000 f9d1 	bl	8001f64 <Error_Handler>
  }

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002e0 	.word	0x200002e0
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b6c      	ldr	r3, [pc, #432]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a6b      	ldr	r2, [pc, #428]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b69      	ldr	r3, [pc, #420]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b65      	ldr	r3, [pc, #404]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a64      	ldr	r2, [pc, #400]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b62      	ldr	r3, [pc, #392]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b5e      	ldr	r3, [pc, #376]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a5d      	ldr	r2, [pc, #372]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b57      	ldr	r3, [pc, #348]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a56      	ldr	r2, [pc, #344]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b54      	ldr	r3, [pc, #336]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b50      	ldr	r3, [pc, #320]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b4d      	ldr	r3, [pc, #308]	@ (8001d9c <MX_GPIO_Init+0x1cc>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001c72:	2200      	movs	r2, #0
 8001c74:	21fc      	movs	r1, #252	@ 0xfc
 8001c76:	484a      	ldr	r0, [pc, #296]	@ (8001da0 <MX_GPIO_Init+0x1d0>)
 8001c78:	f001 fe02 	bl	8003880 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2138      	movs	r1, #56	@ 0x38
 8001c80:	4848      	ldr	r0, [pc, #288]	@ (8001da4 <MX_GPIO_Init+0x1d4>)
 8001c82:	f001 fdfd 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2130      	movs	r1, #48	@ 0x30
 8001c8a:	4847      	ldr	r0, [pc, #284]	@ (8001da8 <MX_GPIO_Init+0x1d8>)
 8001c8c:	f001 fdf8 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2123      	movs	r1, #35	@ 0x23
 8001c94:	4845      	ldr	r0, [pc, #276]	@ (8001dac <MX_GPIO_Init+0x1dc>)
 8001c96:	f001 fdf3 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	21ff      	movs	r1, #255	@ 0xff
 8001c9e:	4844      	ldr	r0, [pc, #272]	@ (8001db0 <MX_GPIO_Init+0x1e0>)
 8001ca0:	f001 fdee 	bl	8003880 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001ca4:	23fc      	movs	r3, #252	@ 0xfc
 8001ca6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4839      	ldr	r0, [pc, #228]	@ (8001da0 <MX_GPIO_Init+0x1d0>)
 8001cbc:	f001 fc5c 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4834      	ldr	r0, [pc, #208]	@ (8001da4 <MX_GPIO_Init+0x1d4>)
 8001cd4:	f001 fc50 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cd8:	2338      	movs	r3, #56	@ 0x38
 8001cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	482d      	ldr	r0, [pc, #180]	@ (8001da4 <MX_GPIO_Init+0x1d4>)
 8001cf0:	f001 fc42 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001cf4:	231c      	movs	r3, #28
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cf8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4828      	ldr	r0, [pc, #160]	@ (8001dac <MX_GPIO_Init+0x1dc>)
 8001d0a:	f001 fc35 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d0e:	2330      	movs	r3, #48	@ 0x30
 8001d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4820      	ldr	r0, [pc, #128]	@ (8001da8 <MX_GPIO_Init+0x1d8>)
 8001d26:	f001 fc27 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001d2a:	2323      	movs	r3, #35	@ 0x23
 8001d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481a      	ldr	r0, [pc, #104]	@ (8001dac <MX_GPIO_Init+0x1dc>)
 8001d42:	f001 fc19 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d46:	23ff      	movs	r3, #255	@ 0xff
 8001d48:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4814      	ldr	r0, [pc, #80]	@ (8001db0 <MX_GPIO_Init+0x1e0>)
 8001d5e:	f001 fc0b 	bl	8003578 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2008      	movs	r0, #8
 8001d68:	f001 f8db 	bl	8002f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d6c:	2008      	movs	r0, #8
 8001d6e:	f001 f8f4 	bl	8002f5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2009      	movs	r0, #9
 8001d78:	f001 f8d3 	bl	8002f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d7c:	2009      	movs	r0, #9
 8001d7e:	f001 f8ec 	bl	8002f5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	200a      	movs	r0, #10
 8001d88:	f001 f8cb 	bl	8002f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f001 f8e4 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	@ 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020c00 	.word	0x40020c00

08001db4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  	  currentTime = HAL_GetTick();
 8001dbe:	f000 fbc3 	bl	8002548 <HAL_GetTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a40      	ldr	r2, [pc, #256]	@ (8001ec8 <HAL_GPIO_EXTI_Callback+0x114>)
 8001dc6:	6013      	str	r3, [r2, #0]
  	  // debounce for 5 ms
  	  if (currentTime - previousTime < 5) return;
 8001dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec8 <HAL_GPIO_EXTI_Callback+0x114>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ecc <HAL_GPIO_EXTI_Callback+0x118>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d974      	bls.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x10c>

      switch (GPIO_Pin)
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d04c      	beq.n	8001e76 <HAL_GPIO_EXTI_Callback+0xc2>
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	dc67      	bgt.n	8001eb0 <HAL_GPIO_EXTI_Callback+0xfc>
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d002      	beq.n	8001dea <HAL_GPIO_EXTI_Callback+0x36>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d02a      	beq.n	8001e3e <HAL_GPIO_EXTI_Callback+0x8a>
        		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
        	  }
              break;

          default:
              break;
 8001de8:	e062      	b.n	8001eb0 <HAL_GPIO_EXTI_Callback+0xfc>
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_7);
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	4838      	ldr	r0, [pc, #224]	@ (8001ed0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001dee:	f001 fd60 	bl	80038b2 <HAL_GPIO_TogglePin>
			  afficherLettreA();
 8001df2:	f7ff fb99 	bl	8001528 <afficherLettreA>
			  alert_compteur++;
 8001df6:	4b37      	ldr	r3, [pc, #220]	@ (8001ed4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b35      	ldr	r3, [pc, #212]	@ (8001ed4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001e00:	801a      	strh	r2, [r3, #0]
			  BCD_state = !BCD_state;
 8001e02:	4b35      	ldr	r3, [pc, #212]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f083 0301 	eor.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001e1e:	701a      	strb	r2, [r3, #0]
			  if(!BCD_state){
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_GPIO_EXTI_Callback+0x7e>
				  eteindreAfficheur();
 8001e2e:	f7ff fbad 	bl	800158c <eteindreAfficheur>
			  start = HAL_GetTick();
 8001e32:	f000 fb89 	bl	8002548 <HAL_GetTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a28      	ldr	r2, [pc, #160]	@ (8001edc <HAL_GPIO_EXTI_Callback+0x128>)
 8001e3a:	6013      	str	r3, [r2, #0]
			  break;
 8001e3c:	e03b      	b.n	8001eb6 <HAL_GPIO_EXTI_Callback+0x102>
        	  if(counter > 0){
 8001e3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d036      	beq.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x100>
        		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4826      	ldr	r0, [pc, #152]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001e4c:	f001 fd18 	bl	8003880 <HAL_GPIO_WritePin>
        		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001e50:	2102      	movs	r1, #2
 8001e52:	4824      	ldr	r0, [pc, #144]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001e54:	f001 fd2d 	bl	80038b2 <HAL_GPIO_TogglePin>
        		  led_green_state = true;
 8001e58:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0x134>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
        		  led_green_Time=HAL_GetTick();
 8001e5e:	f000 fb73 	bl	8002548 <HAL_GetTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x138>)
 8001e66:	6013      	str	r3, [r2, #0]
				  counter--;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001e72:	701a      	strb	r2, [r3, #0]
              break;
 8001e74:	e01e      	b.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x100>
        	  if (counter < 7){
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d812      	bhi.n	8001ea4 <HAL_GPIO_EXTI_Callback+0xf0>
        		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4818      	ldr	r0, [pc, #96]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001e82:	f001 fd16 	bl	80038b2 <HAL_GPIO_TogglePin>
        		  led_green_state = true;
 8001e86:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0x134>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
        		  led_green_Time=HAL_GetTick();
 8001e8c:	f000 fb5c 	bl	8002548 <HAL_GetTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x138>)
 8001e94:	6013      	str	r3, [r2, #0]
        		  counter++;
 8001e96:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001ea0:	701a      	strb	r2, [r3, #0]
              break;
 8001ea2:	e008      	b.n	8001eb6 <HAL_GPIO_EXTI_Callback+0x102>
        		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	480e      	ldr	r0, [pc, #56]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001eaa:	f001 fce9 	bl	8003880 <HAL_GPIO_WritePin>
              break;
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_EXTI_Callback+0x102>
              break;
 8001eb0:	bf00      	nop
 8001eb2:	e000      	b.n	8001eb6 <HAL_GPIO_EXTI_Callback+0x102>
              break;
 8001eb4:	bf00      	nop
      }

      previousTime = currentTime;
 8001eb6:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <HAL_GPIO_EXTI_Callback+0x114>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_GPIO_EXTI_Callback+0x118>)
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e000      	b.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x10e>
  	  if (currentTime - previousTime < 5) return;
 8001ec0:	bf00      	nop
}
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000330 	.word	0x20000330
 8001ecc:	20000334 	.word	0x20000334
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	20000344 	.word	0x20000344
 8001ed8:	20000347 	.word	0x20000347
 8001edc:	20000340 	.word	0x20000340
 8001ee0:	2000033c 	.word	0x2000033c
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	20000346 	.word	0x20000346
 8001eec:	20000338 	.word	0x20000338

08001ef0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f00:	d128      	bne.n	8001f54 <HAL_TIM_PeriodElapsedCallback+0x64>
    {
        motor_counter++;
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001f0c:	701a      	strb	r2, [r3, #0]

        if (moteur_actif == 1 && motor_counter == 3)
 8001f0e:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d10d      	bne.n	8001f32 <HAL_TIM_PeriodElapsedCallback+0x42>
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d109      	bne.n	8001f32 <HAL_TIM_PeriodElapsedCallback+0x42>
        {
            setMotor(false);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff fa8e 	bl	8001440 <setMotor>
            moteur_actif = 0;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
            motor_counter = 0;
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
            setMotor(true);
            moteur_actif = 1;
            motor_counter = 0;
        }
    }
}
 8001f30:	e010      	b.n	8001f54 <HAL_TIM_PeriodElapsedCallback+0x64>
        else if (moteur_actif == 0 && motor_counter == 1)
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_TIM_PeriodElapsedCallback+0x64>
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d108      	bne.n	8001f54 <HAL_TIM_PeriodElapsedCallback+0x64>
            setMotor(true);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff fa7c 	bl	8001440 <setMotor>
            moteur_actif = 1;
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
            motor_counter = 0;
 8001f4e:	4b03      	ldr	r3, [pc, #12]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000032d 	.word	0x2000032d
 8001f60:	2000032c 	.word	0x2000032c

08001f64 <Error_Handler>:

void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){}
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <Error_Handler+0x8>

08001f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	@ 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a17      	ldr	r2, [pc, #92]	@ (800203c <HAL_ADC_MspInit+0x7c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d127      	bne.n	8002032 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_ADC_MspInit+0x80>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	4a15      	ldr	r2, [pc, #84]	@ (8002040 <HAL_ADC_MspInit+0x80>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff2:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <HAL_ADC_MspInit+0x80>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <HAL_ADC_MspInit+0x80>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a0e      	ldr	r2, [pc, #56]	@ (8002040 <HAL_ADC_MspInit+0x80>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <HAL_ADC_MspInit+0x80>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800201a:	2303      	movs	r3, #3
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201e:	2303      	movs	r3, #3
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	@ (8002044 <HAL_ADC_MspInit+0x84>)
 800202e:	f001 faa3 	bl	8003578 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	@ 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40012000 	.word	0x40012000
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000

08002048 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0b      	ldr	r2, [pc, #44]	@ (8002084 <HAL_TIM_PWM_MspInit+0x3c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d10d      	bne.n	8002076 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_TIM_PWM_MspInit+0x40>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	4a09      	ldr	r2, [pc, #36]	@ (8002088 <HAL_TIM_PWM_MspInit+0x40>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6453      	str	r3, [r2, #68]	@ 0x44
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_TIM_PWM_MspInit+0x40>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40010000 	.word	0x40010000
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209c:	d115      	bne.n	80020ca <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <HAL_TIM_Base_MspInit+0x48>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	4a0b      	ldr	r2, [pc, #44]	@ (80020d4 <HAL_TIM_Base_MspInit+0x48>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_TIM_Base_MspInit+0x48>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	201c      	movs	r0, #28
 80020c0:	f000 ff2f 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020c4:	201c      	movs	r0, #28
 80020c6:	f000 ff48 	bl	8002f5a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800

080020d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a12      	ldr	r2, [pc, #72]	@ (8002140 <HAL_TIM_MspPostInit+0x68>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d11e      	bne.n	8002138 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_TIM_MspPostInit+0x6c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <HAL_TIM_MspPostInit+0x6c>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_TIM_MspPostInit+0x6c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800211a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002128:	2301      	movs	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	4619      	mov	r1, r3
 8002132:	4805      	ldr	r0, [pc, #20]	@ (8002148 <HAL_TIM_MspPostInit+0x70>)
 8002134:	f001 fa20 	bl	8003578 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40010000 	.word	0x40010000
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000

0800214c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <HAL_UART_MspInit+0x84>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d12b      	bne.n	80021c6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <HAL_UART_MspInit+0x88>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <HAL_UART_MspInit+0x88>)
 8002178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_UART_MspInit+0x88>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <HAL_UART_MspInit+0x88>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a10      	ldr	r2, [pc, #64]	@ (80021d4 <HAL_UART_MspInit+0x88>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_UART_MspInit+0x88>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a6:	230c      	movs	r3, #12
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b6:	2307      	movs	r3, #7
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <HAL_UART_MspInit+0x8c>)
 80021c2:	f001 f9d9 	bl	8003578 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	@ 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40004400 	.word	0x40004400
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <NMI_Handler+0x4>

080021e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <HardFault_Handler+0x4>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <MemManage_Handler+0x4>

080021f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <UsageFault_Handler+0x4>

08002204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002232:	f000 f975 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}

0800223a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800223e:	2004      	movs	r0, #4
 8002240:	f001 fb52 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800224c:	2008      	movs	r0, #8
 800224e:	f001 fb4b 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}

08002256 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800225a:	2010      	movs	r0, #16
 800225c:	f001 fb44 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002268:	4802      	ldr	r0, [pc, #8]	@ (8002274 <TIM2_IRQHandler+0x10>)
 800226a:	f002 f98d 	bl	8004588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000298 	.word	0x20000298

08002278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return 1;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_kill>:

int _kill(int pid, int sig)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002292:	f004 f85b 	bl	800634c <__errno>
 8002296:	4603      	mov	r3, r0
 8002298:	2216      	movs	r2, #22
 800229a:	601a      	str	r2, [r3, #0]
  return -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_exit>:

void _exit (int status)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ffe7 	bl	8002288 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ba:	bf00      	nop
 80022bc:	e7fd      	b.n	80022ba <_exit+0x12>

080022be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e00a      	b.n	80022e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022d0:	f3af 8000 	nop.w
 80022d4:	4601      	mov	r1, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	60ba      	str	r2, [r7, #8]
 80022dc:	b2ca      	uxtb	r2, r1
 80022de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	dbf0      	blt.n	80022d0 <_read+0x12>
  }

  return len;
 80022ee:	687b      	ldr	r3, [r7, #4]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e009      	b.n	800231e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	60ba      	str	r2, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3301      	adds	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	dbf1      	blt.n	800230a <_write+0x12>
  }
  return len;
 8002326:	687b      	ldr	r3, [r7, #4]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_close>:

int _close(int file)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002358:	605a      	str	r2, [r3, #4]
  return 0;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_isatty>:

int _isatty(int file)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a0:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <_sbrk+0x5c>)
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <_sbrk+0x60>)
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <_sbrk+0x64>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	@ (8002400 <_sbrk+0x68>)
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d207      	bcs.n	80023d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c8:	f003 ffc0 	bl	800634c <__errno>
 80023cc:	4603      	mov	r3, r0
 80023ce:	220c      	movs	r2, #12
 80023d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	e009      	b.n	80023ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d8:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <_sbrk+0x64>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023de:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	4a05      	ldr	r2, [pc, #20]	@ (80023fc <_sbrk+0x64>)
 80023e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20018000 	.word	0x20018000
 80023f8:	00000400 	.word	0x00000400
 80023fc:	20000348 	.word	0x20000348
 8002400:	200004c0 	.word	0x200004c0

08002404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <SystemInit+0x20>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240e:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <SystemInit+0x20>)
 8002410:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002414:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002428:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002460 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800242c:	f7ff ffea 	bl	8002404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002430:	480c      	ldr	r0, [pc, #48]	@ (8002464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002432:	490d      	ldr	r1, [pc, #52]	@ (8002468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002434:	4a0d      	ldr	r2, [pc, #52]	@ (800246c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002438:	e002      	b.n	8002440 <LoopCopyDataInit>

0800243a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800243c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243e:	3304      	adds	r3, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002444:	d3f9      	bcc.n	800243a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002446:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002448:	4c0a      	ldr	r4, [pc, #40]	@ (8002474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800244c:	e001      	b.n	8002452 <LoopFillZerobss>

0800244e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002450:	3204      	adds	r2, #4

08002452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002454:	d3fb      	bcc.n	800244e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002456:	f003 ff7f 	bl	8006358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245a:	f7ff f8ed 	bl	8001638 <main>
  bx  lr    
 800245e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002460:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002468:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800246c:	08008864 	.word	0x08008864
  ldr r2, =_sbss
 8002470:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002474:	200004bc 	.word	0x200004bc

08002478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002478:	e7fe      	b.n	8002478 <ADC_IRQHandler>
	...

0800247c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0d      	ldr	r2, [pc, #52]	@ (80024bc <HAL_Init+0x40>)
 8002486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800248a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <HAL_Init+0x40>)
 8002492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a07      	ldr	r2, [pc, #28]	@ (80024bc <HAL_Init+0x40>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f000 fd31 	bl	8002f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024aa:	200f      	movs	r0, #15
 80024ac:	f000 f808 	bl	80024c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b0:	f7ff fd5e 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00

080024c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c8:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_InitTick+0x54>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <HAL_InitTick+0x58>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fd49 	bl	8002f76 <HAL_SYSTICK_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00e      	b.n	800250c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	d80a      	bhi.n	800250a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f4:	2200      	movs	r2, #0
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f000 fd11 	bl	8002f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002500:	4a06      	ldr	r2, [pc, #24]	@ (800251c <HAL_InitTick+0x5c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000000 	.word	0x20000000
 8002518:	20000008 	.word	0x20000008
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_IncTick+0x20>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_IncTick+0x24>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <HAL_IncTick+0x24>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008
 8002544:	2000034c 	.word	0x2000034c

08002548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return uwTick;
 800254c:	4b03      	ldr	r3, [pc, #12]	@ (800255c <HAL_GetTick+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000034c 	.word	0x2000034c

08002560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff ffee 	bl	8002548 <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d005      	beq.n	8002586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_Delay+0x44>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002586:	bf00      	nop
 8002588:	f7ff ffde 	bl	8002548 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f7      	bhi.n	8002588 <HAL_Delay+0x28>
  {
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000008 	.word	0x20000008

080025a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e033      	b.n	8002626 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fcfa 	bl	8001fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025ee:	f023 0302 	bic.w	r3, r3, #2
 80025f2:	f043 0202 	orr.w	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 faba 	bl	8002b74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f023 0303 	bic.w	r3, r3, #3
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	@ 0x40
 8002616:	e001      	b.n	800261c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_ADC_Start+0x1a>
 8002646:	2302      	movs	r3, #2
 8002648:	e097      	b.n	800277a <HAL_ADC_Start+0x14a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d018      	beq.n	8002692 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002670:	4b45      	ldr	r3, [pc, #276]	@ (8002788 <HAL_ADC_Start+0x158>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a45      	ldr	r2, [pc, #276]	@ (800278c <HAL_ADC_Start+0x15c>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0c9a      	lsrs	r2, r3, #18
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002684:	e002      	b.n	800268c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3b01      	subs	r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f9      	bne.n	8002686 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d15f      	bne.n	8002760 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026de:	d106      	bne.n	80026ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e4:	f023 0206 	bic.w	r2, r3, #6
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80026ec:	e002      	b.n	80026f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fc:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_ADC_Start+0x160>)
 80026fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002708:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d129      	bne.n	8002778 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	e020      	b.n	8002778 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a16      	ldr	r2, [pc, #88]	@ (8002794 <HAL_ADC_Start+0x164>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d11b      	bne.n	8002778 <HAL_ADC_Start+0x148>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d114      	bne.n	8002778 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	e00b      	b.n	8002778 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f043 0210 	orr.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000
 800278c:	431bde83 	.word	0x431bde83
 8002790:	40012300 	.word	0x40012300
 8002794:	40012000 	.word	0x40012000

08002798 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Stop+0x16>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e021      	b.n	80027f2 <HAL_ADC_Stop+0x5a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281a:	d113      	bne.n	8002844 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800282a:	d10b      	bne.n	8002844 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e063      	b.n	800290c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002844:	f7ff fe80 	bl	8002548 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800284a:	e021      	b.n	8002890 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d01d      	beq.n	8002890 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_ADC_PollForConversion+0x6c>
 800285a:	f7ff fe75 	bl	8002548 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d212      	bcs.n	8002890 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d00b      	beq.n	8002890 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e03d      	b.n	800290c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d1d6      	bne.n	800284c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f06f 0212 	mvn.w	r2, #18
 80028a6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d123      	bne.n	800290a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11f      	bne.n	800290a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d111      	bne.n	800290a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1c>
 8002948:	2302      	movs	r3, #2
 800294a:	e105      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x228>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b09      	cmp	r3, #9
 800295a:	d925      	bls.n	80029a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68d9      	ldr	r1, [r3, #12]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	3b1e      	subs	r3, #30
 8002972:	2207      	movs	r2, #7
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43da      	mvns	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	400a      	ands	r2, r1
 8002980:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68d9      	ldr	r1, [r3, #12]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4618      	mov	r0, r3
 8002994:	4603      	mov	r3, r0
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4403      	add	r3, r0
 800299a:	3b1e      	subs	r3, #30
 800299c:	409a      	lsls	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	e022      	b.n	80029ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6919      	ldr	r1, [r3, #16]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	2207      	movs	r2, #7
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	400a      	ands	r2, r1
 80029ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6919      	ldr	r1, [r3, #16]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	4618      	mov	r0, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4403      	add	r3, r0
 80029e4:	409a      	lsls	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d824      	bhi.n	8002a40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	3b05      	subs	r3, #5
 8002a08:	221f      	movs	r2, #31
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b05      	subs	r3, #5
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a3e:	e04c      	b.n	8002ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	d824      	bhi.n	8002a92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b23      	subs	r3, #35	@ 0x23
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43da      	mvns	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	400a      	ands	r2, r1
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	3b23      	subs	r3, #35	@ 0x23
 8002a84:	fa00 f203 	lsl.w	r2, r0, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a90:	e023      	b.n	8002ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b41      	subs	r3, #65	@ 0x41
 8002aa4:	221f      	movs	r2, #31
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	3b41      	subs	r3, #65	@ 0x41
 8002ace:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ada:	4b22      	ldr	r3, [pc, #136]	@ (8002b64 <HAL_ADC_ConfigChannel+0x234>)
 8002adc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a21      	ldr	r2, [pc, #132]	@ (8002b68 <HAL_ADC_ConfigChannel+0x238>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d109      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1cc>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b12      	cmp	r3, #18
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a19      	ldr	r2, [pc, #100]	@ (8002b68 <HAL_ADC_ConfigChannel+0x238>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d123      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x21e>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d003      	beq.n	8002b16 <HAL_ADC_ConfigChannel+0x1e6>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b11      	cmp	r3, #17
 8002b14:	d11b      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d111      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <HAL_ADC_ConfigChannel+0x23c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a10      	ldr	r2, [pc, #64]	@ (8002b70 <HAL_ADC_ConfigChannel+0x240>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	0c9a      	lsrs	r2, r3, #18
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b40:	e002      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f9      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40012300 	.word	0x40012300
 8002b68:	40012000 	.word	0x40012000
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	431bde83 	.word	0x431bde83

08002b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b7c:	4b79      	ldr	r3, [pc, #484]	@ (8002d64 <ADC_Init+0x1f0>)
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	021a      	lsls	r2, r3, #8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	4a58      	ldr	r2, [pc, #352]	@ (8002d68 <ADC_Init+0x1f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	e00f      	b.n	8002c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0202 	bic.w	r2, r2, #2
 8002c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7e1b      	ldrb	r3, [r3, #24]
 8002c8c:	005a      	lsls	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01b      	beq.n	8002cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	035a      	lsls	r2, r3, #13
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	e007      	b.n	8002ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	051a      	lsls	r2, r3, #20
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d2a:	025a      	lsls	r2, r3, #9
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	029a      	lsls	r2, r3, #10
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40012300 	.word	0x40012300
 8002d68:	0f000001 	.word	0x0f000001

08002d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9e:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	60d3      	str	r3, [r2, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db8:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <__NVIC_GetPriorityGrouping+0x18>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db0b      	blt.n	8002dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4907      	ldr	r1, [pc, #28]	@ (8002e08 <__NVIC_EnableIRQ+0x38>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2001      	movs	r0, #1
 8002df2:	fa00 f202 	lsl.w	r2, r0, r2
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db0a      	blt.n	8002e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	490c      	ldr	r1, [pc, #48]	@ (8002e58 <__NVIC_SetPriority+0x4c>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e34:	e00a      	b.n	8002e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4908      	ldr	r1, [pc, #32]	@ (8002e5c <__NVIC_SetPriority+0x50>)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	3b04      	subs	r3, #4
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	440b      	add	r3, r1
 8002e4a:	761a      	strb	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	@ 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f1c3 0307 	rsb	r3, r3, #7
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	bf28      	it	cs
 8002e7e:	2304      	movcs	r3, #4
 8002e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d902      	bls.n	8002e90 <NVIC_EncodePriority+0x30>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3b03      	subs	r3, #3
 8002e8e:	e000      	b.n	8002e92 <NVIC_EncodePriority+0x32>
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	4313      	orrs	r3, r2
         );
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	@ 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ed8:	d301      	bcc.n	8002ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00f      	b.n	8002efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <SysTick_Config+0x40>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	f7ff ff8e 	bl	8002e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <SysTick_Config+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef6:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <SysTick_Config+0x40>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff29 	bl	8002d6c <__NVIC_SetPriorityGrouping>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f34:	f7ff ff3e 	bl	8002db4 <__NVIC_GetPriorityGrouping>
 8002f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff8e 	bl	8002e60 <NVIC_EncodePriority>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff5d 	bl	8002e0c <__NVIC_SetPriority>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff31 	bl	8002dd0 <__NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ffa2 	bl	8002ec8 <SysTick_Config>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002fa2:	4b23      	ldr	r3, [pc, #140]	@ (8003030 <HAL_FLASH_Program+0xa0>)
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_FLASH_Program+0x1e>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e03b      	b.n	8003026 <HAL_FLASH_Program+0x96>
 8002fae:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <HAL_FLASH_Program+0xa0>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fb4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fb8:	f000 f87c 	bl	80030b4 <FLASH_WaitForLastOperation>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d12b      	bne.n	800301e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002fcc:	783b      	ldrb	r3, [r7, #0]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	68b8      	ldr	r0, [r7, #8]
 8002fd2:	f000 f927 	bl	8003224 <FLASH_Program_Byte>
 8002fd6:	e016      	b.n	8003006 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002fde:	883b      	ldrh	r3, [r7, #0]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	68b8      	ldr	r0, [r7, #8]
 8002fe4:	f000 f8fa 	bl	80031dc <FLASH_Program_HalfWord>
 8002fe8:	e00d      	b.n	8003006 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d105      	bne.n	8002ffc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	68b8      	ldr	r0, [r7, #8]
 8002ff6:	f000 f8cf 	bl	8003198 <FLASH_Program_Word>
 8002ffa:	e004      	b.n	8003006 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003000:	68b8      	ldr	r0, [r7, #8]
 8003002:	f000 f897 	bl	8003134 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003006:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800300a:	f000 f853 	bl	80030b4 <FLASH_WaitForLastOperation>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003012:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <HAL_FLASH_Program+0xa4>)
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	4a07      	ldr	r2, [pc, #28]	@ (8003034 <HAL_FLASH_Program+0xa4>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800301e:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <HAL_FLASH_Program+0xa0>)
 8003020:	2200      	movs	r2, #0
 8003022:	761a      	strb	r2, [r3, #24]

  return status;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000350 	.word	0x20000350
 8003034:	40023c00 	.word	0x40023c00

08003038 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_FLASH_Unlock+0x38>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	da0b      	bge.n	8003062 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800304a:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <HAL_FLASH_Unlock+0x38>)
 800304c:	4a09      	ldr	r2, [pc, #36]	@ (8003074 <HAL_FLASH_Unlock+0x3c>)
 800304e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003050:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <HAL_FLASH_Unlock+0x38>)
 8003052:	4a09      	ldr	r2, [pc, #36]	@ (8003078 <HAL_FLASH_Unlock+0x40>)
 8003054:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <HAL_FLASH_Unlock+0x38>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da01      	bge.n	8003062 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003062:	79fb      	ldrb	r3, [r7, #7]
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40023c00 	.word	0x40023c00
 8003074:	45670123 	.word	0x45670123
 8003078:	cdef89ab 	.word	0xcdef89ab

0800307c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_FLASH_Lock+0x1c>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_FLASH_Lock+0x1c>)
 8003086:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800308a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40023c00 	.word	0x40023c00

0800309c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <HAL_FLASH_GetError+0x14>)
 80030a2:	69db      	ldr	r3, [r3, #28]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000350 	.word	0x20000350

080030b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030c0:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <FLASH_WaitForLastOperation+0x78>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80030c6:	f7ff fa3f 	bl	8002548 <HAL_GetTick>
 80030ca:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80030cc:	e010      	b.n	80030f0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d00c      	beq.n	80030f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <FLASH_WaitForLastOperation+0x38>
 80030dc:	f7ff fa34 	bl	8002548 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d201      	bcs.n	80030f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e019      	b.n	8003124 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80030f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003130 <FLASH_WaitForLastOperation+0x7c>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e8      	bne.n	80030ce <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80030fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <FLASH_WaitForLastOperation+0x7c>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <FLASH_WaitForLastOperation+0x7c>)
 800310a:	2201      	movs	r2, #1
 800310c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800310e:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <FLASH_WaitForLastOperation+0x7c>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800311a:	f000 f8a5 	bl	8003268 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0

}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000350 	.word	0x20000350
 8003130:	40023c00 	.word	0x40023c00

08003134 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <FLASH_Program_DoubleWord+0x60>)
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <FLASH_Program_DoubleWord+0x60>)
 8003146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800314a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <FLASH_Program_DoubleWord+0x60>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	4a10      	ldr	r2, [pc, #64]	@ (8003194 <FLASH_Program_DoubleWord+0x60>)
 8003152:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003158:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <FLASH_Program_DoubleWord+0x60>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	4a0d      	ldr	r2, [pc, #52]	@ (8003194 <FLASH_Program_DoubleWord+0x60>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800316a:	f3bf 8f6f 	isb	sy
}
 800316e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	000a      	movs	r2, r1
 800317e:	2300      	movs	r3, #0
 8003180:	68f9      	ldr	r1, [r7, #12]
 8003182:	3104      	adds	r1, #4
 8003184:	4613      	mov	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40023c00 	.word	0x40023c00

08003198 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <FLASH_Program_Word+0x40>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	4a0c      	ldr	r2, [pc, #48]	@ (80031d8 <FLASH_Program_Word+0x40>)
 80031a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <FLASH_Program_Word+0x40>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	4a09      	ldr	r2, [pc, #36]	@ (80031d8 <FLASH_Program_Word+0x40>)
 80031b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80031ba:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <FLASH_Program_Word+0x40>)
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	4a06      	ldr	r2, [pc, #24]	@ (80031d8 <FLASH_Program_Word+0x40>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40023c00 	.word	0x40023c00

080031dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <FLASH_Program_HalfWord+0x44>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003220 <FLASH_Program_HalfWord+0x44>)
 80031ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <FLASH_Program_HalfWord+0x44>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <FLASH_Program_HalfWord+0x44>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003200:	4b07      	ldr	r3, [pc, #28]	@ (8003220 <FLASH_Program_HalfWord+0x44>)
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	4a06      	ldr	r2, [pc, #24]	@ (8003220 <FLASH_Program_HalfWord+0x44>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	887a      	ldrh	r2, [r7, #2]
 8003210:	801a      	strh	r2, [r3, #0]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023c00 	.word	0x40023c00

08003224 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003230:	4b0c      	ldr	r3, [pc, #48]	@ (8003264 <FLASH_Program_Byte+0x40>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4a0b      	ldr	r2, [pc, #44]	@ (8003264 <FLASH_Program_Byte+0x40>)
 8003236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800323a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800323c:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <FLASH_Program_Byte+0x40>)
 800323e:	4a09      	ldr	r2, [pc, #36]	@ (8003264 <FLASH_Program_Byte+0x40>)
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003244:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <FLASH_Program_Byte+0x40>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	4a06      	ldr	r2, [pc, #24]	@ (8003264 <FLASH_Program_Byte+0x40>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	701a      	strb	r2, [r3, #0]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023c00 	.word	0x40023c00

08003268 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800326c:	4b2f      	ldr	r3, [pc, #188]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003278:	4b2d      	ldr	r3, [pc, #180]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f043 0310 	orr.w	r3, r3, #16
 8003280:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 8003282:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003284:	4b29      	ldr	r3, [pc, #164]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 8003286:	2210      	movs	r2, #16
 8003288:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800328a:	4b28      	ldr	r3, [pc, #160]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003296:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f043 0308 	orr.w	r3, r3, #8
 800329e:	4a24      	ldr	r2, [pc, #144]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 80032a0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80032a2:	4b22      	ldr	r3, [pc, #136]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 80032a4:	2220      	movs	r2, #32
 80032a6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80032a8:	4b20      	ldr	r3, [pc, #128]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80032b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 80032be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80032c0:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 80032c2:	2240      	movs	r2, #64	@ 0x40
 80032c4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80032c6:	4b19      	ldr	r3, [pc, #100]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80032d2:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	4a15      	ldr	r2, [pc, #84]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 80032dc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80032de:	4b13      	ldr	r3, [pc, #76]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 80032e0:	2280      	movs	r2, #128	@ 0x80
 80032e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80032e4:	4b11      	ldr	r3, [pc, #68]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 80032fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 80032fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003302:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003310:	4b07      	ldr	r3, [pc, #28]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f043 0320 	orr.w	r3, r3, #32
 8003318:	4a05      	ldr	r2, [pc, #20]	@ (8003330 <FLASH_SetErrorCode+0xc8>)
 800331a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <FLASH_SetErrorCode+0xc4>)
 800331e:	2202      	movs	r2, #2
 8003320:	60da      	str	r2, [r3, #12]
  }
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40023c00 	.word	0x40023c00
 8003330:	20000350 	.word	0x20000350

08003334 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003346:	4b31      	ldr	r3, [pc, #196]	@ (800340c <HAL_FLASHEx_Erase+0xd8>)
 8003348:	7e1b      	ldrb	r3, [r3, #24]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_FLASHEx_Erase+0x1e>
 800334e:	2302      	movs	r3, #2
 8003350:	e058      	b.n	8003404 <HAL_FLASHEx_Erase+0xd0>
 8003352:	4b2e      	ldr	r3, [pc, #184]	@ (800340c <HAL_FLASHEx_Erase+0xd8>)
 8003354:	2201      	movs	r2, #1
 8003356:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003358:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800335c:	f7ff feaa 	bl	80030b4 <FLASH_WaitForLastOperation>
 8003360:	4603      	mov	r3, r0
 8003362:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d148      	bne.n	80033fc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f04f 32ff 	mov.w	r2, #4294967295
 8003370:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d115      	bne.n	80033a6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f000 f844 	bl	8003414 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800338c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003390:	f7ff fe90 	bl	80030b4 <FLASH_WaitForLastOperation>
 8003394:	4603      	mov	r3, r0
 8003396:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003398:	4b1d      	ldr	r3, [pc, #116]	@ (8003410 <HAL_FLASHEx_Erase+0xdc>)
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <HAL_FLASHEx_Erase+0xdc>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6113      	str	r3, [r2, #16]
 80033a4:	e028      	b.n	80033f8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	e01c      	b.n	80033e8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	4619      	mov	r1, r3
 80033b6:	68b8      	ldr	r0, [r7, #8]
 80033b8:	f000 f850 	bl	800345c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80033c0:	f7ff fe78 	bl	80030b4 <FLASH_WaitForLastOperation>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80033c8:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <HAL_FLASHEx_Erase+0xdc>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	4a10      	ldr	r2, [pc, #64]	@ (8003410 <HAL_FLASHEx_Erase+0xdc>)
 80033ce:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80033d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	601a      	str	r2, [r3, #0]
          break;
 80033e0:	e00a      	b.n	80033f8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3301      	adds	r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4413      	add	r3, r2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3da      	bcc.n	80033ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80033f8:	f000 f878 	bl	80034ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033fc:	4b03      	ldr	r3, [pc, #12]	@ (800340c <HAL_FLASHEx_Erase+0xd8>)
 80033fe:	2200      	movs	r2, #0
 8003400:	761a      	strb	r2, [r3, #24]

  return status;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000350 	.word	0x20000350
 8003410:	40023c00 	.word	0x40023c00

08003414 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003420:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <FLASH_MassErase+0x44>)
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	4a0c      	ldr	r2, [pc, #48]	@ (8003458 <FLASH_MassErase+0x44>)
 8003426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <FLASH_MassErase+0x44>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <FLASH_MassErase+0x44>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003438:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <FLASH_MassErase+0x44>)
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	4313      	orrs	r3, r2
 8003442:	4a05      	ldr	r2, [pc, #20]	@ (8003458 <FLASH_MassErase+0x44>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003448:	6113      	str	r3, [r2, #16]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023c00 	.word	0x40023c00

0800345c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e010      	b.n	800349a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d103      	bne.n	8003486 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800347e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e009      	b.n	800349a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d103      	bne.n	8003494 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800348c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e002      	b.n	800349a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003494:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003498:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800349a:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	4a12      	ldr	r2, [pc, #72]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	490f      	ldr	r1, [pc, #60]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	4a0c      	ldr	r2, [pc, #48]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80034bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80034be:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4313      	orrs	r3, r2
 80034c8:	4a07      	ldr	r2, [pc, #28]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80034d0:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	4a04      	ldr	r2, [pc, #16]	@ (80034e8 <FLASH_Erase_Sector+0x8c>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034da:	6113      	str	r3, [r2, #16]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40023c00 	.word	0x40023c00

080034ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80034f0:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <FLASH_FlushCaches+0x88>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d017      	beq.n	800352c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80034fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <FLASH_FlushCaches+0x88>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1c      	ldr	r2, [pc, #112]	@ (8003574 <FLASH_FlushCaches+0x88>)
 8003502:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003506:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003508:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <FLASH_FlushCaches+0x88>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a19      	ldr	r2, [pc, #100]	@ (8003574 <FLASH_FlushCaches+0x88>)
 800350e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b17      	ldr	r3, [pc, #92]	@ (8003574 <FLASH_FlushCaches+0x88>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <FLASH_FlushCaches+0x88>)
 800351a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800351e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003520:	4b14      	ldr	r3, [pc, #80]	@ (8003574 <FLASH_FlushCaches+0x88>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a13      	ldr	r2, [pc, #76]	@ (8003574 <FLASH_FlushCaches+0x88>)
 8003526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800352a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800352c:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <FLASH_FlushCaches+0x88>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d017      	beq.n	8003568 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003538:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <FLASH_FlushCaches+0x88>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <FLASH_FlushCaches+0x88>)
 800353e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003542:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <FLASH_FlushCaches+0x88>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0a      	ldr	r2, [pc, #40]	@ (8003574 <FLASH_FlushCaches+0x88>)
 800354a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <FLASH_FlushCaches+0x88>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a07      	ldr	r2, [pc, #28]	@ (8003574 <FLASH_FlushCaches+0x88>)
 8003556:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800355a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <FLASH_FlushCaches+0x88>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <FLASH_FlushCaches+0x88>)
 8003562:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003566:	6013      	str	r3, [r2, #0]
  }
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40023c00 	.word	0x40023c00

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e159      	b.n	8003848 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f040 8148 	bne.w	8003842 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d005      	beq.n	80035ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d130      	bne.n	800362c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003600:	2201      	movs	r2, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 0201 	and.w	r2, r3, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b03      	cmp	r3, #3
 8003636:	d017      	beq.n	8003668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d123      	bne.n	80036bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	08da      	lsrs	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3208      	adds	r2, #8
 800367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	220f      	movs	r2, #15
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	08da      	lsrs	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3208      	adds	r2, #8
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0203 	and.w	r2, r3, #3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a2 	beq.w	8003842 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b57      	ldr	r3, [pc, #348]	@ (8003860 <HAL_GPIO_Init+0x2e8>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	4a56      	ldr	r2, [pc, #344]	@ (8003860 <HAL_GPIO_Init+0x2e8>)
 8003708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800370c:	6453      	str	r3, [r2, #68]	@ 0x44
 800370e:	4b54      	ldr	r3, [pc, #336]	@ (8003860 <HAL_GPIO_Init+0x2e8>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371a:	4a52      	ldr	r2, [pc, #328]	@ (8003864 <HAL_GPIO_Init+0x2ec>)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	220f      	movs	r2, #15
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a49      	ldr	r2, [pc, #292]	@ (8003868 <HAL_GPIO_Init+0x2f0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d019      	beq.n	800377a <HAL_GPIO_Init+0x202>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a48      	ldr	r2, [pc, #288]	@ (800386c <HAL_GPIO_Init+0x2f4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_GPIO_Init+0x1fe>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a47      	ldr	r2, [pc, #284]	@ (8003870 <HAL_GPIO_Init+0x2f8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00d      	beq.n	8003772 <HAL_GPIO_Init+0x1fa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a46      	ldr	r2, [pc, #280]	@ (8003874 <HAL_GPIO_Init+0x2fc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_GPIO_Init+0x1f6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a45      	ldr	r2, [pc, #276]	@ (8003878 <HAL_GPIO_Init+0x300>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_GPIO_Init+0x1f2>
 8003766:	2304      	movs	r3, #4
 8003768:	e008      	b.n	800377c <HAL_GPIO_Init+0x204>
 800376a:	2307      	movs	r3, #7
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x204>
 800376e:	2303      	movs	r3, #3
 8003770:	e004      	b.n	800377c <HAL_GPIO_Init+0x204>
 8003772:	2302      	movs	r3, #2
 8003774:	e002      	b.n	800377c <HAL_GPIO_Init+0x204>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_GPIO_Init+0x204>
 800377a:	2300      	movs	r3, #0
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	f002 0203 	and.w	r2, r2, #3
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	4093      	lsls	r3, r2
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378c:	4935      	ldr	r1, [pc, #212]	@ (8003864 <HAL_GPIO_Init+0x2ec>)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	3302      	adds	r3, #2
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800379a:	4b38      	ldr	r3, [pc, #224]	@ (800387c <HAL_GPIO_Init+0x304>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037be:	4a2f      	ldr	r2, [pc, #188]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037e8:	4a24      	ldr	r2, [pc, #144]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ee:	4b23      	ldr	r3, [pc, #140]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003812:	4a1a      	ldr	r2, [pc, #104]	@ (800387c <HAL_GPIO_Init+0x304>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003818:	4b18      	ldr	r3, [pc, #96]	@ (800387c <HAL_GPIO_Init+0x304>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800383c:	4a0f      	ldr	r2, [pc, #60]	@ (800387c <HAL_GPIO_Init+0x304>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3301      	adds	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	f67f aea2 	bls.w	8003594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3724      	adds	r7, #36	@ 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	40013800 	.word	0x40013800
 8003868:	40020000 	.word	0x40020000
 800386c:	40020400 	.word	0x40020400
 8003870:	40020800 	.word	0x40020800
 8003874:	40020c00 	.word	0x40020c00
 8003878:	40021000 	.word	0x40021000
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	041a      	lsls	r2, r3, #16
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43d9      	mvns	r1, r3
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	400b      	ands	r3, r1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038f2:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038fe:	4a05      	ldr	r2, [pc, #20]	@ (8003914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fa54 	bl	8001db4 <HAL_GPIO_EXTI_Callback>
  }
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40013c00 	.word	0x40013c00

08003918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e267      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d075      	beq.n	8003a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003936:	4b88      	ldr	r3, [pc, #544]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d00c      	beq.n	800395c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003942:	4b85      	ldr	r3, [pc, #532]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800394a:	2b08      	cmp	r3, #8
 800394c:	d112      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394e:	4b82      	ldr	r3, [pc, #520]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800395a:	d10b      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05b      	beq.n	8003a20 <HAL_RCC_OscConfig+0x108>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d157      	bne.n	8003a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e242      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800397c:	d106      	bne.n	800398c <HAL_RCC_OscConfig+0x74>
 800397e:	4b76      	ldr	r3, [pc, #472]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a75      	ldr	r2, [pc, #468]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e01d      	b.n	80039c8 <HAL_RCC_OscConfig+0xb0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x98>
 8003996:	4b70      	ldr	r3, [pc, #448]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6f      	ldr	r2, [pc, #444]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 800399c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0xb0>
 80039b0:	4b69      	ldr	r3, [pc, #420]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a68      	ldr	r2, [pc, #416]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b66      	ldr	r3, [pc, #408]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a65      	ldr	r2, [pc, #404]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fe fdba 	bl	8002548 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fe fdb6 	bl	8002548 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	@ 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e207      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0xc0>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fda6 	bl	8002548 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe fda2 	bl	8002548 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	@ 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1f3      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	4b51      	ldr	r3, [pc, #324]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0xe8>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d063      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b47      	ldr	r3, [pc, #284]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d11c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a46:	4b44      	ldr	r3, [pc, #272]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b41      	ldr	r3, [pc, #260]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x152>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e1c7      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4937      	ldr	r1, [pc, #220]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b34      	ldr	r3, [pc, #208]	@ (8003b5c <HAL_RCC_OscConfig+0x244>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fe fd5b 	bl	8002548 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe fd57 	bl	8002548 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1a8      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b28      	ldr	r3, [pc, #160]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4925      	ldr	r1, [pc, #148]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b24      	ldr	r3, [pc, #144]	@ (8003b5c <HAL_RCC_OscConfig+0x244>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fd3a 	bl	8002548 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fe fd36 	bl	8002548 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e187      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b1b      	ldr	r3, [pc, #108]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d036      	beq.n	8003b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <HAL_RCC_OscConfig+0x248>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fe fd1a 	bl	8002548 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b18:	f7fe fd16 	bl	8002548 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e167      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x200>
 8003b36:	e01b      	b.n	8003b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <HAL_RCC_OscConfig+0x248>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fd03 	bl	8002548 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	e00e      	b.n	8003b64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fe fcff 	bl	8002548 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d907      	bls.n	8003b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e150      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	42470000 	.word	0x42470000
 8003b60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b64:	4b88      	ldr	r3, [pc, #544]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ea      	bne.n	8003b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8097 	beq.w	8003cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b82:	4b81      	ldr	r3, [pc, #516]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	4b7d      	ldr	r3, [pc, #500]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	4a7c      	ldr	r2, [pc, #496]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bae:	4b77      	ldr	r3, [pc, #476]	@ (8003d8c <HAL_RCC_OscConfig+0x474>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d118      	bne.n	8003bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bba:	4b74      	ldr	r3, [pc, #464]	@ (8003d8c <HAL_RCC_OscConfig+0x474>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a73      	ldr	r2, [pc, #460]	@ (8003d8c <HAL_RCC_OscConfig+0x474>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe fcbf 	bl	8002548 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bce:	f7fe fcbb 	bl	8002548 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e10c      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d8c <HAL_RCC_OscConfig+0x474>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x2ea>
 8003bf4:	4b64      	ldr	r3, [pc, #400]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf8:	4a63      	ldr	r2, [pc, #396]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c00:	e01c      	b.n	8003c3c <HAL_RCC_OscConfig+0x324>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b05      	cmp	r3, #5
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x30c>
 8003c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c16:	4b5c      	ldr	r3, [pc, #368]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0x324>
 8003c24:	4b58      	ldr	r3, [pc, #352]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	4a57      	ldr	r2, [pc, #348]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c30:	4b55      	ldr	r3, [pc, #340]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c34:	4a54      	ldr	r2, [pc, #336]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f023 0304 	bic.w	r3, r3, #4
 8003c3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fe fc80 	bl	8002548 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fc7c 	bl	8002548 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0cb      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	4b49      	ldr	r3, [pc, #292]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ee      	beq.n	8003c4c <HAL_RCC_OscConfig+0x334>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c70:	f7fe fc6a 	bl	8002548 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fe fc66 	bl	8002548 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0b5      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1ee      	bne.n	8003c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d105      	bne.n	8003cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca0:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	4a38      	ldr	r2, [pc, #224]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80a1 	beq.w	8003df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb6:	4b34      	ldr	r3, [pc, #208]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d05c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d141      	bne.n	8003d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <HAL_RCC_OscConfig+0x478>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fc3a 	bl	8002548 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fc36 	bl	8002548 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e087      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	491b      	ldr	r1, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d20:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <HAL_RCC_OscConfig+0x478>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7fe fc0f 	bl	8002548 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7fe fc0b 	bl	8002548 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e05c      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d40:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x416>
 8003d4c:	e054      	b.n	8003df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <HAL_RCC_OscConfig+0x478>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fe fbf8 	bl	8002548 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fe fbf4 	bl	8002548 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e045      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCC_OscConfig+0x470>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x444>
 8003d7a:	e03d      	b.n	8003df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e038      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x4ec>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d028      	beq.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d121      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d11a      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d111      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800

08003e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0cc      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b68      	ldr	r3, [pc, #416]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d90c      	bls.n	8003e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b65      	ldr	r3, [pc, #404]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b63      	ldr	r3, [pc, #396]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0b8      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d020      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e5c:	4b59      	ldr	r3, [pc, #356]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a58      	ldr	r2, [pc, #352]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e74:	4b53      	ldr	r3, [pc, #332]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a52      	ldr	r2, [pc, #328]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b50      	ldr	r3, [pc, #320]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	494d      	ldr	r1, [pc, #308]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d044      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b47      	ldr	r3, [pc, #284]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d119      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e07f      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e06f      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e067      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee6:	4b37      	ldr	r3, [pc, #220]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f023 0203 	bic.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4934      	ldr	r1, [pc, #208]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef8:	f7fe fb26 	bl	8002548 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fe fb22 	bl	8002548 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e04f      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f16:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 020c 	and.w	r2, r3, #12
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d1eb      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f28:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d20c      	bcs.n	8003f50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b20      	ldr	r3, [pc, #128]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e032      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4916      	ldr	r1, [pc, #88]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7a:	4b12      	ldr	r3, [pc, #72]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	490e      	ldr	r1, [pc, #56]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f8e:	f000 f821 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8003f92:	4602      	mov	r2, r0
 8003f94:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	490a      	ldr	r1, [pc, #40]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	5ccb      	ldrb	r3, [r1, r3]
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a09      	ldr	r2, [pc, #36]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003faa:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fa86 	bl	80024c0 <HAL_InitTick>

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023c00 	.word	0x40023c00
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	080084c8 	.word	0x080084c8
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	20000004 	.word	0x20000004

08003fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd8:	b090      	sub	sp, #64	@ 0x40
 8003fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fec:	4b59      	ldr	r3, [pc, #356]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d00d      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x40>
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	f200 80a1 	bhi.w	8004140 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x34>
 8004002:	2b04      	cmp	r3, #4
 8004004:	d003      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x3a>
 8004006:	e09b      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x184>)
 800400a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800400c:	e09b      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800400e:	4b53      	ldr	r3, [pc, #332]	@ (800415c <HAL_RCC_GetSysClockFreq+0x188>)
 8004010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004012:	e098      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004014:	4b4f      	ldr	r3, [pc, #316]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800401c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800401e:	4b4d      	ldr	r3, [pc, #308]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d028      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402a:	4b4a      	ldr	r3, [pc, #296]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	099b      	lsrs	r3, r3, #6
 8004030:	2200      	movs	r2, #0
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	627a      	str	r2, [r7, #36]	@ 0x24
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800403c:	2100      	movs	r1, #0
 800403e:	4b47      	ldr	r3, [pc, #284]	@ (800415c <HAL_RCC_GetSysClockFreq+0x188>)
 8004040:	fb03 f201 	mul.w	r2, r3, r1
 8004044:	2300      	movs	r3, #0
 8004046:	fb00 f303 	mul.w	r3, r0, r3
 800404a:	4413      	add	r3, r2
 800404c:	4a43      	ldr	r2, [pc, #268]	@ (800415c <HAL_RCC_GetSysClockFreq+0x188>)
 800404e:	fba0 1202 	umull	r1, r2, r0, r2
 8004052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004054:	460a      	mov	r2, r1
 8004056:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800405a:	4413      	add	r3, r2
 800405c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004060:	2200      	movs	r2, #0
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	61fa      	str	r2, [r7, #28]
 8004066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800406a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800406e:	f7fc fda3 	bl	8000bb8 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4613      	mov	r3, r2
 8004078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800407a:	e053      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407c:	4b35      	ldr	r3, [pc, #212]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	099b      	lsrs	r3, r3, #6
 8004082:	2200      	movs	r2, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	617a      	str	r2, [r7, #20]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800408e:	f04f 0b00 	mov.w	fp, #0
 8004092:	4652      	mov	r2, sl
 8004094:	465b      	mov	r3, fp
 8004096:	f04f 0000 	mov.w	r0, #0
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	0159      	lsls	r1, r3, #5
 80040a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a4:	0150      	lsls	r0, r2, #5
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	ebb2 080a 	subs.w	r8, r2, sl
 80040ae:	eb63 090b 	sbc.w	r9, r3, fp
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040c6:	ebb2 0408 	subs.w	r4, r2, r8
 80040ca:	eb63 0509 	sbc.w	r5, r3, r9
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	00eb      	lsls	r3, r5, #3
 80040d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040dc:	00e2      	lsls	r2, r4, #3
 80040de:	4614      	mov	r4, r2
 80040e0:	461d      	mov	r5, r3
 80040e2:	eb14 030a 	adds.w	r3, r4, sl
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	eb45 030b 	adc.w	r3, r5, fp
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fa:	4629      	mov	r1, r5
 80040fc:	028b      	lsls	r3, r1, #10
 80040fe:	4621      	mov	r1, r4
 8004100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004104:	4621      	mov	r1, r4
 8004106:	028a      	lsls	r2, r1, #10
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410e:	2200      	movs	r2, #0
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	60fa      	str	r2, [r7, #12]
 8004114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004118:	f7fc fd4e 	bl	8000bb8 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004124:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	3301      	adds	r3, #1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004134:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800413e:	e002      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x184>)
 8004142:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004148:	4618      	mov	r0, r3
 800414a:	3740      	adds	r7, #64	@ 0x40
 800414c:	46bd      	mov	sp, r7
 800414e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	00f42400 	.word	0x00f42400
 800415c:	017d7840 	.word	0x017d7840

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <HAL_RCC_GetHCLKFreq+0x14>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000000 	.word	0x20000000

08004178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800417c:	f7ff fff0 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0a9b      	lsrs	r3, r3, #10
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4903      	ldr	r1, [pc, #12]	@ (800419c <HAL_RCC_GetPCLK1Freq+0x24>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	080084d8 	.word	0x080084d8

080041a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041a4:	f7ff ffdc 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	0b5b      	lsrs	r3, r3, #13
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4903      	ldr	r1, [pc, #12]	@ (80041c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b6:	5ccb      	ldrb	r3, [r1, r3]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40023800 	.word	0x40023800
 80041c4:	080084d8 	.word	0x080084d8

080041c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e041      	b.n	800425e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd ff4c 	bl	800208c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f000 fc60 	bl	8004acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d001      	beq.n	8004280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e044      	b.n	800430a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1e      	ldr	r2, [pc, #120]	@ (8004318 <HAL_TIM_Base_Start_IT+0xb0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d018      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x6c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042aa:	d013      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x6c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1a      	ldr	r2, [pc, #104]	@ (800431c <HAL_TIM_Base_Start_IT+0xb4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00e      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x6c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <HAL_TIM_Base_Start_IT+0xb8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d009      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x6c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a17      	ldr	r2, [pc, #92]	@ (8004324 <HAL_TIM_Base_Start_IT+0xbc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x6c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a16      	ldr	r2, [pc, #88]	@ (8004328 <HAL_TIM_Base_Start_IT+0xc0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d111      	bne.n	80042f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d010      	beq.n	8004308 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f6:	e007      	b.n	8004308 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010000 	.word	0x40010000
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40014000 	.word	0x40014000

0800432c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10f      	bne.n	8004374 <HAL_TIM_Base_Stop_IT+0x48>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	f240 4344 	movw	r3, #1092	@ 0x444
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <HAL_TIM_Base_Stop_IT+0x48>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e041      	b.n	8004420 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fd fe49 	bl	8002048 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f000 fb7f 	bl	8004acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_TIM_PWM_Start+0x24>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e022      	b.n	8004492 <HAL_TIM_PWM_Start+0x6a>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d109      	bne.n	8004466 <HAL_TIM_PWM_Start+0x3e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e015      	b.n	8004492 <HAL_TIM_PWM_Start+0x6a>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d109      	bne.n	8004480 <HAL_TIM_PWM_Start+0x58>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e008      	b.n	8004492 <HAL_TIM_PWM_Start+0x6a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e068      	b.n	800456c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_TIM_PWM_Start+0x82>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a8:	e013      	b.n	80044d2 <HAL_TIM_PWM_Start+0xaa>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_PWM_Start+0x92>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b8:	e00b      	b.n	80044d2 <HAL_TIM_PWM_Start+0xaa>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Start+0xa2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c8:	e003      	b.n	80044d2 <HAL_TIM_PWM_Start+0xaa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2201      	movs	r2, #1
 80044d8:	6839      	ldr	r1, [r7, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fda8 	bl	8005030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a23      	ldr	r2, [pc, #140]	@ (8004574 <HAL_TIM_PWM_Start+0x14c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d107      	bne.n	80044fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <HAL_TIM_PWM_Start+0x14c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450c:	d013      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <HAL_TIM_PWM_Start+0x150>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a17      	ldr	r2, [pc, #92]	@ (800457c <HAL_TIM_PWM_Start+0x154>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a16      	ldr	r2, [pc, #88]	@ (8004580 <HAL_TIM_PWM_Start+0x158>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a14      	ldr	r2, [pc, #80]	@ (8004584 <HAL_TIM_PWM_Start+0x15c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d111      	bne.n	800455a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b06      	cmp	r3, #6
 8004546:	d010      	beq.n	800456a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	e007      	b.n	800456a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40010000 	.word	0x40010000
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40014000 	.word	0x40014000

08004588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d020      	beq.n	80045ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0202 	mvn.w	r2, #2
 80045bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa5b 	bl	8004a8e <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa4d 	bl	8004a7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fa5e 	bl	8004aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d020      	beq.n	8004638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01b      	beq.n	8004638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0204 	mvn.w	r2, #4
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa35 	bl	8004a8e <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa27 	bl	8004a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fa38 	bl	8004aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d020      	beq.n	8004684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0208 	mvn.w	r2, #8
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2204      	movs	r2, #4
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa0f 	bl	8004a8e <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa01 	bl	8004a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fa12 	bl	8004aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d020      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01b      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0210 	mvn.w	r2, #16
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2208      	movs	r2, #8
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9e9 	bl	8004a8e <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9db 	bl	8004a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f9ec 	bl	8004aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0201 	mvn.w	r2, #1
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fbfe 	bl	8001ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fd7c 	bl	8005210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9bd 	bl	8004ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0220 	mvn.w	r2, #32
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd4e 	bl	80051fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004782:	2302      	movs	r3, #2
 8004784:	e0ae      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b0c      	cmp	r3, #12
 8004792:	f200 809f 	bhi.w	80048d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004796:	a201      	add	r2, pc, #4	@ (adr r2, 800479c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047d1 	.word	0x080047d1
 80047a0:	080048d5 	.word	0x080048d5
 80047a4:	080048d5 	.word	0x080048d5
 80047a8:	080048d5 	.word	0x080048d5
 80047ac:	08004811 	.word	0x08004811
 80047b0:	080048d5 	.word	0x080048d5
 80047b4:	080048d5 	.word	0x080048d5
 80047b8:	080048d5 	.word	0x080048d5
 80047bc:	08004853 	.word	0x08004853
 80047c0:	080048d5 	.word	0x080048d5
 80047c4:	080048d5 	.word	0x080048d5
 80047c8:	080048d5 	.word	0x080048d5
 80047cc:	08004893 	.word	0x08004893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fa04 	bl	8004be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6999      	ldr	r1, [r3, #24]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	619a      	str	r2, [r3, #24]
      break;
 800480e:	e064      	b.n	80048da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fa4a 	bl	8004cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800482a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]
      break;
 8004850:	e043      	b.n	80048da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fa95 	bl	8004d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0208 	orr.w	r2, r2, #8
 800486c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0204 	bic.w	r2, r2, #4
 800487c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	61da      	str	r2, [r3, #28]
      break;
 8004890:	e023      	b.n	80048da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fadf 	bl	8004e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69d9      	ldr	r1, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	021a      	lsls	r2, r3, #8
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	61da      	str	r2, [r3, #28]
      break;
 80048d2:	e002      	b.n	80048da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
      break;
 80048d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_TIM_ConfigClockSource+0x1c>
 8004904:	2302      	movs	r3, #2
 8004906:	e0b4      	b.n	8004a72 <HAL_TIM_ConfigClockSource+0x186>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800492e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004940:	d03e      	beq.n	80049c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004946:	f200 8087 	bhi.w	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800494e:	f000 8086 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x172>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004956:	d87f      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004958:	2b70      	cmp	r3, #112	@ 0x70
 800495a:	d01a      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0xa6>
 800495c:	2b70      	cmp	r3, #112	@ 0x70
 800495e:	d87b      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004960:	2b60      	cmp	r3, #96	@ 0x60
 8004962:	d050      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x11a>
 8004964:	2b60      	cmp	r3, #96	@ 0x60
 8004966:	d877      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004968:	2b50      	cmp	r3, #80	@ 0x50
 800496a:	d03c      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0xfa>
 800496c:	2b50      	cmp	r3, #80	@ 0x50
 800496e:	d873      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b40      	cmp	r3, #64	@ 0x40
 8004972:	d058      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x13a>
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d86f      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b30      	cmp	r3, #48	@ 0x30
 800497a:	d064      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x15a>
 800497c:	2b30      	cmp	r3, #48	@ 0x30
 800497e:	d86b      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b20      	cmp	r3, #32
 8004982:	d060      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x15a>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d867      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d05c      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x15a>
 800498c:	2b10      	cmp	r3, #16
 800498e:	d05a      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	e062      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049a2:	f000 fb25 	bl	8004ff0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	609a      	str	r2, [r3, #8]
      break;
 80049be:	e04f      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d0:	f000 fb0e 	bl	8004ff0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e2:	609a      	str	r2, [r3, #8]
      break;
 80049e4:	e03c      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f2:	461a      	mov	r2, r3
 80049f4:	f000 fa82 	bl	8004efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2150      	movs	r1, #80	@ 0x50
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fadb 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004a04:	e02c      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a12:	461a      	mov	r2, r3
 8004a14:	f000 faa1 	bl	8004f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2160      	movs	r1, #96	@ 0x60
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 facb 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004a24:	e01c      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a32:	461a      	mov	r2, r3
 8004a34:	f000 fa62 	bl	8004efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2140      	movs	r1, #64	@ 0x40
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fabb 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004a44:	e00c      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f000 fab2 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004a56:	e003      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5c:	e000      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a3a      	ldr	r2, [pc, #232]	@ (8004bc8 <TIM_Base_SetConfig+0xfc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00f      	beq.n	8004b04 <TIM_Base_SetConfig+0x38>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aea:	d00b      	beq.n	8004b04 <TIM_Base_SetConfig+0x38>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a37      	ldr	r2, [pc, #220]	@ (8004bcc <TIM_Base_SetConfig+0x100>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_Base_SetConfig+0x38>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a36      	ldr	r2, [pc, #216]	@ (8004bd0 <TIM_Base_SetConfig+0x104>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0x38>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a35      	ldr	r2, [pc, #212]	@ (8004bd4 <TIM_Base_SetConfig+0x108>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d108      	bne.n	8004b16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc8 <TIM_Base_SetConfig+0xfc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01b      	beq.n	8004b56 <TIM_Base_SetConfig+0x8a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b24:	d017      	beq.n	8004b56 <TIM_Base_SetConfig+0x8a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a28      	ldr	r2, [pc, #160]	@ (8004bcc <TIM_Base_SetConfig+0x100>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <TIM_Base_SetConfig+0x8a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a27      	ldr	r2, [pc, #156]	@ (8004bd0 <TIM_Base_SetConfig+0x104>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00f      	beq.n	8004b56 <TIM_Base_SetConfig+0x8a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a26      	ldr	r2, [pc, #152]	@ (8004bd4 <TIM_Base_SetConfig+0x108>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <TIM_Base_SetConfig+0x8a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a25      	ldr	r2, [pc, #148]	@ (8004bd8 <TIM_Base_SetConfig+0x10c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <TIM_Base_SetConfig+0x8a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a24      	ldr	r2, [pc, #144]	@ (8004bdc <TIM_Base_SetConfig+0x110>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_Base_SetConfig+0x8a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a23      	ldr	r2, [pc, #140]	@ (8004be0 <TIM_Base_SetConfig+0x114>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d108      	bne.n	8004b68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc8 <TIM_Base_SetConfig+0xfc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d105      	bne.n	8004bba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f023 0201 	bic.w	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	611a      	str	r2, [r3, #16]
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40000c00 	.word	0x40000c00
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f023 0201 	bic.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 0302 	bic.w	r3, r3, #2
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cac <TIM_OC1_SetConfig+0xc8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10c      	bne.n	8004c5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0308 	bic.w	r3, r3, #8
 8004c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	@ (8004cac <TIM_OC1_SetConfig+0xc8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d111      	bne.n	8004c86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40010000 	.word	0x40010000

08004cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f023 0210 	bic.w	r2, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0320 	bic.w	r3, r3, #32
 8004cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d84 <TIM_OC2_SetConfig+0xd4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10d      	bne.n	8004d2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	@ (8004d84 <TIM_OC2_SetConfig+0xd4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d113      	bne.n	8004d5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000

08004d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10d      	bne.n	8004e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d113      	bne.n	8004e32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40010000 	.word	0x40010000

08004e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a10      	ldr	r2, [pc, #64]	@ (8004ef8 <TIM_OC4_SetConfig+0x9c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40010000 	.word	0x40010000

08004efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0201 	bic.w	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 030a 	bic.w	r3, r3, #10
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	621a      	str	r2, [r3, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b087      	sub	sp, #28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f023 0210 	bic.w	r2, r3, #16
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	031b      	lsls	r3, r3, #12
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f043 0307 	orr.w	r3, r3, #7
 8004fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800500a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	021a      	lsls	r2, r3, #8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	431a      	orrs	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4313      	orrs	r3, r2
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	2201      	movs	r2, #1
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1a      	ldr	r2, [r3, #32]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	43db      	mvns	r3, r3
 8005052:	401a      	ands	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a1a      	ldr	r2, [r3, #32]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	fa01 f303 	lsl.w	r3, r1, r3
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005090:	2302      	movs	r3, #2
 8005092:	e050      	b.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e0:	d013      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a18      	ldr	r2, [pc, #96]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a16      	ldr	r2, [pc, #88]	@ (800514c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a15      	ldr	r2, [pc, #84]	@ (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a13      	ldr	r2, [pc, #76]	@ (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10c      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4313      	orrs	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40014000 	.word	0x40014000

08005158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005170:	2302      	movs	r3, #2
 8005172:	e03d      	b.n	80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e042      	b.n	80052bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc ff7e 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	@ 0x24
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f82b 	bl	80052c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800527c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800528c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800529c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c8:	b0c0      	sub	sp, #256	@ 0x100
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	68d9      	ldr	r1, [r3, #12]
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	ea40 0301 	orr.w	r3, r0, r1
 80052ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	431a      	orrs	r2, r3
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800531c:	f021 010c 	bic.w	r1, r1, #12
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800532a:	430b      	orrs	r3, r1
 800532c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533e:	6999      	ldr	r1, [r3, #24]
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	ea40 0301 	orr.w	r3, r0, r1
 800534a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b8f      	ldr	r3, [pc, #572]	@ (8005590 <UART_SetConfig+0x2cc>)
 8005354:	429a      	cmp	r2, r3
 8005356:	d005      	beq.n	8005364 <UART_SetConfig+0xa0>
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b8d      	ldr	r3, [pc, #564]	@ (8005594 <UART_SetConfig+0x2d0>)
 8005360:	429a      	cmp	r2, r3
 8005362:	d104      	bne.n	800536e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fe ff1c 	bl	80041a0 <HAL_RCC_GetPCLK2Freq>
 8005368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800536c:	e003      	b.n	8005376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800536e:	f7fe ff03 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 8005372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005380:	f040 810c 	bne.w	800559c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005388:	2200      	movs	r2, #0
 800538a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800538e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005396:	4622      	mov	r2, r4
 8005398:	462b      	mov	r3, r5
 800539a:	1891      	adds	r1, r2, r2
 800539c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800539e:	415b      	adcs	r3, r3
 80053a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053a6:	4621      	mov	r1, r4
 80053a8:	eb12 0801 	adds.w	r8, r2, r1
 80053ac:	4629      	mov	r1, r5
 80053ae:	eb43 0901 	adc.w	r9, r3, r1
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053c6:	4690      	mov	r8, r2
 80053c8:	4699      	mov	r9, r3
 80053ca:	4623      	mov	r3, r4
 80053cc:	eb18 0303 	adds.w	r3, r8, r3
 80053d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053d4:	462b      	mov	r3, r5
 80053d6:	eb49 0303 	adc.w	r3, r9, r3
 80053da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053f2:	460b      	mov	r3, r1
 80053f4:	18db      	adds	r3, r3, r3
 80053f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053f8:	4613      	mov	r3, r2
 80053fa:	eb42 0303 	adc.w	r3, r2, r3
 80053fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005408:	f7fb fbd6 	bl	8000bb8 <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4b61      	ldr	r3, [pc, #388]	@ (8005598 <UART_SetConfig+0x2d4>)
 8005412:	fba3 2302 	umull	r2, r3, r3, r2
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	011c      	lsls	r4, r3, #4
 800541a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541e:	2200      	movs	r2, #0
 8005420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800542c:	4642      	mov	r2, r8
 800542e:	464b      	mov	r3, r9
 8005430:	1891      	adds	r1, r2, r2
 8005432:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005434:	415b      	adcs	r3, r3
 8005436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800543c:	4641      	mov	r1, r8
 800543e:	eb12 0a01 	adds.w	sl, r2, r1
 8005442:	4649      	mov	r1, r9
 8005444:	eb43 0b01 	adc.w	fp, r3, r1
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800545c:	4692      	mov	sl, r2
 800545e:	469b      	mov	fp, r3
 8005460:	4643      	mov	r3, r8
 8005462:	eb1a 0303 	adds.w	r3, sl, r3
 8005466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800546a:	464b      	mov	r3, r9
 800546c:	eb4b 0303 	adc.w	r3, fp, r3
 8005470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005488:	460b      	mov	r3, r1
 800548a:	18db      	adds	r3, r3, r3
 800548c:	643b      	str	r3, [r7, #64]	@ 0x40
 800548e:	4613      	mov	r3, r2
 8005490:	eb42 0303 	adc.w	r3, r2, r3
 8005494:	647b      	str	r3, [r7, #68]	@ 0x44
 8005496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800549a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800549e:	f7fb fb8b 	bl	8000bb8 <__aeabi_uldivmod>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005598 <UART_SetConfig+0x2d4>)
 80054aa:	fba3 2301 	umull	r2, r3, r3, r1
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	2264      	movs	r2, #100	@ 0x64
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	1acb      	subs	r3, r1, r3
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054be:	4b36      	ldr	r3, [pc, #216]	@ (8005598 <UART_SetConfig+0x2d4>)
 80054c0:	fba3 2302 	umull	r2, r3, r3, r2
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054cc:	441c      	add	r4, r3
 80054ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054e8:	415b      	adcs	r3, r3
 80054ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054f0:	4641      	mov	r1, r8
 80054f2:	1851      	adds	r1, r2, r1
 80054f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80054f6:	4649      	mov	r1, r9
 80054f8:	414b      	adcs	r3, r1
 80054fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005508:	4659      	mov	r1, fp
 800550a:	00cb      	lsls	r3, r1, #3
 800550c:	4651      	mov	r1, sl
 800550e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005512:	4651      	mov	r1, sl
 8005514:	00ca      	lsls	r2, r1, #3
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	4603      	mov	r3, r0
 800551c:	4642      	mov	r2, r8
 800551e:	189b      	adds	r3, r3, r2
 8005520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005524:	464b      	mov	r3, r9
 8005526:	460a      	mov	r2, r1
 8005528:	eb42 0303 	adc.w	r3, r2, r3
 800552c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800553c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005544:	460b      	mov	r3, r1
 8005546:	18db      	adds	r3, r3, r3
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800554a:	4613      	mov	r3, r2
 800554c:	eb42 0303 	adc.w	r3, r2, r3
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800555a:	f7fb fb2d 	bl	8000bb8 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <UART_SetConfig+0x2d4>)
 8005564:	fba3 1302 	umull	r1, r3, r3, r2
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	2164      	movs	r1, #100	@ 0x64
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	3332      	adds	r3, #50	@ 0x32
 8005576:	4a08      	ldr	r2, [pc, #32]	@ (8005598 <UART_SetConfig+0x2d4>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	f003 0207 	and.w	r2, r3, #7
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4422      	add	r2, r4
 800558a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800558c:	e106      	b.n	800579c <UART_SetConfig+0x4d8>
 800558e:	bf00      	nop
 8005590:	40011000 	.word	0x40011000
 8005594:	40011400 	.word	0x40011400
 8005598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800559c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055ae:	4642      	mov	r2, r8
 80055b0:	464b      	mov	r3, r9
 80055b2:	1891      	adds	r1, r2, r2
 80055b4:	6239      	str	r1, [r7, #32]
 80055b6:	415b      	adcs	r3, r3
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055be:	4641      	mov	r1, r8
 80055c0:	1854      	adds	r4, r2, r1
 80055c2:	4649      	mov	r1, r9
 80055c4:	eb43 0501 	adc.w	r5, r3, r1
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	00eb      	lsls	r3, r5, #3
 80055d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d6:	00e2      	lsls	r2, r4, #3
 80055d8:	4614      	mov	r4, r2
 80055da:	461d      	mov	r5, r3
 80055dc:	4643      	mov	r3, r8
 80055de:	18e3      	adds	r3, r4, r3
 80055e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055e4:	464b      	mov	r3, r9
 80055e6:	eb45 0303 	adc.w	r3, r5, r3
 80055ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800560a:	4629      	mov	r1, r5
 800560c:	008b      	lsls	r3, r1, #2
 800560e:	4621      	mov	r1, r4
 8005610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005614:	4621      	mov	r1, r4
 8005616:	008a      	lsls	r2, r1, #2
 8005618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800561c:	f7fb facc 	bl	8000bb8 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4b60      	ldr	r3, [pc, #384]	@ (80057a8 <UART_SetConfig+0x4e4>)
 8005626:	fba3 2302 	umull	r2, r3, r3, r2
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	011c      	lsls	r4, r3, #4
 800562e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800563c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	1891      	adds	r1, r2, r2
 8005646:	61b9      	str	r1, [r7, #24]
 8005648:	415b      	adcs	r3, r3
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005650:	4641      	mov	r1, r8
 8005652:	1851      	adds	r1, r2, r1
 8005654:	6139      	str	r1, [r7, #16]
 8005656:	4649      	mov	r1, r9
 8005658:	414b      	adcs	r3, r1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005668:	4659      	mov	r1, fp
 800566a:	00cb      	lsls	r3, r1, #3
 800566c:	4651      	mov	r1, sl
 800566e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005672:	4651      	mov	r1, sl
 8005674:	00ca      	lsls	r2, r1, #3
 8005676:	4610      	mov	r0, r2
 8005678:	4619      	mov	r1, r3
 800567a:	4603      	mov	r3, r0
 800567c:	4642      	mov	r2, r8
 800567e:	189b      	adds	r3, r3, r2
 8005680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005684:	464b      	mov	r3, r9
 8005686:	460a      	mov	r2, r1
 8005688:	eb42 0303 	adc.w	r3, r2, r3
 800568c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800569a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056a8:	4649      	mov	r1, r9
 80056aa:	008b      	lsls	r3, r1, #2
 80056ac:	4641      	mov	r1, r8
 80056ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b2:	4641      	mov	r1, r8
 80056b4:	008a      	lsls	r2, r1, #2
 80056b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056ba:	f7fb fa7d 	bl	8000bb8 <__aeabi_uldivmod>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	4b38      	ldr	r3, [pc, #224]	@ (80057a8 <UART_SetConfig+0x4e4>)
 80056c6:	fba3 2301 	umull	r2, r3, r3, r1
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	2264      	movs	r2, #100	@ 0x64
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	1acb      	subs	r3, r1, r3
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	3332      	adds	r3, #50	@ 0x32
 80056d8:	4a33      	ldr	r2, [pc, #204]	@ (80057a8 <UART_SetConfig+0x4e4>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056e4:	441c      	add	r4, r3
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ea:	2200      	movs	r2, #0
 80056ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80056f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	415b      	adcs	r3, r3
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005704:	4641      	mov	r1, r8
 8005706:	1851      	adds	r1, r2, r1
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	4649      	mov	r1, r9
 800570c:	414b      	adcs	r3, r1
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800571c:	4659      	mov	r1, fp
 800571e:	00cb      	lsls	r3, r1, #3
 8005720:	4651      	mov	r1, sl
 8005722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005726:	4651      	mov	r1, sl
 8005728:	00ca      	lsls	r2, r1, #3
 800572a:	4610      	mov	r0, r2
 800572c:	4619      	mov	r1, r3
 800572e:	4603      	mov	r3, r0
 8005730:	4642      	mov	r2, r8
 8005732:	189b      	adds	r3, r3, r2
 8005734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005736:	464b      	mov	r3, r9
 8005738:	460a      	mov	r2, r1
 800573a:	eb42 0303 	adc.w	r3, r2, r3
 800573e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	663b      	str	r3, [r7, #96]	@ 0x60
 800574a:	667a      	str	r2, [r7, #100]	@ 0x64
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005758:	4649      	mov	r1, r9
 800575a:	008b      	lsls	r3, r1, #2
 800575c:	4641      	mov	r1, r8
 800575e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005762:	4641      	mov	r1, r8
 8005764:	008a      	lsls	r2, r1, #2
 8005766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800576a:	f7fb fa25 	bl	8000bb8 <__aeabi_uldivmod>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <UART_SetConfig+0x4e4>)
 8005774:	fba3 1302 	umull	r1, r3, r3, r2
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	2164      	movs	r1, #100	@ 0x64
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	3332      	adds	r3, #50	@ 0x32
 8005786:	4a08      	ldr	r2, [pc, #32]	@ (80057a8 <UART_SetConfig+0x4e4>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4422      	add	r2, r4
 800579a:	609a      	str	r2, [r3, #8]
}
 800579c:	bf00      	nop
 800579e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057a2:	46bd      	mov	sp, r7
 80057a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a8:	51eb851f 	.word	0x51eb851f

080057ac <__cvt>:
 80057ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	ec57 6b10 	vmov	r6, r7, d0
 80057b4:	2f00      	cmp	r7, #0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4619      	mov	r1, r3
 80057ba:	463b      	mov	r3, r7
 80057bc:	bfbb      	ittet	lt
 80057be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80057c2:	461f      	movlt	r7, r3
 80057c4:	2300      	movge	r3, #0
 80057c6:	232d      	movlt	r3, #45	@ 0x2d
 80057c8:	700b      	strb	r3, [r1, #0]
 80057ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80057d0:	4691      	mov	r9, r2
 80057d2:	f023 0820 	bic.w	r8, r3, #32
 80057d6:	bfbc      	itt	lt
 80057d8:	4632      	movlt	r2, r6
 80057da:	4616      	movlt	r6, r2
 80057dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057e0:	d005      	beq.n	80057ee <__cvt+0x42>
 80057e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057e6:	d100      	bne.n	80057ea <__cvt+0x3e>
 80057e8:	3401      	adds	r4, #1
 80057ea:	2102      	movs	r1, #2
 80057ec:	e000      	b.n	80057f0 <__cvt+0x44>
 80057ee:	2103      	movs	r1, #3
 80057f0:	ab03      	add	r3, sp, #12
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	ab02      	add	r3, sp, #8
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	ec47 6b10 	vmov	d0, r6, r7
 80057fc:	4653      	mov	r3, sl
 80057fe:	4622      	mov	r2, r4
 8005800:	f000 fe5a 	bl	80064b8 <_dtoa_r>
 8005804:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005808:	4605      	mov	r5, r0
 800580a:	d119      	bne.n	8005840 <__cvt+0x94>
 800580c:	f019 0f01 	tst.w	r9, #1
 8005810:	d00e      	beq.n	8005830 <__cvt+0x84>
 8005812:	eb00 0904 	add.w	r9, r0, r4
 8005816:	2200      	movs	r2, #0
 8005818:	2300      	movs	r3, #0
 800581a:	4630      	mov	r0, r6
 800581c:	4639      	mov	r1, r7
 800581e:	f7fb f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005822:	b108      	cbz	r0, 8005828 <__cvt+0x7c>
 8005824:	f8cd 900c 	str.w	r9, [sp, #12]
 8005828:	2230      	movs	r2, #48	@ 0x30
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	454b      	cmp	r3, r9
 800582e:	d31e      	bcc.n	800586e <__cvt+0xc2>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005834:	1b5b      	subs	r3, r3, r5
 8005836:	4628      	mov	r0, r5
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	b004      	add	sp, #16
 800583c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005840:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005844:	eb00 0904 	add.w	r9, r0, r4
 8005848:	d1e5      	bne.n	8005816 <__cvt+0x6a>
 800584a:	7803      	ldrb	r3, [r0, #0]
 800584c:	2b30      	cmp	r3, #48	@ 0x30
 800584e:	d10a      	bne.n	8005866 <__cvt+0xba>
 8005850:	2200      	movs	r2, #0
 8005852:	2300      	movs	r3, #0
 8005854:	4630      	mov	r0, r6
 8005856:	4639      	mov	r1, r7
 8005858:	f7fb f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800585c:	b918      	cbnz	r0, 8005866 <__cvt+0xba>
 800585e:	f1c4 0401 	rsb	r4, r4, #1
 8005862:	f8ca 4000 	str.w	r4, [sl]
 8005866:	f8da 3000 	ldr.w	r3, [sl]
 800586a:	4499      	add	r9, r3
 800586c:	e7d3      	b.n	8005816 <__cvt+0x6a>
 800586e:	1c59      	adds	r1, r3, #1
 8005870:	9103      	str	r1, [sp, #12]
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	e7d9      	b.n	800582a <__cvt+0x7e>

08005876 <__exponent>:
 8005876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005878:	2900      	cmp	r1, #0
 800587a:	bfba      	itte	lt
 800587c:	4249      	neglt	r1, r1
 800587e:	232d      	movlt	r3, #45	@ 0x2d
 8005880:	232b      	movge	r3, #43	@ 0x2b
 8005882:	2909      	cmp	r1, #9
 8005884:	7002      	strb	r2, [r0, #0]
 8005886:	7043      	strb	r3, [r0, #1]
 8005888:	dd29      	ble.n	80058de <__exponent+0x68>
 800588a:	f10d 0307 	add.w	r3, sp, #7
 800588e:	461d      	mov	r5, r3
 8005890:	270a      	movs	r7, #10
 8005892:	461a      	mov	r2, r3
 8005894:	fbb1 f6f7 	udiv	r6, r1, r7
 8005898:	fb07 1416 	mls	r4, r7, r6, r1
 800589c:	3430      	adds	r4, #48	@ 0x30
 800589e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058a2:	460c      	mov	r4, r1
 80058a4:	2c63      	cmp	r4, #99	@ 0x63
 80058a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80058aa:	4631      	mov	r1, r6
 80058ac:	dcf1      	bgt.n	8005892 <__exponent+0x1c>
 80058ae:	3130      	adds	r1, #48	@ 0x30
 80058b0:	1e94      	subs	r4, r2, #2
 80058b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058b6:	1c41      	adds	r1, r0, #1
 80058b8:	4623      	mov	r3, r4
 80058ba:	42ab      	cmp	r3, r5
 80058bc:	d30a      	bcc.n	80058d4 <__exponent+0x5e>
 80058be:	f10d 0309 	add.w	r3, sp, #9
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	42ac      	cmp	r4, r5
 80058c6:	bf88      	it	hi
 80058c8:	2300      	movhi	r3, #0
 80058ca:	3302      	adds	r3, #2
 80058cc:	4403      	add	r3, r0
 80058ce:	1a18      	subs	r0, r3, r0
 80058d0:	b003      	add	sp, #12
 80058d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058dc:	e7ed      	b.n	80058ba <__exponent+0x44>
 80058de:	2330      	movs	r3, #48	@ 0x30
 80058e0:	3130      	adds	r1, #48	@ 0x30
 80058e2:	7083      	strb	r3, [r0, #2]
 80058e4:	70c1      	strb	r1, [r0, #3]
 80058e6:	1d03      	adds	r3, r0, #4
 80058e8:	e7f1      	b.n	80058ce <__exponent+0x58>
	...

080058ec <_printf_float>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	b08d      	sub	sp, #52	@ 0x34
 80058f2:	460c      	mov	r4, r1
 80058f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80058f8:	4616      	mov	r6, r2
 80058fa:	461f      	mov	r7, r3
 80058fc:	4605      	mov	r5, r0
 80058fe:	f000 fcdb 	bl	80062b8 <_localeconv_r>
 8005902:	6803      	ldr	r3, [r0, #0]
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fa fcba 	bl	8000280 <strlen>
 800590c:	2300      	movs	r3, #0
 800590e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005910:	f8d8 3000 	ldr.w	r3, [r8]
 8005914:	9005      	str	r0, [sp, #20]
 8005916:	3307      	adds	r3, #7
 8005918:	f023 0307 	bic.w	r3, r3, #7
 800591c:	f103 0208 	add.w	r2, r3, #8
 8005920:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005924:	f8d4 b000 	ldr.w	fp, [r4]
 8005928:	f8c8 2000 	str.w	r2, [r8]
 800592c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005930:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005934:	9307      	str	r3, [sp, #28]
 8005936:	f8cd 8018 	str.w	r8, [sp, #24]
 800593a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800593e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005942:	4b9c      	ldr	r3, [pc, #624]	@ (8005bb4 <_printf_float+0x2c8>)
 8005944:	f04f 32ff 	mov.w	r2, #4294967295
 8005948:	f7fb f8f8 	bl	8000b3c <__aeabi_dcmpun>
 800594c:	bb70      	cbnz	r0, 80059ac <_printf_float+0xc0>
 800594e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005952:	4b98      	ldr	r3, [pc, #608]	@ (8005bb4 <_printf_float+0x2c8>)
 8005954:	f04f 32ff 	mov.w	r2, #4294967295
 8005958:	f7fb f8d2 	bl	8000b00 <__aeabi_dcmple>
 800595c:	bb30      	cbnz	r0, 80059ac <_printf_float+0xc0>
 800595e:	2200      	movs	r2, #0
 8005960:	2300      	movs	r3, #0
 8005962:	4640      	mov	r0, r8
 8005964:	4649      	mov	r1, r9
 8005966:	f7fb f8c1 	bl	8000aec <__aeabi_dcmplt>
 800596a:	b110      	cbz	r0, 8005972 <_printf_float+0x86>
 800596c:	232d      	movs	r3, #45	@ 0x2d
 800596e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005972:	4a91      	ldr	r2, [pc, #580]	@ (8005bb8 <_printf_float+0x2cc>)
 8005974:	4b91      	ldr	r3, [pc, #580]	@ (8005bbc <_printf_float+0x2d0>)
 8005976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800597a:	bf8c      	ite	hi
 800597c:	4690      	movhi	r8, r2
 800597e:	4698      	movls	r8, r3
 8005980:	2303      	movs	r3, #3
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	f02b 0304 	bic.w	r3, fp, #4
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	f04f 0900 	mov.w	r9, #0
 800598e:	9700      	str	r7, [sp, #0]
 8005990:	4633      	mov	r3, r6
 8005992:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005994:	4621      	mov	r1, r4
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f9d2 	bl	8005d40 <_printf_common>
 800599c:	3001      	adds	r0, #1
 800599e:	f040 808d 	bne.w	8005abc <_printf_float+0x1d0>
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295
 80059a6:	b00d      	add	sp, #52	@ 0x34
 80059a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	4649      	mov	r1, r9
 80059b4:	f7fb f8c2 	bl	8000b3c <__aeabi_dcmpun>
 80059b8:	b140      	cbz	r0, 80059cc <_printf_float+0xe0>
 80059ba:	464b      	mov	r3, r9
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bfbc      	itt	lt
 80059c0:	232d      	movlt	r3, #45	@ 0x2d
 80059c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059c6:	4a7e      	ldr	r2, [pc, #504]	@ (8005bc0 <_printf_float+0x2d4>)
 80059c8:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc4 <_printf_float+0x2d8>)
 80059ca:	e7d4      	b.n	8005976 <_printf_float+0x8a>
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80059d2:	9206      	str	r2, [sp, #24]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	d13b      	bne.n	8005a50 <_printf_float+0x164>
 80059d8:	2306      	movs	r3, #6
 80059da:	6063      	str	r3, [r4, #4]
 80059dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80059e0:	2300      	movs	r3, #0
 80059e2:	6022      	str	r2, [r4, #0]
 80059e4:	9303      	str	r3, [sp, #12]
 80059e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80059e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80059ec:	ab09      	add	r3, sp, #36	@ 0x24
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	6861      	ldr	r1, [r4, #4]
 80059f2:	ec49 8b10 	vmov	d0, r8, r9
 80059f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80059fa:	4628      	mov	r0, r5
 80059fc:	f7ff fed6 	bl	80057ac <__cvt>
 8005a00:	9b06      	ldr	r3, [sp, #24]
 8005a02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a04:	2b47      	cmp	r3, #71	@ 0x47
 8005a06:	4680      	mov	r8, r0
 8005a08:	d129      	bne.n	8005a5e <_printf_float+0x172>
 8005a0a:	1cc8      	adds	r0, r1, #3
 8005a0c:	db02      	blt.n	8005a14 <_printf_float+0x128>
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	4299      	cmp	r1, r3
 8005a12:	dd41      	ble.n	8005a98 <_printf_float+0x1ac>
 8005a14:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a18:	fa5f fa8a 	uxtb.w	sl, sl
 8005a1c:	3901      	subs	r1, #1
 8005a1e:	4652      	mov	r2, sl
 8005a20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a24:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a26:	f7ff ff26 	bl	8005876 <__exponent>
 8005a2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a2c:	1813      	adds	r3, r2, r0
 8005a2e:	2a01      	cmp	r2, #1
 8005a30:	4681      	mov	r9, r0
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	dc02      	bgt.n	8005a3c <_printf_float+0x150>
 8005a36:	6822      	ldr	r2, [r4, #0]
 8005a38:	07d2      	lsls	r2, r2, #31
 8005a3a:	d501      	bpl.n	8005a40 <_printf_float+0x154>
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	6123      	str	r3, [r4, #16]
 8005a40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0a2      	beq.n	800598e <_printf_float+0xa2>
 8005a48:	232d      	movs	r3, #45	@ 0x2d
 8005a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a4e:	e79e      	b.n	800598e <_printf_float+0xa2>
 8005a50:	9a06      	ldr	r2, [sp, #24]
 8005a52:	2a47      	cmp	r2, #71	@ 0x47
 8005a54:	d1c2      	bne.n	80059dc <_printf_float+0xf0>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1c0      	bne.n	80059dc <_printf_float+0xf0>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e7bd      	b.n	80059da <_printf_float+0xee>
 8005a5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a62:	d9db      	bls.n	8005a1c <_printf_float+0x130>
 8005a64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a68:	d118      	bne.n	8005a9c <_printf_float+0x1b0>
 8005a6a:	2900      	cmp	r1, #0
 8005a6c:	6863      	ldr	r3, [r4, #4]
 8005a6e:	dd0b      	ble.n	8005a88 <_printf_float+0x19c>
 8005a70:	6121      	str	r1, [r4, #16]
 8005a72:	b913      	cbnz	r3, 8005a7a <_printf_float+0x18e>
 8005a74:	6822      	ldr	r2, [r4, #0]
 8005a76:	07d0      	lsls	r0, r2, #31
 8005a78:	d502      	bpl.n	8005a80 <_printf_float+0x194>
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	440b      	add	r3, r1
 8005a7e:	6123      	str	r3, [r4, #16]
 8005a80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a82:	f04f 0900 	mov.w	r9, #0
 8005a86:	e7db      	b.n	8005a40 <_printf_float+0x154>
 8005a88:	b913      	cbnz	r3, 8005a90 <_printf_float+0x1a4>
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	07d2      	lsls	r2, r2, #31
 8005a8e:	d501      	bpl.n	8005a94 <_printf_float+0x1a8>
 8005a90:	3302      	adds	r3, #2
 8005a92:	e7f4      	b.n	8005a7e <_printf_float+0x192>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e7f2      	b.n	8005a7e <_printf_float+0x192>
 8005a98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a9e:	4299      	cmp	r1, r3
 8005aa0:	db05      	blt.n	8005aae <_printf_float+0x1c2>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	6121      	str	r1, [r4, #16]
 8005aa6:	07d8      	lsls	r0, r3, #31
 8005aa8:	d5ea      	bpl.n	8005a80 <_printf_float+0x194>
 8005aaa:	1c4b      	adds	r3, r1, #1
 8005aac:	e7e7      	b.n	8005a7e <_printf_float+0x192>
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	bfd4      	ite	le
 8005ab2:	f1c1 0202 	rsble	r2, r1, #2
 8005ab6:	2201      	movgt	r2, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	e7e0      	b.n	8005a7e <_printf_float+0x192>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	055a      	lsls	r2, r3, #21
 8005ac0:	d407      	bmi.n	8005ad2 <_printf_float+0x1e6>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	d12b      	bne.n	8005b28 <_printf_float+0x23c>
 8005ad0:	e767      	b.n	80059a2 <_printf_float+0xb6>
 8005ad2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ad6:	f240 80dd 	bls.w	8005c94 <_printf_float+0x3a8>
 8005ada:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f7fa fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d033      	beq.n	8005b52 <_printf_float+0x266>
 8005aea:	4a37      	ldr	r2, [pc, #220]	@ (8005bc8 <_printf_float+0x2dc>)
 8005aec:	2301      	movs	r3, #1
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	f43f af54 	beq.w	80059a2 <_printf_float+0xb6>
 8005afa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005afe:	4543      	cmp	r3, r8
 8005b00:	db02      	blt.n	8005b08 <_printf_float+0x21c>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	07d8      	lsls	r0, r3, #31
 8005b06:	d50f      	bpl.n	8005b28 <_printf_float+0x23c>
 8005b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b8      	blx	r7
 8005b12:	3001      	adds	r0, #1
 8005b14:	f43f af45 	beq.w	80059a2 <_printf_float+0xb6>
 8005b18:	f04f 0900 	mov.w	r9, #0
 8005b1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b20:	f104 0a1a 	add.w	sl, r4, #26
 8005b24:	45c8      	cmp	r8, r9
 8005b26:	dc09      	bgt.n	8005b3c <_printf_float+0x250>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	079b      	lsls	r3, r3, #30
 8005b2c:	f100 8103 	bmi.w	8005d36 <_printf_float+0x44a>
 8005b30:	68e0      	ldr	r0, [r4, #12]
 8005b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b34:	4298      	cmp	r0, r3
 8005b36:	bfb8      	it	lt
 8005b38:	4618      	movlt	r0, r3
 8005b3a:	e734      	b.n	80059a6 <_printf_float+0xba>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4652      	mov	r2, sl
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f af2b 	beq.w	80059a2 <_printf_float+0xb6>
 8005b4c:	f109 0901 	add.w	r9, r9, #1
 8005b50:	e7e8      	b.n	8005b24 <_printf_float+0x238>
 8005b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dc39      	bgt.n	8005bcc <_printf_float+0x2e0>
 8005b58:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc8 <_printf_float+0x2dc>)
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	f43f af1d 	beq.w	80059a2 <_printf_float+0xb6>
 8005b68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b6c:	ea59 0303 	orrs.w	r3, r9, r3
 8005b70:	d102      	bne.n	8005b78 <_printf_float+0x28c>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	07d9      	lsls	r1, r3, #31
 8005b76:	d5d7      	bpl.n	8005b28 <_printf_float+0x23c>
 8005b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f af0d 	beq.w	80059a2 <_printf_float+0xb6>
 8005b88:	f04f 0a00 	mov.w	sl, #0
 8005b8c:	f104 0b1a 	add.w	fp, r4, #26
 8005b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b92:	425b      	negs	r3, r3
 8005b94:	4553      	cmp	r3, sl
 8005b96:	dc01      	bgt.n	8005b9c <_printf_float+0x2b0>
 8005b98:	464b      	mov	r3, r9
 8005b9a:	e793      	b.n	8005ac4 <_printf_float+0x1d8>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	465a      	mov	r2, fp
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f43f aefb 	beq.w	80059a2 <_printf_float+0xb6>
 8005bac:	f10a 0a01 	add.w	sl, sl, #1
 8005bb0:	e7ee      	b.n	8005b90 <_printf_float+0x2a4>
 8005bb2:	bf00      	nop
 8005bb4:	7fefffff 	.word	0x7fefffff
 8005bb8:	080084e4 	.word	0x080084e4
 8005bbc:	080084e0 	.word	0x080084e0
 8005bc0:	080084ec 	.word	0x080084ec
 8005bc4:	080084e8 	.word	0x080084e8
 8005bc8:	080084f0 	.word	0x080084f0
 8005bcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bd2:	4553      	cmp	r3, sl
 8005bd4:	bfa8      	it	ge
 8005bd6:	4653      	movge	r3, sl
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	4699      	mov	r9, r3
 8005bdc:	dc36      	bgt.n	8005c4c <_printf_float+0x360>
 8005bde:	f04f 0b00 	mov.w	fp, #0
 8005be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005be6:	f104 021a 	add.w	r2, r4, #26
 8005bea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bec:	9306      	str	r3, [sp, #24]
 8005bee:	eba3 0309 	sub.w	r3, r3, r9
 8005bf2:	455b      	cmp	r3, fp
 8005bf4:	dc31      	bgt.n	8005c5a <_printf_float+0x36e>
 8005bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf8:	459a      	cmp	sl, r3
 8005bfa:	dc3a      	bgt.n	8005c72 <_printf_float+0x386>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	07da      	lsls	r2, r3, #31
 8005c00:	d437      	bmi.n	8005c72 <_printf_float+0x386>
 8005c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c04:	ebaa 0903 	sub.w	r9, sl, r3
 8005c08:	9b06      	ldr	r3, [sp, #24]
 8005c0a:	ebaa 0303 	sub.w	r3, sl, r3
 8005c0e:	4599      	cmp	r9, r3
 8005c10:	bfa8      	it	ge
 8005c12:	4699      	movge	r9, r3
 8005c14:	f1b9 0f00 	cmp.w	r9, #0
 8005c18:	dc33      	bgt.n	8005c82 <_printf_float+0x396>
 8005c1a:	f04f 0800 	mov.w	r8, #0
 8005c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c22:	f104 0b1a 	add.w	fp, r4, #26
 8005c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c28:	ebaa 0303 	sub.w	r3, sl, r3
 8005c2c:	eba3 0309 	sub.w	r3, r3, r9
 8005c30:	4543      	cmp	r3, r8
 8005c32:	f77f af79 	ble.w	8005b28 <_printf_float+0x23c>
 8005c36:	2301      	movs	r3, #1
 8005c38:	465a      	mov	r2, fp
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	47b8      	blx	r7
 8005c40:	3001      	adds	r0, #1
 8005c42:	f43f aeae 	beq.w	80059a2 <_printf_float+0xb6>
 8005c46:	f108 0801 	add.w	r8, r8, #1
 8005c4a:	e7ec      	b.n	8005c26 <_printf_float+0x33a>
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b8      	blx	r7
 8005c54:	3001      	adds	r0, #1
 8005c56:	d1c2      	bne.n	8005bde <_printf_float+0x2f2>
 8005c58:	e6a3      	b.n	80059a2 <_printf_float+0xb6>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	9206      	str	r2, [sp, #24]
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f ae9c 	beq.w	80059a2 <_printf_float+0xb6>
 8005c6a:	9a06      	ldr	r2, [sp, #24]
 8005c6c:	f10b 0b01 	add.w	fp, fp, #1
 8005c70:	e7bb      	b.n	8005bea <_printf_float+0x2fe>
 8005c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d1c0      	bne.n	8005c02 <_printf_float+0x316>
 8005c80:	e68f      	b.n	80059a2 <_printf_float+0xb6>
 8005c82:	9a06      	ldr	r2, [sp, #24]
 8005c84:	464b      	mov	r3, r9
 8005c86:	4442      	add	r2, r8
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d1c3      	bne.n	8005c1a <_printf_float+0x32e>
 8005c92:	e686      	b.n	80059a2 <_printf_float+0xb6>
 8005c94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c98:	f1ba 0f01 	cmp.w	sl, #1
 8005c9c:	dc01      	bgt.n	8005ca2 <_printf_float+0x3b6>
 8005c9e:	07db      	lsls	r3, r3, #31
 8005ca0:	d536      	bpl.n	8005d10 <_printf_float+0x424>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f ae78 	beq.w	80059a2 <_printf_float+0xb6>
 8005cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b8      	blx	r7
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f43f ae70 	beq.w	80059a2 <_printf_float+0xb6>
 8005cc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cce:	f7fa ff03 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cd2:	b9c0      	cbnz	r0, 8005d06 <_printf_float+0x41a>
 8005cd4:	4653      	mov	r3, sl
 8005cd6:	f108 0201 	add.w	r2, r8, #1
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d10c      	bne.n	8005cfe <_printf_float+0x412>
 8005ce4:	e65d      	b.n	80059a2 <_printf_float+0xb6>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	465a      	mov	r2, fp
 8005cea:	4631      	mov	r1, r6
 8005cec:	4628      	mov	r0, r5
 8005cee:	47b8      	blx	r7
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	f43f ae56 	beq.w	80059a2 <_printf_float+0xb6>
 8005cf6:	f108 0801 	add.w	r8, r8, #1
 8005cfa:	45d0      	cmp	r8, sl
 8005cfc:	dbf3      	blt.n	8005ce6 <_printf_float+0x3fa>
 8005cfe:	464b      	mov	r3, r9
 8005d00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d04:	e6df      	b.n	8005ac6 <_printf_float+0x1da>
 8005d06:	f04f 0800 	mov.w	r8, #0
 8005d0a:	f104 0b1a 	add.w	fp, r4, #26
 8005d0e:	e7f4      	b.n	8005cfa <_printf_float+0x40e>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4642      	mov	r2, r8
 8005d14:	e7e1      	b.n	8005cda <_printf_float+0x3ee>
 8005d16:	2301      	movs	r3, #1
 8005d18:	464a      	mov	r2, r9
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	f43f ae3e 	beq.w	80059a2 <_printf_float+0xb6>
 8005d26:	f108 0801 	add.w	r8, r8, #1
 8005d2a:	68e3      	ldr	r3, [r4, #12]
 8005d2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d2e:	1a5b      	subs	r3, r3, r1
 8005d30:	4543      	cmp	r3, r8
 8005d32:	dcf0      	bgt.n	8005d16 <_printf_float+0x42a>
 8005d34:	e6fc      	b.n	8005b30 <_printf_float+0x244>
 8005d36:	f04f 0800 	mov.w	r8, #0
 8005d3a:	f104 0919 	add.w	r9, r4, #25
 8005d3e:	e7f4      	b.n	8005d2a <_printf_float+0x43e>

08005d40 <_printf_common>:
 8005d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	4616      	mov	r6, r2
 8005d46:	4698      	mov	r8, r3
 8005d48:	688a      	ldr	r2, [r1, #8]
 8005d4a:	690b      	ldr	r3, [r1, #16]
 8005d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d50:	4293      	cmp	r3, r2
 8005d52:	bfb8      	it	lt
 8005d54:	4613      	movlt	r3, r2
 8005d56:	6033      	str	r3, [r6, #0]
 8005d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	b10a      	cbz	r2, 8005d66 <_printf_common+0x26>
 8005d62:	3301      	adds	r3, #1
 8005d64:	6033      	str	r3, [r6, #0]
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	0699      	lsls	r1, r3, #26
 8005d6a:	bf42      	ittt	mi
 8005d6c:	6833      	ldrmi	r3, [r6, #0]
 8005d6e:	3302      	addmi	r3, #2
 8005d70:	6033      	strmi	r3, [r6, #0]
 8005d72:	6825      	ldr	r5, [r4, #0]
 8005d74:	f015 0506 	ands.w	r5, r5, #6
 8005d78:	d106      	bne.n	8005d88 <_printf_common+0x48>
 8005d7a:	f104 0a19 	add.w	sl, r4, #25
 8005d7e:	68e3      	ldr	r3, [r4, #12]
 8005d80:	6832      	ldr	r2, [r6, #0]
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	42ab      	cmp	r3, r5
 8005d86:	dc26      	bgt.n	8005dd6 <_printf_common+0x96>
 8005d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d8c:	6822      	ldr	r2, [r4, #0]
 8005d8e:	3b00      	subs	r3, #0
 8005d90:	bf18      	it	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	0692      	lsls	r2, r2, #26
 8005d96:	d42b      	bmi.n	8005df0 <_printf_common+0xb0>
 8005d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	4638      	mov	r0, r7
 8005da0:	47c8      	blx	r9
 8005da2:	3001      	adds	r0, #1
 8005da4:	d01e      	beq.n	8005de4 <_printf_common+0xa4>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	6922      	ldr	r2, [r4, #16]
 8005daa:	f003 0306 	and.w	r3, r3, #6
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	bf02      	ittt	eq
 8005db2:	68e5      	ldreq	r5, [r4, #12]
 8005db4:	6833      	ldreq	r3, [r6, #0]
 8005db6:	1aed      	subeq	r5, r5, r3
 8005db8:	68a3      	ldr	r3, [r4, #8]
 8005dba:	bf0c      	ite	eq
 8005dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dc0:	2500      	movne	r5, #0
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	bfc4      	itt	gt
 8005dc6:	1a9b      	subgt	r3, r3, r2
 8005dc8:	18ed      	addgt	r5, r5, r3
 8005dca:	2600      	movs	r6, #0
 8005dcc:	341a      	adds	r4, #26
 8005dce:	42b5      	cmp	r5, r6
 8005dd0:	d11a      	bne.n	8005e08 <_printf_common+0xc8>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e008      	b.n	8005de8 <_printf_common+0xa8>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4652      	mov	r2, sl
 8005dda:	4641      	mov	r1, r8
 8005ddc:	4638      	mov	r0, r7
 8005dde:	47c8      	blx	r9
 8005de0:	3001      	adds	r0, #1
 8005de2:	d103      	bne.n	8005dec <_printf_common+0xac>
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dec:	3501      	adds	r5, #1
 8005dee:	e7c6      	b.n	8005d7e <_printf_common+0x3e>
 8005df0:	18e1      	adds	r1, r4, r3
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	2030      	movs	r0, #48	@ 0x30
 8005df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dfa:	4422      	add	r2, r4
 8005dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e04:	3302      	adds	r3, #2
 8005e06:	e7c7      	b.n	8005d98 <_printf_common+0x58>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	4638      	mov	r0, r7
 8005e10:	47c8      	blx	r9
 8005e12:	3001      	adds	r0, #1
 8005e14:	d0e6      	beq.n	8005de4 <_printf_common+0xa4>
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7d9      	b.n	8005dce <_printf_common+0x8e>
	...

08005e1c <_printf_i>:
 8005e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	7e0f      	ldrb	r7, [r1, #24]
 8005e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e24:	2f78      	cmp	r7, #120	@ 0x78
 8005e26:	4691      	mov	r9, r2
 8005e28:	4680      	mov	r8, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	469a      	mov	sl, r3
 8005e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e32:	d807      	bhi.n	8005e44 <_printf_i+0x28>
 8005e34:	2f62      	cmp	r7, #98	@ 0x62
 8005e36:	d80a      	bhi.n	8005e4e <_printf_i+0x32>
 8005e38:	2f00      	cmp	r7, #0
 8005e3a:	f000 80d1 	beq.w	8005fe0 <_printf_i+0x1c4>
 8005e3e:	2f58      	cmp	r7, #88	@ 0x58
 8005e40:	f000 80b8 	beq.w	8005fb4 <_printf_i+0x198>
 8005e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e4c:	e03a      	b.n	8005ec4 <_printf_i+0xa8>
 8005e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e52:	2b15      	cmp	r3, #21
 8005e54:	d8f6      	bhi.n	8005e44 <_printf_i+0x28>
 8005e56:	a101      	add	r1, pc, #4	@ (adr r1, 8005e5c <_printf_i+0x40>)
 8005e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e5c:	08005eb5 	.word	0x08005eb5
 8005e60:	08005ec9 	.word	0x08005ec9
 8005e64:	08005e45 	.word	0x08005e45
 8005e68:	08005e45 	.word	0x08005e45
 8005e6c:	08005e45 	.word	0x08005e45
 8005e70:	08005e45 	.word	0x08005e45
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005e45 	.word	0x08005e45
 8005e7c:	08005e45 	.word	0x08005e45
 8005e80:	08005e45 	.word	0x08005e45
 8005e84:	08005e45 	.word	0x08005e45
 8005e88:	08005fc7 	.word	0x08005fc7
 8005e8c:	08005ef3 	.word	0x08005ef3
 8005e90:	08005f81 	.word	0x08005f81
 8005e94:	08005e45 	.word	0x08005e45
 8005e98:	08005e45 	.word	0x08005e45
 8005e9c:	08005fe9 	.word	0x08005fe9
 8005ea0:	08005e45 	.word	0x08005e45
 8005ea4:	08005ef3 	.word	0x08005ef3
 8005ea8:	08005e45 	.word	0x08005e45
 8005eac:	08005e45 	.word	0x08005e45
 8005eb0:	08005f89 	.word	0x08005f89
 8005eb4:	6833      	ldr	r3, [r6, #0]
 8005eb6:	1d1a      	adds	r2, r3, #4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6032      	str	r2, [r6, #0]
 8005ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e09c      	b.n	8006002 <_printf_i+0x1e6>
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	1d19      	adds	r1, r3, #4
 8005ece:	6031      	str	r1, [r6, #0]
 8005ed0:	0606      	lsls	r6, r0, #24
 8005ed2:	d501      	bpl.n	8005ed8 <_printf_i+0xbc>
 8005ed4:	681d      	ldr	r5, [r3, #0]
 8005ed6:	e003      	b.n	8005ee0 <_printf_i+0xc4>
 8005ed8:	0645      	lsls	r5, r0, #25
 8005eda:	d5fb      	bpl.n	8005ed4 <_printf_i+0xb8>
 8005edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ee0:	2d00      	cmp	r5, #0
 8005ee2:	da03      	bge.n	8005eec <_printf_i+0xd0>
 8005ee4:	232d      	movs	r3, #45	@ 0x2d
 8005ee6:	426d      	negs	r5, r5
 8005ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eec:	4858      	ldr	r0, [pc, #352]	@ (8006050 <_printf_i+0x234>)
 8005eee:	230a      	movs	r3, #10
 8005ef0:	e011      	b.n	8005f16 <_printf_i+0xfa>
 8005ef2:	6821      	ldr	r1, [r4, #0]
 8005ef4:	6833      	ldr	r3, [r6, #0]
 8005ef6:	0608      	lsls	r0, r1, #24
 8005ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005efc:	d402      	bmi.n	8005f04 <_printf_i+0xe8>
 8005efe:	0649      	lsls	r1, r1, #25
 8005f00:	bf48      	it	mi
 8005f02:	b2ad      	uxthmi	r5, r5
 8005f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f06:	4852      	ldr	r0, [pc, #328]	@ (8006050 <_printf_i+0x234>)
 8005f08:	6033      	str	r3, [r6, #0]
 8005f0a:	bf14      	ite	ne
 8005f0c:	230a      	movne	r3, #10
 8005f0e:	2308      	moveq	r3, #8
 8005f10:	2100      	movs	r1, #0
 8005f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f16:	6866      	ldr	r6, [r4, #4]
 8005f18:	60a6      	str	r6, [r4, #8]
 8005f1a:	2e00      	cmp	r6, #0
 8005f1c:	db05      	blt.n	8005f2a <_printf_i+0x10e>
 8005f1e:	6821      	ldr	r1, [r4, #0]
 8005f20:	432e      	orrs	r6, r5
 8005f22:	f021 0104 	bic.w	r1, r1, #4
 8005f26:	6021      	str	r1, [r4, #0]
 8005f28:	d04b      	beq.n	8005fc2 <_printf_i+0x1a6>
 8005f2a:	4616      	mov	r6, r2
 8005f2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f30:	fb03 5711 	mls	r7, r3, r1, r5
 8005f34:	5dc7      	ldrb	r7, [r0, r7]
 8005f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f3a:	462f      	mov	r7, r5
 8005f3c:	42bb      	cmp	r3, r7
 8005f3e:	460d      	mov	r5, r1
 8005f40:	d9f4      	bls.n	8005f2c <_printf_i+0x110>
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d10b      	bne.n	8005f5e <_printf_i+0x142>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	07df      	lsls	r7, r3, #31
 8005f4a:	d508      	bpl.n	8005f5e <_printf_i+0x142>
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	6861      	ldr	r1, [r4, #4]
 8005f50:	4299      	cmp	r1, r3
 8005f52:	bfde      	ittt	le
 8005f54:	2330      	movle	r3, #48	@ 0x30
 8005f56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f5e:	1b92      	subs	r2, r2, r6
 8005f60:	6122      	str	r2, [r4, #16]
 8005f62:	f8cd a000 	str.w	sl, [sp]
 8005f66:	464b      	mov	r3, r9
 8005f68:	aa03      	add	r2, sp, #12
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	f7ff fee7 	bl	8005d40 <_printf_common>
 8005f72:	3001      	adds	r0, #1
 8005f74:	d14a      	bne.n	800600c <_printf_i+0x1f0>
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7a:	b004      	add	sp, #16
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	f043 0320 	orr.w	r3, r3, #32
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	4832      	ldr	r0, [pc, #200]	@ (8006054 <_printf_i+0x238>)
 8005f8a:	2778      	movs	r7, #120	@ 0x78
 8005f8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	6831      	ldr	r1, [r6, #0]
 8005f94:	061f      	lsls	r7, r3, #24
 8005f96:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f9a:	d402      	bmi.n	8005fa2 <_printf_i+0x186>
 8005f9c:	065f      	lsls	r7, r3, #25
 8005f9e:	bf48      	it	mi
 8005fa0:	b2ad      	uxthmi	r5, r5
 8005fa2:	6031      	str	r1, [r6, #0]
 8005fa4:	07d9      	lsls	r1, r3, #31
 8005fa6:	bf44      	itt	mi
 8005fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8005fac:	6023      	strmi	r3, [r4, #0]
 8005fae:	b11d      	cbz	r5, 8005fb8 <_printf_i+0x19c>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	e7ad      	b.n	8005f10 <_printf_i+0xf4>
 8005fb4:	4826      	ldr	r0, [pc, #152]	@ (8006050 <_printf_i+0x234>)
 8005fb6:	e7e9      	b.n	8005f8c <_printf_i+0x170>
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	f023 0320 	bic.w	r3, r3, #32
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	e7f6      	b.n	8005fb0 <_printf_i+0x194>
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	e7bd      	b.n	8005f42 <_printf_i+0x126>
 8005fc6:	6833      	ldr	r3, [r6, #0]
 8005fc8:	6825      	ldr	r5, [r4, #0]
 8005fca:	6961      	ldr	r1, [r4, #20]
 8005fcc:	1d18      	adds	r0, r3, #4
 8005fce:	6030      	str	r0, [r6, #0]
 8005fd0:	062e      	lsls	r6, r5, #24
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	d501      	bpl.n	8005fda <_printf_i+0x1be>
 8005fd6:	6019      	str	r1, [r3, #0]
 8005fd8:	e002      	b.n	8005fe0 <_printf_i+0x1c4>
 8005fda:	0668      	lsls	r0, r5, #25
 8005fdc:	d5fb      	bpl.n	8005fd6 <_printf_i+0x1ba>
 8005fde:	8019      	strh	r1, [r3, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	e7bc      	b.n	8005f62 <_printf_i+0x146>
 8005fe8:	6833      	ldr	r3, [r6, #0]
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	6032      	str	r2, [r6, #0]
 8005fee:	681e      	ldr	r6, [r3, #0]
 8005ff0:	6862      	ldr	r2, [r4, #4]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7fa f8f3 	bl	80001e0 <memchr>
 8005ffa:	b108      	cbz	r0, 8006000 <_printf_i+0x1e4>
 8005ffc:	1b80      	subs	r0, r0, r6
 8005ffe:	6060      	str	r0, [r4, #4]
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	2300      	movs	r3, #0
 8006006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800600a:	e7aa      	b.n	8005f62 <_printf_i+0x146>
 800600c:	6923      	ldr	r3, [r4, #16]
 800600e:	4632      	mov	r2, r6
 8006010:	4649      	mov	r1, r9
 8006012:	4640      	mov	r0, r8
 8006014:	47d0      	blx	sl
 8006016:	3001      	adds	r0, #1
 8006018:	d0ad      	beq.n	8005f76 <_printf_i+0x15a>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	079b      	lsls	r3, r3, #30
 800601e:	d413      	bmi.n	8006048 <_printf_i+0x22c>
 8006020:	68e0      	ldr	r0, [r4, #12]
 8006022:	9b03      	ldr	r3, [sp, #12]
 8006024:	4298      	cmp	r0, r3
 8006026:	bfb8      	it	lt
 8006028:	4618      	movlt	r0, r3
 800602a:	e7a6      	b.n	8005f7a <_printf_i+0x15e>
 800602c:	2301      	movs	r3, #1
 800602e:	4632      	mov	r2, r6
 8006030:	4649      	mov	r1, r9
 8006032:	4640      	mov	r0, r8
 8006034:	47d0      	blx	sl
 8006036:	3001      	adds	r0, #1
 8006038:	d09d      	beq.n	8005f76 <_printf_i+0x15a>
 800603a:	3501      	adds	r5, #1
 800603c:	68e3      	ldr	r3, [r4, #12]
 800603e:	9903      	ldr	r1, [sp, #12]
 8006040:	1a5b      	subs	r3, r3, r1
 8006042:	42ab      	cmp	r3, r5
 8006044:	dcf2      	bgt.n	800602c <_printf_i+0x210>
 8006046:	e7eb      	b.n	8006020 <_printf_i+0x204>
 8006048:	2500      	movs	r5, #0
 800604a:	f104 0619 	add.w	r6, r4, #25
 800604e:	e7f5      	b.n	800603c <_printf_i+0x220>
 8006050:	080084f2 	.word	0x080084f2
 8006054:	08008503 	.word	0x08008503

08006058 <std>:
 8006058:	2300      	movs	r3, #0
 800605a:	b510      	push	{r4, lr}
 800605c:	4604      	mov	r4, r0
 800605e:	e9c0 3300 	strd	r3, r3, [r0]
 8006062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006066:	6083      	str	r3, [r0, #8]
 8006068:	8181      	strh	r1, [r0, #12]
 800606a:	6643      	str	r3, [r0, #100]	@ 0x64
 800606c:	81c2      	strh	r2, [r0, #14]
 800606e:	6183      	str	r3, [r0, #24]
 8006070:	4619      	mov	r1, r3
 8006072:	2208      	movs	r2, #8
 8006074:	305c      	adds	r0, #92	@ 0x5c
 8006076:	f000 f916 	bl	80062a6 <memset>
 800607a:	4b0d      	ldr	r3, [pc, #52]	@ (80060b0 <std+0x58>)
 800607c:	6263      	str	r3, [r4, #36]	@ 0x24
 800607e:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <std+0x5c>)
 8006080:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <std+0x60>)
 8006084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006086:	4b0d      	ldr	r3, [pc, #52]	@ (80060bc <std+0x64>)
 8006088:	6323      	str	r3, [r4, #48]	@ 0x30
 800608a:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <std+0x68>)
 800608c:	6224      	str	r4, [r4, #32]
 800608e:	429c      	cmp	r4, r3
 8006090:	d006      	beq.n	80060a0 <std+0x48>
 8006092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006096:	4294      	cmp	r4, r2
 8006098:	d002      	beq.n	80060a0 <std+0x48>
 800609a:	33d0      	adds	r3, #208	@ 0xd0
 800609c:	429c      	cmp	r4, r3
 800609e:	d105      	bne.n	80060ac <std+0x54>
 80060a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a8:	f000 b97a 	b.w	80063a0 <__retarget_lock_init_recursive>
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	08006221 	.word	0x08006221
 80060b4:	08006243 	.word	0x08006243
 80060b8:	0800627b 	.word	0x0800627b
 80060bc:	0800629f 	.word	0x0800629f
 80060c0:	20000370 	.word	0x20000370

080060c4 <stdio_exit_handler>:
 80060c4:	4a02      	ldr	r2, [pc, #8]	@ (80060d0 <stdio_exit_handler+0xc>)
 80060c6:	4903      	ldr	r1, [pc, #12]	@ (80060d4 <stdio_exit_handler+0x10>)
 80060c8:	4803      	ldr	r0, [pc, #12]	@ (80060d8 <stdio_exit_handler+0x14>)
 80060ca:	f000 b869 	b.w	80061a0 <_fwalk_sglue>
 80060ce:	bf00      	nop
 80060d0:	2000000c 	.word	0x2000000c
 80060d4:	08007d05 	.word	0x08007d05
 80060d8:	2000001c 	.word	0x2000001c

080060dc <cleanup_stdio>:
 80060dc:	6841      	ldr	r1, [r0, #4]
 80060de:	4b0c      	ldr	r3, [pc, #48]	@ (8006110 <cleanup_stdio+0x34>)
 80060e0:	4299      	cmp	r1, r3
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	d001      	beq.n	80060ec <cleanup_stdio+0x10>
 80060e8:	f001 fe0c 	bl	8007d04 <_fflush_r>
 80060ec:	68a1      	ldr	r1, [r4, #8]
 80060ee:	4b09      	ldr	r3, [pc, #36]	@ (8006114 <cleanup_stdio+0x38>)
 80060f0:	4299      	cmp	r1, r3
 80060f2:	d002      	beq.n	80060fa <cleanup_stdio+0x1e>
 80060f4:	4620      	mov	r0, r4
 80060f6:	f001 fe05 	bl	8007d04 <_fflush_r>
 80060fa:	68e1      	ldr	r1, [r4, #12]
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <cleanup_stdio+0x3c>)
 80060fe:	4299      	cmp	r1, r3
 8006100:	d004      	beq.n	800610c <cleanup_stdio+0x30>
 8006102:	4620      	mov	r0, r4
 8006104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006108:	f001 bdfc 	b.w	8007d04 <_fflush_r>
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	20000370 	.word	0x20000370
 8006114:	200003d8 	.word	0x200003d8
 8006118:	20000440 	.word	0x20000440

0800611c <global_stdio_init.part.0>:
 800611c:	b510      	push	{r4, lr}
 800611e:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <global_stdio_init.part.0+0x30>)
 8006120:	4c0b      	ldr	r4, [pc, #44]	@ (8006150 <global_stdio_init.part.0+0x34>)
 8006122:	4a0c      	ldr	r2, [pc, #48]	@ (8006154 <global_stdio_init.part.0+0x38>)
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	4620      	mov	r0, r4
 8006128:	2200      	movs	r2, #0
 800612a:	2104      	movs	r1, #4
 800612c:	f7ff ff94 	bl	8006058 <std>
 8006130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006134:	2201      	movs	r2, #1
 8006136:	2109      	movs	r1, #9
 8006138:	f7ff ff8e 	bl	8006058 <std>
 800613c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006140:	2202      	movs	r2, #2
 8006142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006146:	2112      	movs	r1, #18
 8006148:	f7ff bf86 	b.w	8006058 <std>
 800614c:	200004a8 	.word	0x200004a8
 8006150:	20000370 	.word	0x20000370
 8006154:	080060c5 	.word	0x080060c5

08006158 <__sfp_lock_acquire>:
 8006158:	4801      	ldr	r0, [pc, #4]	@ (8006160 <__sfp_lock_acquire+0x8>)
 800615a:	f000 b922 	b.w	80063a2 <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	200004b1 	.word	0x200004b1

08006164 <__sfp_lock_release>:
 8006164:	4801      	ldr	r0, [pc, #4]	@ (800616c <__sfp_lock_release+0x8>)
 8006166:	f000 b91d 	b.w	80063a4 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	200004b1 	.word	0x200004b1

08006170 <__sinit>:
 8006170:	b510      	push	{r4, lr}
 8006172:	4604      	mov	r4, r0
 8006174:	f7ff fff0 	bl	8006158 <__sfp_lock_acquire>
 8006178:	6a23      	ldr	r3, [r4, #32]
 800617a:	b11b      	cbz	r3, 8006184 <__sinit+0x14>
 800617c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006180:	f7ff bff0 	b.w	8006164 <__sfp_lock_release>
 8006184:	4b04      	ldr	r3, [pc, #16]	@ (8006198 <__sinit+0x28>)
 8006186:	6223      	str	r3, [r4, #32]
 8006188:	4b04      	ldr	r3, [pc, #16]	@ (800619c <__sinit+0x2c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f5      	bne.n	800617c <__sinit+0xc>
 8006190:	f7ff ffc4 	bl	800611c <global_stdio_init.part.0>
 8006194:	e7f2      	b.n	800617c <__sinit+0xc>
 8006196:	bf00      	nop
 8006198:	080060dd 	.word	0x080060dd
 800619c:	200004a8 	.word	0x200004a8

080061a0 <_fwalk_sglue>:
 80061a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a4:	4607      	mov	r7, r0
 80061a6:	4688      	mov	r8, r1
 80061a8:	4614      	mov	r4, r2
 80061aa:	2600      	movs	r6, #0
 80061ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061b0:	f1b9 0901 	subs.w	r9, r9, #1
 80061b4:	d505      	bpl.n	80061c2 <_fwalk_sglue+0x22>
 80061b6:	6824      	ldr	r4, [r4, #0]
 80061b8:	2c00      	cmp	r4, #0
 80061ba:	d1f7      	bne.n	80061ac <_fwalk_sglue+0xc>
 80061bc:	4630      	mov	r0, r6
 80061be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d907      	bls.n	80061d8 <_fwalk_sglue+0x38>
 80061c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061cc:	3301      	adds	r3, #1
 80061ce:	d003      	beq.n	80061d8 <_fwalk_sglue+0x38>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c0      	blx	r8
 80061d6:	4306      	orrs	r6, r0
 80061d8:	3568      	adds	r5, #104	@ 0x68
 80061da:	e7e9      	b.n	80061b0 <_fwalk_sglue+0x10>

080061dc <siprintf>:
 80061dc:	b40e      	push	{r1, r2, r3}
 80061de:	b510      	push	{r4, lr}
 80061e0:	b09d      	sub	sp, #116	@ 0x74
 80061e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061e4:	9002      	str	r0, [sp, #8]
 80061e6:	9006      	str	r0, [sp, #24]
 80061e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061ec:	480a      	ldr	r0, [pc, #40]	@ (8006218 <siprintf+0x3c>)
 80061ee:	9107      	str	r1, [sp, #28]
 80061f0:	9104      	str	r1, [sp, #16]
 80061f2:	490a      	ldr	r1, [pc, #40]	@ (800621c <siprintf+0x40>)
 80061f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f8:	9105      	str	r1, [sp, #20]
 80061fa:	2400      	movs	r4, #0
 80061fc:	a902      	add	r1, sp, #8
 80061fe:	6800      	ldr	r0, [r0, #0]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006204:	f001 fbfe 	bl	8007a04 <_svfiprintf_r>
 8006208:	9b02      	ldr	r3, [sp, #8]
 800620a:	701c      	strb	r4, [r3, #0]
 800620c:	b01d      	add	sp, #116	@ 0x74
 800620e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006212:	b003      	add	sp, #12
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000018 	.word	0x20000018
 800621c:	ffff0208 	.word	0xffff0208

08006220 <__sread>:
 8006220:	b510      	push	{r4, lr}
 8006222:	460c      	mov	r4, r1
 8006224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006228:	f000 f86c 	bl	8006304 <_read_r>
 800622c:	2800      	cmp	r0, #0
 800622e:	bfab      	itete	ge
 8006230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006232:	89a3      	ldrhlt	r3, [r4, #12]
 8006234:	181b      	addge	r3, r3, r0
 8006236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800623a:	bfac      	ite	ge
 800623c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800623e:	81a3      	strhlt	r3, [r4, #12]
 8006240:	bd10      	pop	{r4, pc}

08006242 <__swrite>:
 8006242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006246:	461f      	mov	r7, r3
 8006248:	898b      	ldrh	r3, [r1, #12]
 800624a:	05db      	lsls	r3, r3, #23
 800624c:	4605      	mov	r5, r0
 800624e:	460c      	mov	r4, r1
 8006250:	4616      	mov	r6, r2
 8006252:	d505      	bpl.n	8006260 <__swrite+0x1e>
 8006254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006258:	2302      	movs	r3, #2
 800625a:	2200      	movs	r2, #0
 800625c:	f000 f840 	bl	80062e0 <_lseek_r>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	4632      	mov	r2, r6
 800626e:	463b      	mov	r3, r7
 8006270:	4628      	mov	r0, r5
 8006272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006276:	f000 b857 	b.w	8006328 <_write_r>

0800627a <__sseek>:
 800627a:	b510      	push	{r4, lr}
 800627c:	460c      	mov	r4, r1
 800627e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006282:	f000 f82d 	bl	80062e0 <_lseek_r>
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	bf15      	itete	ne
 800628c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800628e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006296:	81a3      	strheq	r3, [r4, #12]
 8006298:	bf18      	it	ne
 800629a:	81a3      	strhne	r3, [r4, #12]
 800629c:	bd10      	pop	{r4, pc}

0800629e <__sclose>:
 800629e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a2:	f000 b80d 	b.w	80062c0 <_close_r>

080062a6 <memset>:
 80062a6:	4402      	add	r2, r0
 80062a8:	4603      	mov	r3, r0
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d100      	bne.n	80062b0 <memset+0xa>
 80062ae:	4770      	bx	lr
 80062b0:	f803 1b01 	strb.w	r1, [r3], #1
 80062b4:	e7f9      	b.n	80062aa <memset+0x4>
	...

080062b8 <_localeconv_r>:
 80062b8:	4800      	ldr	r0, [pc, #0]	@ (80062bc <_localeconv_r+0x4>)
 80062ba:	4770      	bx	lr
 80062bc:	20000158 	.word	0x20000158

080062c0 <_close_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4d06      	ldr	r5, [pc, #24]	@ (80062dc <_close_r+0x1c>)
 80062c4:	2300      	movs	r3, #0
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	f7fc f830 	bl	8002330 <_close>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_close_r+0x1a>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_close_r+0x1a>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	200004ac 	.word	0x200004ac

080062e0 <_lseek_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d07      	ldr	r5, [pc, #28]	@ (8006300 <_lseek_r+0x20>)
 80062e4:	4604      	mov	r4, r0
 80062e6:	4608      	mov	r0, r1
 80062e8:	4611      	mov	r1, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fc f845 	bl	800237e <_lseek>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_lseek_r+0x1e>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_lseek_r+0x1e>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	200004ac 	.word	0x200004ac

08006304 <_read_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d07      	ldr	r5, [pc, #28]	@ (8006324 <_read_r+0x20>)
 8006308:	4604      	mov	r4, r0
 800630a:	4608      	mov	r0, r1
 800630c:	4611      	mov	r1, r2
 800630e:	2200      	movs	r2, #0
 8006310:	602a      	str	r2, [r5, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	f7fb ffd3 	bl	80022be <_read>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d102      	bne.n	8006322 <_read_r+0x1e>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	b103      	cbz	r3, 8006322 <_read_r+0x1e>
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	200004ac 	.word	0x200004ac

08006328 <_write_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4d07      	ldr	r5, [pc, #28]	@ (8006348 <_write_r+0x20>)
 800632c:	4604      	mov	r4, r0
 800632e:	4608      	mov	r0, r1
 8006330:	4611      	mov	r1, r2
 8006332:	2200      	movs	r2, #0
 8006334:	602a      	str	r2, [r5, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	f7fb ffde 	bl	80022f8 <_write>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_write_r+0x1e>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	b103      	cbz	r3, 8006346 <_write_r+0x1e>
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	200004ac 	.word	0x200004ac

0800634c <__errno>:
 800634c:	4b01      	ldr	r3, [pc, #4]	@ (8006354 <__errno+0x8>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20000018 	.word	0x20000018

08006358 <__libc_init_array>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4d0d      	ldr	r5, [pc, #52]	@ (8006390 <__libc_init_array+0x38>)
 800635c:	4c0d      	ldr	r4, [pc, #52]	@ (8006394 <__libc_init_array+0x3c>)
 800635e:	1b64      	subs	r4, r4, r5
 8006360:	10a4      	asrs	r4, r4, #2
 8006362:	2600      	movs	r6, #0
 8006364:	42a6      	cmp	r6, r4
 8006366:	d109      	bne.n	800637c <__libc_init_array+0x24>
 8006368:	4d0b      	ldr	r5, [pc, #44]	@ (8006398 <__libc_init_array+0x40>)
 800636a:	4c0c      	ldr	r4, [pc, #48]	@ (800639c <__libc_init_array+0x44>)
 800636c:	f002 f868 	bl	8008440 <_init>
 8006370:	1b64      	subs	r4, r4, r5
 8006372:	10a4      	asrs	r4, r4, #2
 8006374:	2600      	movs	r6, #0
 8006376:	42a6      	cmp	r6, r4
 8006378:	d105      	bne.n	8006386 <__libc_init_array+0x2e>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006380:	4798      	blx	r3
 8006382:	3601      	adds	r6, #1
 8006384:	e7ee      	b.n	8006364 <__libc_init_array+0xc>
 8006386:	f855 3b04 	ldr.w	r3, [r5], #4
 800638a:	4798      	blx	r3
 800638c:	3601      	adds	r6, #1
 800638e:	e7f2      	b.n	8006376 <__libc_init_array+0x1e>
 8006390:	0800885c 	.word	0x0800885c
 8006394:	0800885c 	.word	0x0800885c
 8006398:	0800885c 	.word	0x0800885c
 800639c:	08008860 	.word	0x08008860

080063a0 <__retarget_lock_init_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <__retarget_lock_acquire_recursive>:
 80063a2:	4770      	bx	lr

080063a4 <__retarget_lock_release_recursive>:
 80063a4:	4770      	bx	lr

080063a6 <quorem>:
 80063a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	6903      	ldr	r3, [r0, #16]
 80063ac:	690c      	ldr	r4, [r1, #16]
 80063ae:	42a3      	cmp	r3, r4
 80063b0:	4607      	mov	r7, r0
 80063b2:	db7e      	blt.n	80064b2 <quorem+0x10c>
 80063b4:	3c01      	subs	r4, #1
 80063b6:	f101 0814 	add.w	r8, r1, #20
 80063ba:	00a3      	lsls	r3, r4, #2
 80063bc:	f100 0514 	add.w	r5, r0, #20
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063d0:	3301      	adds	r3, #1
 80063d2:	429a      	cmp	r2, r3
 80063d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80063dc:	d32e      	bcc.n	800643c <quorem+0x96>
 80063de:	f04f 0a00 	mov.w	sl, #0
 80063e2:	46c4      	mov	ip, r8
 80063e4:	46ae      	mov	lr, r5
 80063e6:	46d3      	mov	fp, sl
 80063e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063ec:	b298      	uxth	r0, r3
 80063ee:	fb06 a000 	mla	r0, r6, r0, sl
 80063f2:	0c02      	lsrs	r2, r0, #16
 80063f4:	0c1b      	lsrs	r3, r3, #16
 80063f6:	fb06 2303 	mla	r3, r6, r3, r2
 80063fa:	f8de 2000 	ldr.w	r2, [lr]
 80063fe:	b280      	uxth	r0, r0
 8006400:	b292      	uxth	r2, r2
 8006402:	1a12      	subs	r2, r2, r0
 8006404:	445a      	add	r2, fp
 8006406:	f8de 0000 	ldr.w	r0, [lr]
 800640a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800640e:	b29b      	uxth	r3, r3
 8006410:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006414:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006418:	b292      	uxth	r2, r2
 800641a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800641e:	45e1      	cmp	r9, ip
 8006420:	f84e 2b04 	str.w	r2, [lr], #4
 8006424:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006428:	d2de      	bcs.n	80063e8 <quorem+0x42>
 800642a:	9b00      	ldr	r3, [sp, #0]
 800642c:	58eb      	ldr	r3, [r5, r3]
 800642e:	b92b      	cbnz	r3, 800643c <quorem+0x96>
 8006430:	9b01      	ldr	r3, [sp, #4]
 8006432:	3b04      	subs	r3, #4
 8006434:	429d      	cmp	r5, r3
 8006436:	461a      	mov	r2, r3
 8006438:	d32f      	bcc.n	800649a <quorem+0xf4>
 800643a:	613c      	str	r4, [r7, #16]
 800643c:	4638      	mov	r0, r7
 800643e:	f001 f97d 	bl	800773c <__mcmp>
 8006442:	2800      	cmp	r0, #0
 8006444:	db25      	blt.n	8006492 <quorem+0xec>
 8006446:	4629      	mov	r1, r5
 8006448:	2000      	movs	r0, #0
 800644a:	f858 2b04 	ldr.w	r2, [r8], #4
 800644e:	f8d1 c000 	ldr.w	ip, [r1]
 8006452:	fa1f fe82 	uxth.w	lr, r2
 8006456:	fa1f f38c 	uxth.w	r3, ip
 800645a:	eba3 030e 	sub.w	r3, r3, lr
 800645e:	4403      	add	r3, r0
 8006460:	0c12      	lsrs	r2, r2, #16
 8006462:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006466:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800646a:	b29b      	uxth	r3, r3
 800646c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006470:	45c1      	cmp	r9, r8
 8006472:	f841 3b04 	str.w	r3, [r1], #4
 8006476:	ea4f 4022 	mov.w	r0, r2, asr #16
 800647a:	d2e6      	bcs.n	800644a <quorem+0xa4>
 800647c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006484:	b922      	cbnz	r2, 8006490 <quorem+0xea>
 8006486:	3b04      	subs	r3, #4
 8006488:	429d      	cmp	r5, r3
 800648a:	461a      	mov	r2, r3
 800648c:	d30b      	bcc.n	80064a6 <quorem+0x100>
 800648e:	613c      	str	r4, [r7, #16]
 8006490:	3601      	adds	r6, #1
 8006492:	4630      	mov	r0, r6
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	3b04      	subs	r3, #4
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d1cb      	bne.n	800643a <quorem+0x94>
 80064a2:	3c01      	subs	r4, #1
 80064a4:	e7c6      	b.n	8006434 <quorem+0x8e>
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	3b04      	subs	r3, #4
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	d1ef      	bne.n	800648e <quorem+0xe8>
 80064ae:	3c01      	subs	r4, #1
 80064b0:	e7ea      	b.n	8006488 <quorem+0xe2>
 80064b2:	2000      	movs	r0, #0
 80064b4:	e7ee      	b.n	8006494 <quorem+0xee>
	...

080064b8 <_dtoa_r>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	69c7      	ldr	r7, [r0, #28]
 80064be:	b097      	sub	sp, #92	@ 0x5c
 80064c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80064c4:	ec55 4b10 	vmov	r4, r5, d0
 80064c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80064ca:	9107      	str	r1, [sp, #28]
 80064cc:	4681      	mov	r9, r0
 80064ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80064d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80064d2:	b97f      	cbnz	r7, 80064f4 <_dtoa_r+0x3c>
 80064d4:	2010      	movs	r0, #16
 80064d6:	f000 fe09 	bl	80070ec <malloc>
 80064da:	4602      	mov	r2, r0
 80064dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80064e0:	b920      	cbnz	r0, 80064ec <_dtoa_r+0x34>
 80064e2:	4ba9      	ldr	r3, [pc, #676]	@ (8006788 <_dtoa_r+0x2d0>)
 80064e4:	21ef      	movs	r1, #239	@ 0xef
 80064e6:	48a9      	ldr	r0, [pc, #676]	@ (800678c <_dtoa_r+0x2d4>)
 80064e8:	f001 fc6c 	bl	8007dc4 <__assert_func>
 80064ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064f0:	6007      	str	r7, [r0, #0]
 80064f2:	60c7      	str	r7, [r0, #12]
 80064f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064f8:	6819      	ldr	r1, [r3, #0]
 80064fa:	b159      	cbz	r1, 8006514 <_dtoa_r+0x5c>
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	604a      	str	r2, [r1, #4]
 8006500:	2301      	movs	r3, #1
 8006502:	4093      	lsls	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
 8006506:	4648      	mov	r0, r9
 8006508:	f000 fee6 	bl	80072d8 <_Bfree>
 800650c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	1e2b      	subs	r3, r5, #0
 8006516:	bfb9      	ittee	lt
 8006518:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800651c:	9305      	strlt	r3, [sp, #20]
 800651e:	2300      	movge	r3, #0
 8006520:	6033      	strge	r3, [r6, #0]
 8006522:	9f05      	ldr	r7, [sp, #20]
 8006524:	4b9a      	ldr	r3, [pc, #616]	@ (8006790 <_dtoa_r+0x2d8>)
 8006526:	bfbc      	itt	lt
 8006528:	2201      	movlt	r2, #1
 800652a:	6032      	strlt	r2, [r6, #0]
 800652c:	43bb      	bics	r3, r7
 800652e:	d112      	bne.n	8006556 <_dtoa_r+0x9e>
 8006530:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006532:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800653c:	4323      	orrs	r3, r4
 800653e:	f000 855a 	beq.w	8006ff6 <_dtoa_r+0xb3e>
 8006542:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006544:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80067a4 <_dtoa_r+0x2ec>
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 855c 	beq.w	8007006 <_dtoa_r+0xb4e>
 800654e:	f10a 0303 	add.w	r3, sl, #3
 8006552:	f000 bd56 	b.w	8007002 <_dtoa_r+0xb4a>
 8006556:	ed9d 7b04 	vldr	d7, [sp, #16]
 800655a:	2200      	movs	r2, #0
 800655c:	ec51 0b17 	vmov	r0, r1, d7
 8006560:	2300      	movs	r3, #0
 8006562:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006566:	f7fa fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800656a:	4680      	mov	r8, r0
 800656c:	b158      	cbz	r0, 8006586 <_dtoa_r+0xce>
 800656e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006570:	2301      	movs	r3, #1
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006576:	b113      	cbz	r3, 800657e <_dtoa_r+0xc6>
 8006578:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800657a:	4b86      	ldr	r3, [pc, #536]	@ (8006794 <_dtoa_r+0x2dc>)
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80067a8 <_dtoa_r+0x2f0>
 8006582:	f000 bd40 	b.w	8007006 <_dtoa_r+0xb4e>
 8006586:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800658a:	aa14      	add	r2, sp, #80	@ 0x50
 800658c:	a915      	add	r1, sp, #84	@ 0x54
 800658e:	4648      	mov	r0, r9
 8006590:	f001 f984 	bl	800789c <__d2b>
 8006594:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006598:	9002      	str	r0, [sp, #8]
 800659a:	2e00      	cmp	r6, #0
 800659c:	d078      	beq.n	8006690 <_dtoa_r+0x1d8>
 800659e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80065a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065b8:	4619      	mov	r1, r3
 80065ba:	2200      	movs	r2, #0
 80065bc:	4b76      	ldr	r3, [pc, #472]	@ (8006798 <_dtoa_r+0x2e0>)
 80065be:	f7f9 fe6b 	bl	8000298 <__aeabi_dsub>
 80065c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006770 <_dtoa_r+0x2b8>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7fa f81e 	bl	8000608 <__aeabi_dmul>
 80065cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006778 <_dtoa_r+0x2c0>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7f9 fe63 	bl	800029c <__adddf3>
 80065d6:	4604      	mov	r4, r0
 80065d8:	4630      	mov	r0, r6
 80065da:	460d      	mov	r5, r1
 80065dc:	f7f9 ffaa 	bl	8000534 <__aeabi_i2d>
 80065e0:	a367      	add	r3, pc, #412	@ (adr r3, 8006780 <_dtoa_r+0x2c8>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f7fa f80f 	bl	8000608 <__aeabi_dmul>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4620      	mov	r0, r4
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7f9 fe53 	bl	800029c <__adddf3>
 80065f6:	4604      	mov	r4, r0
 80065f8:	460d      	mov	r5, r1
 80065fa:	f7fa fab5 	bl	8000b68 <__aeabi_d2iz>
 80065fe:	2200      	movs	r2, #0
 8006600:	4607      	mov	r7, r0
 8006602:	2300      	movs	r3, #0
 8006604:	4620      	mov	r0, r4
 8006606:	4629      	mov	r1, r5
 8006608:	f7fa fa70 	bl	8000aec <__aeabi_dcmplt>
 800660c:	b140      	cbz	r0, 8006620 <_dtoa_r+0x168>
 800660e:	4638      	mov	r0, r7
 8006610:	f7f9 ff90 	bl	8000534 <__aeabi_i2d>
 8006614:	4622      	mov	r2, r4
 8006616:	462b      	mov	r3, r5
 8006618:	f7fa fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800661c:	b900      	cbnz	r0, 8006620 <_dtoa_r+0x168>
 800661e:	3f01      	subs	r7, #1
 8006620:	2f16      	cmp	r7, #22
 8006622:	d852      	bhi.n	80066ca <_dtoa_r+0x212>
 8006624:	4b5d      	ldr	r3, [pc, #372]	@ (800679c <_dtoa_r+0x2e4>)
 8006626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006632:	f7fa fa5b 	bl	8000aec <__aeabi_dcmplt>
 8006636:	2800      	cmp	r0, #0
 8006638:	d049      	beq.n	80066ce <_dtoa_r+0x216>
 800663a:	3f01      	subs	r7, #1
 800663c:	2300      	movs	r3, #0
 800663e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006640:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006642:	1b9b      	subs	r3, r3, r6
 8006644:	1e5a      	subs	r2, r3, #1
 8006646:	bf45      	ittet	mi
 8006648:	f1c3 0301 	rsbmi	r3, r3, #1
 800664c:	9300      	strmi	r3, [sp, #0]
 800664e:	2300      	movpl	r3, #0
 8006650:	2300      	movmi	r3, #0
 8006652:	9206      	str	r2, [sp, #24]
 8006654:	bf54      	ite	pl
 8006656:	9300      	strpl	r3, [sp, #0]
 8006658:	9306      	strmi	r3, [sp, #24]
 800665a:	2f00      	cmp	r7, #0
 800665c:	db39      	blt.n	80066d2 <_dtoa_r+0x21a>
 800665e:	9b06      	ldr	r3, [sp, #24]
 8006660:	970d      	str	r7, [sp, #52]	@ 0x34
 8006662:	443b      	add	r3, r7
 8006664:	9306      	str	r3, [sp, #24]
 8006666:	2300      	movs	r3, #0
 8006668:	9308      	str	r3, [sp, #32]
 800666a:	9b07      	ldr	r3, [sp, #28]
 800666c:	2b09      	cmp	r3, #9
 800666e:	d863      	bhi.n	8006738 <_dtoa_r+0x280>
 8006670:	2b05      	cmp	r3, #5
 8006672:	bfc4      	itt	gt
 8006674:	3b04      	subgt	r3, #4
 8006676:	9307      	strgt	r3, [sp, #28]
 8006678:	9b07      	ldr	r3, [sp, #28]
 800667a:	f1a3 0302 	sub.w	r3, r3, #2
 800667e:	bfcc      	ite	gt
 8006680:	2400      	movgt	r4, #0
 8006682:	2401      	movle	r4, #1
 8006684:	2b03      	cmp	r3, #3
 8006686:	d863      	bhi.n	8006750 <_dtoa_r+0x298>
 8006688:	e8df f003 	tbb	[pc, r3]
 800668c:	2b375452 	.word	0x2b375452
 8006690:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006694:	441e      	add	r6, r3
 8006696:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800669a:	2b20      	cmp	r3, #32
 800669c:	bfc1      	itttt	gt
 800669e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066a2:	409f      	lslgt	r7, r3
 80066a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066ac:	bfd6      	itet	le
 80066ae:	f1c3 0320 	rsble	r3, r3, #32
 80066b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80066b6:	fa04 f003 	lslle.w	r0, r4, r3
 80066ba:	f7f9 ff2b 	bl	8000514 <__aeabi_ui2d>
 80066be:	2201      	movs	r2, #1
 80066c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066c4:	3e01      	subs	r6, #1
 80066c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80066c8:	e776      	b.n	80065b8 <_dtoa_r+0x100>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7b7      	b.n	800663e <_dtoa_r+0x186>
 80066ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80066d0:	e7b6      	b.n	8006640 <_dtoa_r+0x188>
 80066d2:	9b00      	ldr	r3, [sp, #0]
 80066d4:	1bdb      	subs	r3, r3, r7
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	427b      	negs	r3, r7
 80066da:	9308      	str	r3, [sp, #32]
 80066dc:	2300      	movs	r3, #0
 80066de:	930d      	str	r3, [sp, #52]	@ 0x34
 80066e0:	e7c3      	b.n	800666a <_dtoa_r+0x1b2>
 80066e2:	2301      	movs	r3, #1
 80066e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066e8:	eb07 0b03 	add.w	fp, r7, r3
 80066ec:	f10b 0301 	add.w	r3, fp, #1
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	9303      	str	r3, [sp, #12]
 80066f4:	bfb8      	it	lt
 80066f6:	2301      	movlt	r3, #1
 80066f8:	e006      	b.n	8006708 <_dtoa_r+0x250>
 80066fa:	2301      	movs	r3, #1
 80066fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006700:	2b00      	cmp	r3, #0
 8006702:	dd28      	ble.n	8006756 <_dtoa_r+0x29e>
 8006704:	469b      	mov	fp, r3
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800670c:	2100      	movs	r1, #0
 800670e:	2204      	movs	r2, #4
 8006710:	f102 0514 	add.w	r5, r2, #20
 8006714:	429d      	cmp	r5, r3
 8006716:	d926      	bls.n	8006766 <_dtoa_r+0x2ae>
 8006718:	6041      	str	r1, [r0, #4]
 800671a:	4648      	mov	r0, r9
 800671c:	f000 fd9c 	bl	8007258 <_Balloc>
 8006720:	4682      	mov	sl, r0
 8006722:	2800      	cmp	r0, #0
 8006724:	d142      	bne.n	80067ac <_dtoa_r+0x2f4>
 8006726:	4b1e      	ldr	r3, [pc, #120]	@ (80067a0 <_dtoa_r+0x2e8>)
 8006728:	4602      	mov	r2, r0
 800672a:	f240 11af 	movw	r1, #431	@ 0x1af
 800672e:	e6da      	b.n	80064e6 <_dtoa_r+0x2e>
 8006730:	2300      	movs	r3, #0
 8006732:	e7e3      	b.n	80066fc <_dtoa_r+0x244>
 8006734:	2300      	movs	r3, #0
 8006736:	e7d5      	b.n	80066e4 <_dtoa_r+0x22c>
 8006738:	2401      	movs	r4, #1
 800673a:	2300      	movs	r3, #0
 800673c:	9307      	str	r3, [sp, #28]
 800673e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006740:	f04f 3bff 	mov.w	fp, #4294967295
 8006744:	2200      	movs	r2, #0
 8006746:	f8cd b00c 	str.w	fp, [sp, #12]
 800674a:	2312      	movs	r3, #18
 800674c:	920c      	str	r2, [sp, #48]	@ 0x30
 800674e:	e7db      	b.n	8006708 <_dtoa_r+0x250>
 8006750:	2301      	movs	r3, #1
 8006752:	9309      	str	r3, [sp, #36]	@ 0x24
 8006754:	e7f4      	b.n	8006740 <_dtoa_r+0x288>
 8006756:	f04f 0b01 	mov.w	fp, #1
 800675a:	f8cd b00c 	str.w	fp, [sp, #12]
 800675e:	465b      	mov	r3, fp
 8006760:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006764:	e7d0      	b.n	8006708 <_dtoa_r+0x250>
 8006766:	3101      	adds	r1, #1
 8006768:	0052      	lsls	r2, r2, #1
 800676a:	e7d1      	b.n	8006710 <_dtoa_r+0x258>
 800676c:	f3af 8000 	nop.w
 8006770:	636f4361 	.word	0x636f4361
 8006774:	3fd287a7 	.word	0x3fd287a7
 8006778:	8b60c8b3 	.word	0x8b60c8b3
 800677c:	3fc68a28 	.word	0x3fc68a28
 8006780:	509f79fb 	.word	0x509f79fb
 8006784:	3fd34413 	.word	0x3fd34413
 8006788:	08008521 	.word	0x08008521
 800678c:	08008538 	.word	0x08008538
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	080084f1 	.word	0x080084f1
 8006798:	3ff80000 	.word	0x3ff80000
 800679c:	08008688 	.word	0x08008688
 80067a0:	08008590 	.word	0x08008590
 80067a4:	0800851d 	.word	0x0800851d
 80067a8:	080084f0 	.word	0x080084f0
 80067ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067b0:	6018      	str	r0, [r3, #0]
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	2b0e      	cmp	r3, #14
 80067b6:	f200 80a1 	bhi.w	80068fc <_dtoa_r+0x444>
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	f000 809e 	beq.w	80068fc <_dtoa_r+0x444>
 80067c0:	2f00      	cmp	r7, #0
 80067c2:	dd33      	ble.n	800682c <_dtoa_r+0x374>
 80067c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006a38 <_dtoa_r+0x580>)
 80067c6:	f007 020f 	and.w	r2, r7, #15
 80067ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ce:	ed93 7b00 	vldr	d7, [r3]
 80067d2:	05f8      	lsls	r0, r7, #23
 80067d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80067d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067dc:	d516      	bpl.n	800680c <_dtoa_r+0x354>
 80067de:	4b97      	ldr	r3, [pc, #604]	@ (8006a3c <_dtoa_r+0x584>)
 80067e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067e8:	f7fa f838 	bl	800085c <__aeabi_ddiv>
 80067ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f0:	f004 040f 	and.w	r4, r4, #15
 80067f4:	2603      	movs	r6, #3
 80067f6:	4d91      	ldr	r5, [pc, #580]	@ (8006a3c <_dtoa_r+0x584>)
 80067f8:	b954      	cbnz	r4, 8006810 <_dtoa_r+0x358>
 80067fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80067fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006802:	f7fa f82b 	bl	800085c <__aeabi_ddiv>
 8006806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800680a:	e028      	b.n	800685e <_dtoa_r+0x3a6>
 800680c:	2602      	movs	r6, #2
 800680e:	e7f2      	b.n	80067f6 <_dtoa_r+0x33e>
 8006810:	07e1      	lsls	r1, r4, #31
 8006812:	d508      	bpl.n	8006826 <_dtoa_r+0x36e>
 8006814:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800681c:	f7f9 fef4 	bl	8000608 <__aeabi_dmul>
 8006820:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006824:	3601      	adds	r6, #1
 8006826:	1064      	asrs	r4, r4, #1
 8006828:	3508      	adds	r5, #8
 800682a:	e7e5      	b.n	80067f8 <_dtoa_r+0x340>
 800682c:	f000 80af 	beq.w	800698e <_dtoa_r+0x4d6>
 8006830:	427c      	negs	r4, r7
 8006832:	4b81      	ldr	r3, [pc, #516]	@ (8006a38 <_dtoa_r+0x580>)
 8006834:	4d81      	ldr	r5, [pc, #516]	@ (8006a3c <_dtoa_r+0x584>)
 8006836:	f004 020f 	and.w	r2, r4, #15
 800683a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006846:	f7f9 fedf 	bl	8000608 <__aeabi_dmul>
 800684a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800684e:	1124      	asrs	r4, r4, #4
 8006850:	2300      	movs	r3, #0
 8006852:	2602      	movs	r6, #2
 8006854:	2c00      	cmp	r4, #0
 8006856:	f040 808f 	bne.w	8006978 <_dtoa_r+0x4c0>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1d3      	bne.n	8006806 <_dtoa_r+0x34e>
 800685e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006860:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8094 	beq.w	8006992 <_dtoa_r+0x4da>
 800686a:	4b75      	ldr	r3, [pc, #468]	@ (8006a40 <_dtoa_r+0x588>)
 800686c:	2200      	movs	r2, #0
 800686e:	4620      	mov	r0, r4
 8006870:	4629      	mov	r1, r5
 8006872:	f7fa f93b 	bl	8000aec <__aeabi_dcmplt>
 8006876:	2800      	cmp	r0, #0
 8006878:	f000 808b 	beq.w	8006992 <_dtoa_r+0x4da>
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8087 	beq.w	8006992 <_dtoa_r+0x4da>
 8006884:	f1bb 0f00 	cmp.w	fp, #0
 8006888:	dd34      	ble.n	80068f4 <_dtoa_r+0x43c>
 800688a:	4620      	mov	r0, r4
 800688c:	4b6d      	ldr	r3, [pc, #436]	@ (8006a44 <_dtoa_r+0x58c>)
 800688e:	2200      	movs	r2, #0
 8006890:	4629      	mov	r1, r5
 8006892:	f7f9 feb9 	bl	8000608 <__aeabi_dmul>
 8006896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800689a:	f107 38ff 	add.w	r8, r7, #4294967295
 800689e:	3601      	adds	r6, #1
 80068a0:	465c      	mov	r4, fp
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7f9 fe46 	bl	8000534 <__aeabi_i2d>
 80068a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ac:	f7f9 feac 	bl	8000608 <__aeabi_dmul>
 80068b0:	4b65      	ldr	r3, [pc, #404]	@ (8006a48 <_dtoa_r+0x590>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	f7f9 fcf2 	bl	800029c <__adddf3>
 80068b8:	4605      	mov	r5, r0
 80068ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068be:	2c00      	cmp	r4, #0
 80068c0:	d16a      	bne.n	8006998 <_dtoa_r+0x4e0>
 80068c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c6:	4b61      	ldr	r3, [pc, #388]	@ (8006a4c <_dtoa_r+0x594>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	f7f9 fce5 	bl	8000298 <__aeabi_dsub>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068d6:	462a      	mov	r2, r5
 80068d8:	4633      	mov	r3, r6
 80068da:	f7fa f925 	bl	8000b28 <__aeabi_dcmpgt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f040 8298 	bne.w	8006e14 <_dtoa_r+0x95c>
 80068e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068e8:	462a      	mov	r2, r5
 80068ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068ee:	f7fa f8fd 	bl	8000aec <__aeabi_dcmplt>
 80068f2:	bb38      	cbnz	r0, 8006944 <_dtoa_r+0x48c>
 80068f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80068f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f2c0 8157 	blt.w	8006bb2 <_dtoa_r+0x6fa>
 8006904:	2f0e      	cmp	r7, #14
 8006906:	f300 8154 	bgt.w	8006bb2 <_dtoa_r+0x6fa>
 800690a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a38 <_dtoa_r+0x580>)
 800690c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006910:	ed93 7b00 	vldr	d7, [r3]
 8006914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006916:	2b00      	cmp	r3, #0
 8006918:	ed8d 7b00 	vstr	d7, [sp]
 800691c:	f280 80e5 	bge.w	8006aea <_dtoa_r+0x632>
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f300 80e1 	bgt.w	8006aea <_dtoa_r+0x632>
 8006928:	d10c      	bne.n	8006944 <_dtoa_r+0x48c>
 800692a:	4b48      	ldr	r3, [pc, #288]	@ (8006a4c <_dtoa_r+0x594>)
 800692c:	2200      	movs	r2, #0
 800692e:	ec51 0b17 	vmov	r0, r1, d7
 8006932:	f7f9 fe69 	bl	8000608 <__aeabi_dmul>
 8006936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800693a:	f7fa f8eb 	bl	8000b14 <__aeabi_dcmpge>
 800693e:	2800      	cmp	r0, #0
 8006940:	f000 8266 	beq.w	8006e10 <_dtoa_r+0x958>
 8006944:	2400      	movs	r4, #0
 8006946:	4625      	mov	r5, r4
 8006948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800694a:	4656      	mov	r6, sl
 800694c:	ea6f 0803 	mvn.w	r8, r3
 8006950:	2700      	movs	r7, #0
 8006952:	4621      	mov	r1, r4
 8006954:	4648      	mov	r0, r9
 8006956:	f000 fcbf 	bl	80072d8 <_Bfree>
 800695a:	2d00      	cmp	r5, #0
 800695c:	f000 80bd 	beq.w	8006ada <_dtoa_r+0x622>
 8006960:	b12f      	cbz	r7, 800696e <_dtoa_r+0x4b6>
 8006962:	42af      	cmp	r7, r5
 8006964:	d003      	beq.n	800696e <_dtoa_r+0x4b6>
 8006966:	4639      	mov	r1, r7
 8006968:	4648      	mov	r0, r9
 800696a:	f000 fcb5 	bl	80072d8 <_Bfree>
 800696e:	4629      	mov	r1, r5
 8006970:	4648      	mov	r0, r9
 8006972:	f000 fcb1 	bl	80072d8 <_Bfree>
 8006976:	e0b0      	b.n	8006ada <_dtoa_r+0x622>
 8006978:	07e2      	lsls	r2, r4, #31
 800697a:	d505      	bpl.n	8006988 <_dtoa_r+0x4d0>
 800697c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006980:	f7f9 fe42 	bl	8000608 <__aeabi_dmul>
 8006984:	3601      	adds	r6, #1
 8006986:	2301      	movs	r3, #1
 8006988:	1064      	asrs	r4, r4, #1
 800698a:	3508      	adds	r5, #8
 800698c:	e762      	b.n	8006854 <_dtoa_r+0x39c>
 800698e:	2602      	movs	r6, #2
 8006990:	e765      	b.n	800685e <_dtoa_r+0x3a6>
 8006992:	9c03      	ldr	r4, [sp, #12]
 8006994:	46b8      	mov	r8, r7
 8006996:	e784      	b.n	80068a2 <_dtoa_r+0x3ea>
 8006998:	4b27      	ldr	r3, [pc, #156]	@ (8006a38 <_dtoa_r+0x580>)
 800699a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800699c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069a4:	4454      	add	r4, sl
 80069a6:	2900      	cmp	r1, #0
 80069a8:	d054      	beq.n	8006a54 <_dtoa_r+0x59c>
 80069aa:	4929      	ldr	r1, [pc, #164]	@ (8006a50 <_dtoa_r+0x598>)
 80069ac:	2000      	movs	r0, #0
 80069ae:	f7f9 ff55 	bl	800085c <__aeabi_ddiv>
 80069b2:	4633      	mov	r3, r6
 80069b4:	462a      	mov	r2, r5
 80069b6:	f7f9 fc6f 	bl	8000298 <__aeabi_dsub>
 80069ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80069be:	4656      	mov	r6, sl
 80069c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c4:	f7fa f8d0 	bl	8000b68 <__aeabi_d2iz>
 80069c8:	4605      	mov	r5, r0
 80069ca:	f7f9 fdb3 	bl	8000534 <__aeabi_i2d>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d6:	f7f9 fc5f 	bl	8000298 <__aeabi_dsub>
 80069da:	3530      	adds	r5, #48	@ 0x30
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069e4:	f806 5b01 	strb.w	r5, [r6], #1
 80069e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069ec:	f7fa f87e 	bl	8000aec <__aeabi_dcmplt>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d172      	bne.n	8006ada <_dtoa_r+0x622>
 80069f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f8:	4911      	ldr	r1, [pc, #68]	@ (8006a40 <_dtoa_r+0x588>)
 80069fa:	2000      	movs	r0, #0
 80069fc:	f7f9 fc4c 	bl	8000298 <__aeabi_dsub>
 8006a00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a04:	f7fa f872 	bl	8000aec <__aeabi_dcmplt>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f040 80b4 	bne.w	8006b76 <_dtoa_r+0x6be>
 8006a0e:	42a6      	cmp	r6, r4
 8006a10:	f43f af70 	beq.w	80068f4 <_dtoa_r+0x43c>
 8006a14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a18:	4b0a      	ldr	r3, [pc, #40]	@ (8006a44 <_dtoa_r+0x58c>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f7f9 fdf4 	bl	8000608 <__aeabi_dmul>
 8006a20:	4b08      	ldr	r3, [pc, #32]	@ (8006a44 <_dtoa_r+0x58c>)
 8006a22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a26:	2200      	movs	r2, #0
 8006a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a2c:	f7f9 fdec 	bl	8000608 <__aeabi_dmul>
 8006a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a34:	e7c4      	b.n	80069c0 <_dtoa_r+0x508>
 8006a36:	bf00      	nop
 8006a38:	08008688 	.word	0x08008688
 8006a3c:	08008660 	.word	0x08008660
 8006a40:	3ff00000 	.word	0x3ff00000
 8006a44:	40240000 	.word	0x40240000
 8006a48:	401c0000 	.word	0x401c0000
 8006a4c:	40140000 	.word	0x40140000
 8006a50:	3fe00000 	.word	0x3fe00000
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	f7f9 fdd6 	bl	8000608 <__aeabi_dmul>
 8006a5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a60:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a62:	4656      	mov	r6, sl
 8006a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a68:	f7fa f87e 	bl	8000b68 <__aeabi_d2iz>
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	f7f9 fd61 	bl	8000534 <__aeabi_i2d>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a7a:	f7f9 fc0d 	bl	8000298 <__aeabi_dsub>
 8006a7e:	3530      	adds	r5, #48	@ 0x30
 8006a80:	f806 5b01 	strb.w	r5, [r6], #1
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a8e:	f04f 0200 	mov.w	r2, #0
 8006a92:	d124      	bne.n	8006ade <_dtoa_r+0x626>
 8006a94:	4baf      	ldr	r3, [pc, #700]	@ (8006d54 <_dtoa_r+0x89c>)
 8006a96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a9a:	f7f9 fbff 	bl	800029c <__adddf3>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa6:	f7fa f83f 	bl	8000b28 <__aeabi_dcmpgt>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d163      	bne.n	8006b76 <_dtoa_r+0x6be>
 8006aae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ab2:	49a8      	ldr	r1, [pc, #672]	@ (8006d54 <_dtoa_r+0x89c>)
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7f9 fbef 	bl	8000298 <__aeabi_dsub>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac2:	f7fa f813 	bl	8000aec <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f af14 	beq.w	80068f4 <_dtoa_r+0x43c>
 8006acc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006ace:	1e73      	subs	r3, r6, #1
 8006ad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ad2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ad6:	2b30      	cmp	r3, #48	@ 0x30
 8006ad8:	d0f8      	beq.n	8006acc <_dtoa_r+0x614>
 8006ada:	4647      	mov	r7, r8
 8006adc:	e03b      	b.n	8006b56 <_dtoa_r+0x69e>
 8006ade:	4b9e      	ldr	r3, [pc, #632]	@ (8006d58 <_dtoa_r+0x8a0>)
 8006ae0:	f7f9 fd92 	bl	8000608 <__aeabi_dmul>
 8006ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ae8:	e7bc      	b.n	8006a64 <_dtoa_r+0x5ac>
 8006aea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006aee:	4656      	mov	r6, sl
 8006af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006af4:	4620      	mov	r0, r4
 8006af6:	4629      	mov	r1, r5
 8006af8:	f7f9 feb0 	bl	800085c <__aeabi_ddiv>
 8006afc:	f7fa f834 	bl	8000b68 <__aeabi_d2iz>
 8006b00:	4680      	mov	r8, r0
 8006b02:	f7f9 fd17 	bl	8000534 <__aeabi_i2d>
 8006b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b0a:	f7f9 fd7d 	bl	8000608 <__aeabi_dmul>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b1a:	f7f9 fbbd 	bl	8000298 <__aeabi_dsub>
 8006b1e:	f806 4b01 	strb.w	r4, [r6], #1
 8006b22:	9d03      	ldr	r5, [sp, #12]
 8006b24:	eba6 040a 	sub.w	r4, r6, sl
 8006b28:	42a5      	cmp	r5, r4
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	d133      	bne.n	8006b98 <_dtoa_r+0x6e0>
 8006b30:	f7f9 fbb4 	bl	800029c <__adddf3>
 8006b34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	f7f9 fff4 	bl	8000b28 <__aeabi_dcmpgt>
 8006b40:	b9c0      	cbnz	r0, 8006b74 <_dtoa_r+0x6bc>
 8006b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b4e:	b110      	cbz	r0, 8006b56 <_dtoa_r+0x69e>
 8006b50:	f018 0f01 	tst.w	r8, #1
 8006b54:	d10e      	bne.n	8006b74 <_dtoa_r+0x6bc>
 8006b56:	9902      	ldr	r1, [sp, #8]
 8006b58:	4648      	mov	r0, r9
 8006b5a:	f000 fbbd 	bl	80072d8 <_Bfree>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	7033      	strb	r3, [r6, #0]
 8006b62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b64:	3701      	adds	r7, #1
 8006b66:	601f      	str	r7, [r3, #0]
 8006b68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 824b 	beq.w	8007006 <_dtoa_r+0xb4e>
 8006b70:	601e      	str	r6, [r3, #0]
 8006b72:	e248      	b.n	8007006 <_dtoa_r+0xb4e>
 8006b74:	46b8      	mov	r8, r7
 8006b76:	4633      	mov	r3, r6
 8006b78:	461e      	mov	r6, r3
 8006b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b7e:	2a39      	cmp	r2, #57	@ 0x39
 8006b80:	d106      	bne.n	8006b90 <_dtoa_r+0x6d8>
 8006b82:	459a      	cmp	sl, r3
 8006b84:	d1f8      	bne.n	8006b78 <_dtoa_r+0x6c0>
 8006b86:	2230      	movs	r2, #48	@ 0x30
 8006b88:	f108 0801 	add.w	r8, r8, #1
 8006b8c:	f88a 2000 	strb.w	r2, [sl]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	3201      	adds	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	e7a0      	b.n	8006ada <_dtoa_r+0x622>
 8006b98:	4b6f      	ldr	r3, [pc, #444]	@ (8006d58 <_dtoa_r+0x8a0>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f7f9 fd34 	bl	8000608 <__aeabi_dmul>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	f7f9 ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d09f      	beq.n	8006af0 <_dtoa_r+0x638>
 8006bb0:	e7d1      	b.n	8006b56 <_dtoa_r+0x69e>
 8006bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	f000 80ea 	beq.w	8006d8e <_dtoa_r+0x8d6>
 8006bba:	9a07      	ldr	r2, [sp, #28]
 8006bbc:	2a01      	cmp	r2, #1
 8006bbe:	f300 80cd 	bgt.w	8006d5c <_dtoa_r+0x8a4>
 8006bc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	f000 80c1 	beq.w	8006d4c <_dtoa_r+0x894>
 8006bca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006bce:	9c08      	ldr	r4, [sp, #32]
 8006bd0:	9e00      	ldr	r6, [sp, #0]
 8006bd2:	9a00      	ldr	r2, [sp, #0]
 8006bd4:	441a      	add	r2, r3
 8006bd6:	9200      	str	r2, [sp, #0]
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	2101      	movs	r1, #1
 8006bdc:	441a      	add	r2, r3
 8006bde:	4648      	mov	r0, r9
 8006be0:	9206      	str	r2, [sp, #24]
 8006be2:	f000 fc2d 	bl	8007440 <__i2b>
 8006be6:	4605      	mov	r5, r0
 8006be8:	b166      	cbz	r6, 8006c04 <_dtoa_r+0x74c>
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dd09      	ble.n	8006c04 <_dtoa_r+0x74c>
 8006bf0:	42b3      	cmp	r3, r6
 8006bf2:	9a00      	ldr	r2, [sp, #0]
 8006bf4:	bfa8      	it	ge
 8006bf6:	4633      	movge	r3, r6
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	9200      	str	r2, [sp, #0]
 8006bfc:	9a06      	ldr	r2, [sp, #24]
 8006bfe:	1af6      	subs	r6, r6, r3
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	9306      	str	r3, [sp, #24]
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	b30b      	cbz	r3, 8006c4c <_dtoa_r+0x794>
 8006c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80c6 	beq.w	8006d9c <_dtoa_r+0x8e4>
 8006c10:	2c00      	cmp	r4, #0
 8006c12:	f000 80c0 	beq.w	8006d96 <_dtoa_r+0x8de>
 8006c16:	4629      	mov	r1, r5
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4648      	mov	r0, r9
 8006c1c:	f000 fcc8 	bl	80075b0 <__pow5mult>
 8006c20:	9a02      	ldr	r2, [sp, #8]
 8006c22:	4601      	mov	r1, r0
 8006c24:	4605      	mov	r5, r0
 8006c26:	4648      	mov	r0, r9
 8006c28:	f000 fc20 	bl	800746c <__multiply>
 8006c2c:	9902      	ldr	r1, [sp, #8]
 8006c2e:	4680      	mov	r8, r0
 8006c30:	4648      	mov	r0, r9
 8006c32:	f000 fb51 	bl	80072d8 <_Bfree>
 8006c36:	9b08      	ldr	r3, [sp, #32]
 8006c38:	1b1b      	subs	r3, r3, r4
 8006c3a:	9308      	str	r3, [sp, #32]
 8006c3c:	f000 80b1 	beq.w	8006da2 <_dtoa_r+0x8ea>
 8006c40:	9a08      	ldr	r2, [sp, #32]
 8006c42:	4641      	mov	r1, r8
 8006c44:	4648      	mov	r0, r9
 8006c46:	f000 fcb3 	bl	80075b0 <__pow5mult>
 8006c4a:	9002      	str	r0, [sp, #8]
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	4648      	mov	r0, r9
 8006c50:	f000 fbf6 	bl	8007440 <__i2b>
 8006c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c56:	4604      	mov	r4, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 81d8 	beq.w	800700e <_dtoa_r+0xb56>
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4601      	mov	r1, r0
 8006c62:	4648      	mov	r0, r9
 8006c64:	f000 fca4 	bl	80075b0 <__pow5mult>
 8006c68:	9b07      	ldr	r3, [sp, #28]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	f300 809f 	bgt.w	8006db0 <_dtoa_r+0x8f8>
 8006c72:	9b04      	ldr	r3, [sp, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f040 8097 	bne.w	8006da8 <_dtoa_r+0x8f0>
 8006c7a:	9b05      	ldr	r3, [sp, #20]
 8006c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 8093 	bne.w	8006dac <_dtoa_r+0x8f4>
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c8c:	0d1b      	lsrs	r3, r3, #20
 8006c8e:	051b      	lsls	r3, r3, #20
 8006c90:	b133      	cbz	r3, 8006ca0 <_dtoa_r+0x7e8>
 8006c92:	9b00      	ldr	r3, [sp, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	9308      	str	r3, [sp, #32]
 8006ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 81b8 	beq.w	800701a <_dtoa_r+0xb62>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cb0:	6918      	ldr	r0, [r3, #16]
 8006cb2:	f000 fb79 	bl	80073a8 <__hi0bits>
 8006cb6:	f1c0 0020 	rsb	r0, r0, #32
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	4418      	add	r0, r3
 8006cbe:	f010 001f 	ands.w	r0, r0, #31
 8006cc2:	f000 8082 	beq.w	8006dca <_dtoa_r+0x912>
 8006cc6:	f1c0 0320 	rsb	r3, r0, #32
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	dd73      	ble.n	8006db6 <_dtoa_r+0x8fe>
 8006cce:	9b00      	ldr	r3, [sp, #0]
 8006cd0:	f1c0 001c 	rsb	r0, r0, #28
 8006cd4:	4403      	add	r3, r0
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	9b06      	ldr	r3, [sp, #24]
 8006cda:	4403      	add	r3, r0
 8006cdc:	4406      	add	r6, r0
 8006cde:	9306      	str	r3, [sp, #24]
 8006ce0:	9b00      	ldr	r3, [sp, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd05      	ble.n	8006cf2 <_dtoa_r+0x83a>
 8006ce6:	9902      	ldr	r1, [sp, #8]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4648      	mov	r0, r9
 8006cec:	f000 fcba 	bl	8007664 <__lshift>
 8006cf0:	9002      	str	r0, [sp, #8]
 8006cf2:	9b06      	ldr	r3, [sp, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dd05      	ble.n	8006d04 <_dtoa_r+0x84c>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f000 fcb1 	bl	8007664 <__lshift>
 8006d02:	4604      	mov	r4, r0
 8006d04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d061      	beq.n	8006dce <_dtoa_r+0x916>
 8006d0a:	9802      	ldr	r0, [sp, #8]
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	f000 fd15 	bl	800773c <__mcmp>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	da5b      	bge.n	8006dce <_dtoa_r+0x916>
 8006d16:	2300      	movs	r3, #0
 8006d18:	9902      	ldr	r1, [sp, #8]
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	4648      	mov	r0, r9
 8006d1e:	f000 fafd 	bl	800731c <__multadd>
 8006d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d24:	9002      	str	r0, [sp, #8]
 8006d26:	f107 38ff 	add.w	r8, r7, #4294967295
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8177 	beq.w	800701e <_dtoa_r+0xb66>
 8006d30:	4629      	mov	r1, r5
 8006d32:	2300      	movs	r3, #0
 8006d34:	220a      	movs	r2, #10
 8006d36:	4648      	mov	r0, r9
 8006d38:	f000 faf0 	bl	800731c <__multadd>
 8006d3c:	f1bb 0f00 	cmp.w	fp, #0
 8006d40:	4605      	mov	r5, r0
 8006d42:	dc6f      	bgt.n	8006e24 <_dtoa_r+0x96c>
 8006d44:	9b07      	ldr	r3, [sp, #28]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	dc49      	bgt.n	8006dde <_dtoa_r+0x926>
 8006d4a:	e06b      	b.n	8006e24 <_dtoa_r+0x96c>
 8006d4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d52:	e73c      	b.n	8006bce <_dtoa_r+0x716>
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	40240000 	.word	0x40240000
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	1e5c      	subs	r4, r3, #1
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	db09      	blt.n	8006d7a <_dtoa_r+0x8c2>
 8006d66:	1b1c      	subs	r4, r3, r4
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f6bf af30 	bge.w	8006bd0 <_dtoa_r+0x718>
 8006d70:	9b00      	ldr	r3, [sp, #0]
 8006d72:	9a03      	ldr	r2, [sp, #12]
 8006d74:	1a9e      	subs	r6, r3, r2
 8006d76:	2300      	movs	r3, #0
 8006d78:	e72b      	b.n	8006bd2 <_dtoa_r+0x71a>
 8006d7a:	9b08      	ldr	r3, [sp, #32]
 8006d7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d7e:	9408      	str	r4, [sp, #32]
 8006d80:	1ae3      	subs	r3, r4, r3
 8006d82:	441a      	add	r2, r3
 8006d84:	9e00      	ldr	r6, [sp, #0]
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	920d      	str	r2, [sp, #52]	@ 0x34
 8006d8a:	2400      	movs	r4, #0
 8006d8c:	e721      	b.n	8006bd2 <_dtoa_r+0x71a>
 8006d8e:	9c08      	ldr	r4, [sp, #32]
 8006d90:	9e00      	ldr	r6, [sp, #0]
 8006d92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006d94:	e728      	b.n	8006be8 <_dtoa_r+0x730>
 8006d96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006d9a:	e751      	b.n	8006c40 <_dtoa_r+0x788>
 8006d9c:	9a08      	ldr	r2, [sp, #32]
 8006d9e:	9902      	ldr	r1, [sp, #8]
 8006da0:	e750      	b.n	8006c44 <_dtoa_r+0x78c>
 8006da2:	f8cd 8008 	str.w	r8, [sp, #8]
 8006da6:	e751      	b.n	8006c4c <_dtoa_r+0x794>
 8006da8:	2300      	movs	r3, #0
 8006daa:	e779      	b.n	8006ca0 <_dtoa_r+0x7e8>
 8006dac:	9b04      	ldr	r3, [sp, #16]
 8006dae:	e777      	b.n	8006ca0 <_dtoa_r+0x7e8>
 8006db0:	2300      	movs	r3, #0
 8006db2:	9308      	str	r3, [sp, #32]
 8006db4:	e779      	b.n	8006caa <_dtoa_r+0x7f2>
 8006db6:	d093      	beq.n	8006ce0 <_dtoa_r+0x828>
 8006db8:	9a00      	ldr	r2, [sp, #0]
 8006dba:	331c      	adds	r3, #28
 8006dbc:	441a      	add	r2, r3
 8006dbe:	9200      	str	r2, [sp, #0]
 8006dc0:	9a06      	ldr	r2, [sp, #24]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	441e      	add	r6, r3
 8006dc6:	9206      	str	r2, [sp, #24]
 8006dc8:	e78a      	b.n	8006ce0 <_dtoa_r+0x828>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	e7f4      	b.n	8006db8 <_dtoa_r+0x900>
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	46b8      	mov	r8, r7
 8006dd4:	dc20      	bgt.n	8006e18 <_dtoa_r+0x960>
 8006dd6:	469b      	mov	fp, r3
 8006dd8:	9b07      	ldr	r3, [sp, #28]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	dd1e      	ble.n	8006e1c <_dtoa_r+0x964>
 8006dde:	f1bb 0f00 	cmp.w	fp, #0
 8006de2:	f47f adb1 	bne.w	8006948 <_dtoa_r+0x490>
 8006de6:	4621      	mov	r1, r4
 8006de8:	465b      	mov	r3, fp
 8006dea:	2205      	movs	r2, #5
 8006dec:	4648      	mov	r0, r9
 8006dee:	f000 fa95 	bl	800731c <__multadd>
 8006df2:	4601      	mov	r1, r0
 8006df4:	4604      	mov	r4, r0
 8006df6:	9802      	ldr	r0, [sp, #8]
 8006df8:	f000 fca0 	bl	800773c <__mcmp>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f77f ada3 	ble.w	8006948 <_dtoa_r+0x490>
 8006e02:	4656      	mov	r6, sl
 8006e04:	2331      	movs	r3, #49	@ 0x31
 8006e06:	f806 3b01 	strb.w	r3, [r6], #1
 8006e0a:	f108 0801 	add.w	r8, r8, #1
 8006e0e:	e59f      	b.n	8006950 <_dtoa_r+0x498>
 8006e10:	9c03      	ldr	r4, [sp, #12]
 8006e12:	46b8      	mov	r8, r7
 8006e14:	4625      	mov	r5, r4
 8006e16:	e7f4      	b.n	8006e02 <_dtoa_r+0x94a>
 8006e18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8101 	beq.w	8007026 <_dtoa_r+0xb6e>
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	dd05      	ble.n	8006e34 <_dtoa_r+0x97c>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	f000 fc19 	bl	8007664 <__lshift>
 8006e32:	4605      	mov	r5, r0
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d05c      	beq.n	8006ef4 <_dtoa_r+0xa3c>
 8006e3a:	6869      	ldr	r1, [r5, #4]
 8006e3c:	4648      	mov	r0, r9
 8006e3e:	f000 fa0b 	bl	8007258 <_Balloc>
 8006e42:	4606      	mov	r6, r0
 8006e44:	b928      	cbnz	r0, 8006e52 <_dtoa_r+0x99a>
 8006e46:	4b82      	ldr	r3, [pc, #520]	@ (8007050 <_dtoa_r+0xb98>)
 8006e48:	4602      	mov	r2, r0
 8006e4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e4e:	f7ff bb4a 	b.w	80064e6 <_dtoa_r+0x2e>
 8006e52:	692a      	ldr	r2, [r5, #16]
 8006e54:	3202      	adds	r2, #2
 8006e56:	0092      	lsls	r2, r2, #2
 8006e58:	f105 010c 	add.w	r1, r5, #12
 8006e5c:	300c      	adds	r0, #12
 8006e5e:	f000 ffa3 	bl	8007da8 <memcpy>
 8006e62:	2201      	movs	r2, #1
 8006e64:	4631      	mov	r1, r6
 8006e66:	4648      	mov	r0, r9
 8006e68:	f000 fbfc 	bl	8007664 <__lshift>
 8006e6c:	f10a 0301 	add.w	r3, sl, #1
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	eb0a 030b 	add.w	r3, sl, fp
 8006e76:	9308      	str	r3, [sp, #32]
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	462f      	mov	r7, r5
 8006e80:	9306      	str	r3, [sp, #24]
 8006e82:	4605      	mov	r5, r0
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	9802      	ldr	r0, [sp, #8]
 8006e88:	4621      	mov	r1, r4
 8006e8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e8e:	f7ff fa8a 	bl	80063a6 <quorem>
 8006e92:	4603      	mov	r3, r0
 8006e94:	3330      	adds	r3, #48	@ 0x30
 8006e96:	9003      	str	r0, [sp, #12]
 8006e98:	4639      	mov	r1, r7
 8006e9a:	9802      	ldr	r0, [sp, #8]
 8006e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9e:	f000 fc4d 	bl	800773c <__mcmp>
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	9004      	str	r0, [sp, #16]
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4648      	mov	r0, r9
 8006eaa:	f000 fc63 	bl	8007774 <__mdiff>
 8006eae:	68c2      	ldr	r2, [r0, #12]
 8006eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	bb02      	cbnz	r2, 8006ef8 <_dtoa_r+0xa40>
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	9802      	ldr	r0, [sp, #8]
 8006eba:	f000 fc3f 	bl	800773c <__mcmp>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4648      	mov	r0, r9
 8006ec6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eca:	f000 fa05 	bl	80072d8 <_Bfree>
 8006ece:	9b07      	ldr	r3, [sp, #28]
 8006ed0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ed2:	9e00      	ldr	r6, [sp, #0]
 8006ed4:	ea42 0103 	orr.w	r1, r2, r3
 8006ed8:	9b06      	ldr	r3, [sp, #24]
 8006eda:	4319      	orrs	r1, r3
 8006edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ede:	d10d      	bne.n	8006efc <_dtoa_r+0xa44>
 8006ee0:	2b39      	cmp	r3, #57	@ 0x39
 8006ee2:	d027      	beq.n	8006f34 <_dtoa_r+0xa7c>
 8006ee4:	9a04      	ldr	r2, [sp, #16]
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	dd01      	ble.n	8006eee <_dtoa_r+0xa36>
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	3331      	adds	r3, #49	@ 0x31
 8006eee:	f88b 3000 	strb.w	r3, [fp]
 8006ef2:	e52e      	b.n	8006952 <_dtoa_r+0x49a>
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	e7b9      	b.n	8006e6c <_dtoa_r+0x9b4>
 8006ef8:	2201      	movs	r2, #1
 8006efa:	e7e2      	b.n	8006ec2 <_dtoa_r+0xa0a>
 8006efc:	9904      	ldr	r1, [sp, #16]
 8006efe:	2900      	cmp	r1, #0
 8006f00:	db04      	blt.n	8006f0c <_dtoa_r+0xa54>
 8006f02:	9807      	ldr	r0, [sp, #28]
 8006f04:	4301      	orrs	r1, r0
 8006f06:	9806      	ldr	r0, [sp, #24]
 8006f08:	4301      	orrs	r1, r0
 8006f0a:	d120      	bne.n	8006f4e <_dtoa_r+0xa96>
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	ddee      	ble.n	8006eee <_dtoa_r+0xa36>
 8006f10:	9902      	ldr	r1, [sp, #8]
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	2201      	movs	r2, #1
 8006f16:	4648      	mov	r0, r9
 8006f18:	f000 fba4 	bl	8007664 <__lshift>
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	9002      	str	r0, [sp, #8]
 8006f20:	f000 fc0c 	bl	800773c <__mcmp>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	dc02      	bgt.n	8006f30 <_dtoa_r+0xa78>
 8006f2a:	d1e0      	bne.n	8006eee <_dtoa_r+0xa36>
 8006f2c:	07da      	lsls	r2, r3, #31
 8006f2e:	d5de      	bpl.n	8006eee <_dtoa_r+0xa36>
 8006f30:	2b39      	cmp	r3, #57	@ 0x39
 8006f32:	d1da      	bne.n	8006eea <_dtoa_r+0xa32>
 8006f34:	2339      	movs	r3, #57	@ 0x39
 8006f36:	f88b 3000 	strb.w	r3, [fp]
 8006f3a:	4633      	mov	r3, r6
 8006f3c:	461e      	mov	r6, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f44:	2a39      	cmp	r2, #57	@ 0x39
 8006f46:	d04e      	beq.n	8006fe6 <_dtoa_r+0xb2e>
 8006f48:	3201      	adds	r2, #1
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e501      	b.n	8006952 <_dtoa_r+0x49a>
 8006f4e:	2a00      	cmp	r2, #0
 8006f50:	dd03      	ble.n	8006f5a <_dtoa_r+0xaa2>
 8006f52:	2b39      	cmp	r3, #57	@ 0x39
 8006f54:	d0ee      	beq.n	8006f34 <_dtoa_r+0xa7c>
 8006f56:	3301      	adds	r3, #1
 8006f58:	e7c9      	b.n	8006eee <_dtoa_r+0xa36>
 8006f5a:	9a00      	ldr	r2, [sp, #0]
 8006f5c:	9908      	ldr	r1, [sp, #32]
 8006f5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f62:	428a      	cmp	r2, r1
 8006f64:	d028      	beq.n	8006fb8 <_dtoa_r+0xb00>
 8006f66:	9902      	ldr	r1, [sp, #8]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	4648      	mov	r0, r9
 8006f6e:	f000 f9d5 	bl	800731c <__multadd>
 8006f72:	42af      	cmp	r7, r5
 8006f74:	9002      	str	r0, [sp, #8]
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	f04f 020a 	mov.w	r2, #10
 8006f7e:	4639      	mov	r1, r7
 8006f80:	4648      	mov	r0, r9
 8006f82:	d107      	bne.n	8006f94 <_dtoa_r+0xadc>
 8006f84:	f000 f9ca 	bl	800731c <__multadd>
 8006f88:	4607      	mov	r7, r0
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	9b00      	ldr	r3, [sp, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	e777      	b.n	8006e84 <_dtoa_r+0x9cc>
 8006f94:	f000 f9c2 	bl	800731c <__multadd>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	220a      	movs	r2, #10
 8006fa0:	4648      	mov	r0, r9
 8006fa2:	f000 f9bb 	bl	800731c <__multadd>
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	e7f0      	b.n	8006f8c <_dtoa_r+0xad4>
 8006faa:	f1bb 0f00 	cmp.w	fp, #0
 8006fae:	bfcc      	ite	gt
 8006fb0:	465e      	movgt	r6, fp
 8006fb2:	2601      	movle	r6, #1
 8006fb4:	4456      	add	r6, sl
 8006fb6:	2700      	movs	r7, #0
 8006fb8:	9902      	ldr	r1, [sp, #8]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	4648      	mov	r0, r9
 8006fc0:	f000 fb50 	bl	8007664 <__lshift>
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	9002      	str	r0, [sp, #8]
 8006fc8:	f000 fbb8 	bl	800773c <__mcmp>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	dcb4      	bgt.n	8006f3a <_dtoa_r+0xa82>
 8006fd0:	d102      	bne.n	8006fd8 <_dtoa_r+0xb20>
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	07db      	lsls	r3, r3, #31
 8006fd6:	d4b0      	bmi.n	8006f3a <_dtoa_r+0xa82>
 8006fd8:	4633      	mov	r3, r6
 8006fda:	461e      	mov	r6, r3
 8006fdc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fe0:	2a30      	cmp	r2, #48	@ 0x30
 8006fe2:	d0fa      	beq.n	8006fda <_dtoa_r+0xb22>
 8006fe4:	e4b5      	b.n	8006952 <_dtoa_r+0x49a>
 8006fe6:	459a      	cmp	sl, r3
 8006fe8:	d1a8      	bne.n	8006f3c <_dtoa_r+0xa84>
 8006fea:	2331      	movs	r3, #49	@ 0x31
 8006fec:	f108 0801 	add.w	r8, r8, #1
 8006ff0:	f88a 3000 	strb.w	r3, [sl]
 8006ff4:	e4ad      	b.n	8006952 <_dtoa_r+0x49a>
 8006ff6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ff8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007054 <_dtoa_r+0xb9c>
 8006ffc:	b11b      	cbz	r3, 8007006 <_dtoa_r+0xb4e>
 8006ffe:	f10a 0308 	add.w	r3, sl, #8
 8007002:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	4650      	mov	r0, sl
 8007008:	b017      	add	sp, #92	@ 0x5c
 800700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	9b07      	ldr	r3, [sp, #28]
 8007010:	2b01      	cmp	r3, #1
 8007012:	f77f ae2e 	ble.w	8006c72 <_dtoa_r+0x7ba>
 8007016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007018:	9308      	str	r3, [sp, #32]
 800701a:	2001      	movs	r0, #1
 800701c:	e64d      	b.n	8006cba <_dtoa_r+0x802>
 800701e:	f1bb 0f00 	cmp.w	fp, #0
 8007022:	f77f aed9 	ble.w	8006dd8 <_dtoa_r+0x920>
 8007026:	4656      	mov	r6, sl
 8007028:	9802      	ldr	r0, [sp, #8]
 800702a:	4621      	mov	r1, r4
 800702c:	f7ff f9bb 	bl	80063a6 <quorem>
 8007030:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007034:	f806 3b01 	strb.w	r3, [r6], #1
 8007038:	eba6 020a 	sub.w	r2, r6, sl
 800703c:	4593      	cmp	fp, r2
 800703e:	ddb4      	ble.n	8006faa <_dtoa_r+0xaf2>
 8007040:	9902      	ldr	r1, [sp, #8]
 8007042:	2300      	movs	r3, #0
 8007044:	220a      	movs	r2, #10
 8007046:	4648      	mov	r0, r9
 8007048:	f000 f968 	bl	800731c <__multadd>
 800704c:	9002      	str	r0, [sp, #8]
 800704e:	e7eb      	b.n	8007028 <_dtoa_r+0xb70>
 8007050:	08008590 	.word	0x08008590
 8007054:	08008514 	.word	0x08008514

08007058 <_free_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4605      	mov	r5, r0
 800705c:	2900      	cmp	r1, #0
 800705e:	d041      	beq.n	80070e4 <_free_r+0x8c>
 8007060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007064:	1f0c      	subs	r4, r1, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfb8      	it	lt
 800706a:	18e4      	addlt	r4, r4, r3
 800706c:	f000 f8e8 	bl	8007240 <__malloc_lock>
 8007070:	4a1d      	ldr	r2, [pc, #116]	@ (80070e8 <_free_r+0x90>)
 8007072:	6813      	ldr	r3, [r2, #0]
 8007074:	b933      	cbnz	r3, 8007084 <_free_r+0x2c>
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	6014      	str	r4, [r2, #0]
 800707a:	4628      	mov	r0, r5
 800707c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007080:	f000 b8e4 	b.w	800724c <__malloc_unlock>
 8007084:	42a3      	cmp	r3, r4
 8007086:	d908      	bls.n	800709a <_free_r+0x42>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	1821      	adds	r1, r4, r0
 800708c:	428b      	cmp	r3, r1
 800708e:	bf01      	itttt	eq
 8007090:	6819      	ldreq	r1, [r3, #0]
 8007092:	685b      	ldreq	r3, [r3, #4]
 8007094:	1809      	addeq	r1, r1, r0
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	e7ed      	b.n	8007076 <_free_r+0x1e>
 800709a:	461a      	mov	r2, r3
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b10b      	cbz	r3, 80070a4 <_free_r+0x4c>
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d9fa      	bls.n	800709a <_free_r+0x42>
 80070a4:	6811      	ldr	r1, [r2, #0]
 80070a6:	1850      	adds	r0, r2, r1
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d10b      	bne.n	80070c4 <_free_r+0x6c>
 80070ac:	6820      	ldr	r0, [r4, #0]
 80070ae:	4401      	add	r1, r0
 80070b0:	1850      	adds	r0, r2, r1
 80070b2:	4283      	cmp	r3, r0
 80070b4:	6011      	str	r1, [r2, #0]
 80070b6:	d1e0      	bne.n	800707a <_free_r+0x22>
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	6053      	str	r3, [r2, #4]
 80070be:	4408      	add	r0, r1
 80070c0:	6010      	str	r0, [r2, #0]
 80070c2:	e7da      	b.n	800707a <_free_r+0x22>
 80070c4:	d902      	bls.n	80070cc <_free_r+0x74>
 80070c6:	230c      	movs	r3, #12
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	e7d6      	b.n	800707a <_free_r+0x22>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	1821      	adds	r1, r4, r0
 80070d0:	428b      	cmp	r3, r1
 80070d2:	bf04      	itt	eq
 80070d4:	6819      	ldreq	r1, [r3, #0]
 80070d6:	685b      	ldreq	r3, [r3, #4]
 80070d8:	6063      	str	r3, [r4, #4]
 80070da:	bf04      	itt	eq
 80070dc:	1809      	addeq	r1, r1, r0
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	6054      	str	r4, [r2, #4]
 80070e2:	e7ca      	b.n	800707a <_free_r+0x22>
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
 80070e6:	bf00      	nop
 80070e8:	200004b8 	.word	0x200004b8

080070ec <malloc>:
 80070ec:	4b02      	ldr	r3, [pc, #8]	@ (80070f8 <malloc+0xc>)
 80070ee:	4601      	mov	r1, r0
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	f000 b825 	b.w	8007140 <_malloc_r>
 80070f6:	bf00      	nop
 80070f8:	20000018 	.word	0x20000018

080070fc <sbrk_aligned>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4e0f      	ldr	r6, [pc, #60]	@ (800713c <sbrk_aligned+0x40>)
 8007100:	460c      	mov	r4, r1
 8007102:	6831      	ldr	r1, [r6, #0]
 8007104:	4605      	mov	r5, r0
 8007106:	b911      	cbnz	r1, 800710e <sbrk_aligned+0x12>
 8007108:	f000 fe3e 	bl	8007d88 <_sbrk_r>
 800710c:	6030      	str	r0, [r6, #0]
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 fe39 	bl	8007d88 <_sbrk_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d103      	bne.n	8007122 <sbrk_aligned+0x26>
 800711a:	f04f 34ff 	mov.w	r4, #4294967295
 800711e:	4620      	mov	r0, r4
 8007120:	bd70      	pop	{r4, r5, r6, pc}
 8007122:	1cc4      	adds	r4, r0, #3
 8007124:	f024 0403 	bic.w	r4, r4, #3
 8007128:	42a0      	cmp	r0, r4
 800712a:	d0f8      	beq.n	800711e <sbrk_aligned+0x22>
 800712c:	1a21      	subs	r1, r4, r0
 800712e:	4628      	mov	r0, r5
 8007130:	f000 fe2a 	bl	8007d88 <_sbrk_r>
 8007134:	3001      	adds	r0, #1
 8007136:	d1f2      	bne.n	800711e <sbrk_aligned+0x22>
 8007138:	e7ef      	b.n	800711a <sbrk_aligned+0x1e>
 800713a:	bf00      	nop
 800713c:	200004b4 	.word	0x200004b4

08007140 <_malloc_r>:
 8007140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007144:	1ccd      	adds	r5, r1, #3
 8007146:	f025 0503 	bic.w	r5, r5, #3
 800714a:	3508      	adds	r5, #8
 800714c:	2d0c      	cmp	r5, #12
 800714e:	bf38      	it	cc
 8007150:	250c      	movcc	r5, #12
 8007152:	2d00      	cmp	r5, #0
 8007154:	4606      	mov	r6, r0
 8007156:	db01      	blt.n	800715c <_malloc_r+0x1c>
 8007158:	42a9      	cmp	r1, r5
 800715a:	d904      	bls.n	8007166 <_malloc_r+0x26>
 800715c:	230c      	movs	r3, #12
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	2000      	movs	r0, #0
 8007162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800723c <_malloc_r+0xfc>
 800716a:	f000 f869 	bl	8007240 <__malloc_lock>
 800716e:	f8d8 3000 	ldr.w	r3, [r8]
 8007172:	461c      	mov	r4, r3
 8007174:	bb44      	cbnz	r4, 80071c8 <_malloc_r+0x88>
 8007176:	4629      	mov	r1, r5
 8007178:	4630      	mov	r0, r6
 800717a:	f7ff ffbf 	bl	80070fc <sbrk_aligned>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	4604      	mov	r4, r0
 8007182:	d158      	bne.n	8007236 <_malloc_r+0xf6>
 8007184:	f8d8 4000 	ldr.w	r4, [r8]
 8007188:	4627      	mov	r7, r4
 800718a:	2f00      	cmp	r7, #0
 800718c:	d143      	bne.n	8007216 <_malloc_r+0xd6>
 800718e:	2c00      	cmp	r4, #0
 8007190:	d04b      	beq.n	800722a <_malloc_r+0xea>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	4639      	mov	r1, r7
 8007196:	4630      	mov	r0, r6
 8007198:	eb04 0903 	add.w	r9, r4, r3
 800719c:	f000 fdf4 	bl	8007d88 <_sbrk_r>
 80071a0:	4581      	cmp	r9, r0
 80071a2:	d142      	bne.n	800722a <_malloc_r+0xea>
 80071a4:	6821      	ldr	r1, [r4, #0]
 80071a6:	1a6d      	subs	r5, r5, r1
 80071a8:	4629      	mov	r1, r5
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff ffa6 	bl	80070fc <sbrk_aligned>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d03a      	beq.n	800722a <_malloc_r+0xea>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	442b      	add	r3, r5
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	f8d8 3000 	ldr.w	r3, [r8]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	bb62      	cbnz	r2, 800721c <_malloc_r+0xdc>
 80071c2:	f8c8 7000 	str.w	r7, [r8]
 80071c6:	e00f      	b.n	80071e8 <_malloc_r+0xa8>
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	1b52      	subs	r2, r2, r5
 80071cc:	d420      	bmi.n	8007210 <_malloc_r+0xd0>
 80071ce:	2a0b      	cmp	r2, #11
 80071d0:	d917      	bls.n	8007202 <_malloc_r+0xc2>
 80071d2:	1961      	adds	r1, r4, r5
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	6025      	str	r5, [r4, #0]
 80071d8:	bf18      	it	ne
 80071da:	6059      	strne	r1, [r3, #4]
 80071dc:	6863      	ldr	r3, [r4, #4]
 80071de:	bf08      	it	eq
 80071e0:	f8c8 1000 	streq.w	r1, [r8]
 80071e4:	5162      	str	r2, [r4, r5]
 80071e6:	604b      	str	r3, [r1, #4]
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f82f 	bl	800724c <__malloc_unlock>
 80071ee:	f104 000b 	add.w	r0, r4, #11
 80071f2:	1d23      	adds	r3, r4, #4
 80071f4:	f020 0007 	bic.w	r0, r0, #7
 80071f8:	1ac2      	subs	r2, r0, r3
 80071fa:	bf1c      	itt	ne
 80071fc:	1a1b      	subne	r3, r3, r0
 80071fe:	50a3      	strne	r3, [r4, r2]
 8007200:	e7af      	b.n	8007162 <_malloc_r+0x22>
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	42a3      	cmp	r3, r4
 8007206:	bf0c      	ite	eq
 8007208:	f8c8 2000 	streq.w	r2, [r8]
 800720c:	605a      	strne	r2, [r3, #4]
 800720e:	e7eb      	b.n	80071e8 <_malloc_r+0xa8>
 8007210:	4623      	mov	r3, r4
 8007212:	6864      	ldr	r4, [r4, #4]
 8007214:	e7ae      	b.n	8007174 <_malloc_r+0x34>
 8007216:	463c      	mov	r4, r7
 8007218:	687f      	ldr	r7, [r7, #4]
 800721a:	e7b6      	b.n	800718a <_malloc_r+0x4a>
 800721c:	461a      	mov	r2, r3
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	42a3      	cmp	r3, r4
 8007222:	d1fb      	bne.n	800721c <_malloc_r+0xdc>
 8007224:	2300      	movs	r3, #0
 8007226:	6053      	str	r3, [r2, #4]
 8007228:	e7de      	b.n	80071e8 <_malloc_r+0xa8>
 800722a:	230c      	movs	r3, #12
 800722c:	6033      	str	r3, [r6, #0]
 800722e:	4630      	mov	r0, r6
 8007230:	f000 f80c 	bl	800724c <__malloc_unlock>
 8007234:	e794      	b.n	8007160 <_malloc_r+0x20>
 8007236:	6005      	str	r5, [r0, #0]
 8007238:	e7d6      	b.n	80071e8 <_malloc_r+0xa8>
 800723a:	bf00      	nop
 800723c:	200004b8 	.word	0x200004b8

08007240 <__malloc_lock>:
 8007240:	4801      	ldr	r0, [pc, #4]	@ (8007248 <__malloc_lock+0x8>)
 8007242:	f7ff b8ae 	b.w	80063a2 <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	200004b0 	.word	0x200004b0

0800724c <__malloc_unlock>:
 800724c:	4801      	ldr	r0, [pc, #4]	@ (8007254 <__malloc_unlock+0x8>)
 800724e:	f7ff b8a9 	b.w	80063a4 <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	200004b0 	.word	0x200004b0

08007258 <_Balloc>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	69c6      	ldr	r6, [r0, #28]
 800725c:	4604      	mov	r4, r0
 800725e:	460d      	mov	r5, r1
 8007260:	b976      	cbnz	r6, 8007280 <_Balloc+0x28>
 8007262:	2010      	movs	r0, #16
 8007264:	f7ff ff42 	bl	80070ec <malloc>
 8007268:	4602      	mov	r2, r0
 800726a:	61e0      	str	r0, [r4, #28]
 800726c:	b920      	cbnz	r0, 8007278 <_Balloc+0x20>
 800726e:	4b18      	ldr	r3, [pc, #96]	@ (80072d0 <_Balloc+0x78>)
 8007270:	4818      	ldr	r0, [pc, #96]	@ (80072d4 <_Balloc+0x7c>)
 8007272:	216b      	movs	r1, #107	@ 0x6b
 8007274:	f000 fda6 	bl	8007dc4 <__assert_func>
 8007278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800727c:	6006      	str	r6, [r0, #0]
 800727e:	60c6      	str	r6, [r0, #12]
 8007280:	69e6      	ldr	r6, [r4, #28]
 8007282:	68f3      	ldr	r3, [r6, #12]
 8007284:	b183      	cbz	r3, 80072a8 <_Balloc+0x50>
 8007286:	69e3      	ldr	r3, [r4, #28]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800728e:	b9b8      	cbnz	r0, 80072c0 <_Balloc+0x68>
 8007290:	2101      	movs	r1, #1
 8007292:	fa01 f605 	lsl.w	r6, r1, r5
 8007296:	1d72      	adds	r2, r6, #5
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fdb0 	bl	8007e00 <_calloc_r>
 80072a0:	b160      	cbz	r0, 80072bc <_Balloc+0x64>
 80072a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072a6:	e00e      	b.n	80072c6 <_Balloc+0x6e>
 80072a8:	2221      	movs	r2, #33	@ 0x21
 80072aa:	2104      	movs	r1, #4
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 fda7 	bl	8007e00 <_calloc_r>
 80072b2:	69e3      	ldr	r3, [r4, #28]
 80072b4:	60f0      	str	r0, [r6, #12]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e4      	bne.n	8007286 <_Balloc+0x2e>
 80072bc:	2000      	movs	r0, #0
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	6802      	ldr	r2, [r0, #0]
 80072c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072c6:	2300      	movs	r3, #0
 80072c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072cc:	e7f7      	b.n	80072be <_Balloc+0x66>
 80072ce:	bf00      	nop
 80072d0:	08008521 	.word	0x08008521
 80072d4:	080085a1 	.word	0x080085a1

080072d8 <_Bfree>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	69c6      	ldr	r6, [r0, #28]
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b976      	cbnz	r6, 8007300 <_Bfree+0x28>
 80072e2:	2010      	movs	r0, #16
 80072e4:	f7ff ff02 	bl	80070ec <malloc>
 80072e8:	4602      	mov	r2, r0
 80072ea:	61e8      	str	r0, [r5, #28]
 80072ec:	b920      	cbnz	r0, 80072f8 <_Bfree+0x20>
 80072ee:	4b09      	ldr	r3, [pc, #36]	@ (8007314 <_Bfree+0x3c>)
 80072f0:	4809      	ldr	r0, [pc, #36]	@ (8007318 <_Bfree+0x40>)
 80072f2:	218f      	movs	r1, #143	@ 0x8f
 80072f4:	f000 fd66 	bl	8007dc4 <__assert_func>
 80072f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072fc:	6006      	str	r6, [r0, #0]
 80072fe:	60c6      	str	r6, [r0, #12]
 8007300:	b13c      	cbz	r4, 8007312 <_Bfree+0x3a>
 8007302:	69eb      	ldr	r3, [r5, #28]
 8007304:	6862      	ldr	r2, [r4, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800730c:	6021      	str	r1, [r4, #0]
 800730e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	08008521 	.word	0x08008521
 8007318:	080085a1 	.word	0x080085a1

0800731c <__multadd>:
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	690d      	ldr	r5, [r1, #16]
 8007322:	4607      	mov	r7, r0
 8007324:	460c      	mov	r4, r1
 8007326:	461e      	mov	r6, r3
 8007328:	f101 0c14 	add.w	ip, r1, #20
 800732c:	2000      	movs	r0, #0
 800732e:	f8dc 3000 	ldr.w	r3, [ip]
 8007332:	b299      	uxth	r1, r3
 8007334:	fb02 6101 	mla	r1, r2, r1, r6
 8007338:	0c1e      	lsrs	r6, r3, #16
 800733a:	0c0b      	lsrs	r3, r1, #16
 800733c:	fb02 3306 	mla	r3, r2, r6, r3
 8007340:	b289      	uxth	r1, r1
 8007342:	3001      	adds	r0, #1
 8007344:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007348:	4285      	cmp	r5, r0
 800734a:	f84c 1b04 	str.w	r1, [ip], #4
 800734e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007352:	dcec      	bgt.n	800732e <__multadd+0x12>
 8007354:	b30e      	cbz	r6, 800739a <__multadd+0x7e>
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	42ab      	cmp	r3, r5
 800735a:	dc19      	bgt.n	8007390 <__multadd+0x74>
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	4638      	mov	r0, r7
 8007360:	3101      	adds	r1, #1
 8007362:	f7ff ff79 	bl	8007258 <_Balloc>
 8007366:	4680      	mov	r8, r0
 8007368:	b928      	cbnz	r0, 8007376 <__multadd+0x5a>
 800736a:	4602      	mov	r2, r0
 800736c:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <__multadd+0x84>)
 800736e:	480d      	ldr	r0, [pc, #52]	@ (80073a4 <__multadd+0x88>)
 8007370:	21ba      	movs	r1, #186	@ 0xba
 8007372:	f000 fd27 	bl	8007dc4 <__assert_func>
 8007376:	6922      	ldr	r2, [r4, #16]
 8007378:	3202      	adds	r2, #2
 800737a:	f104 010c 	add.w	r1, r4, #12
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	300c      	adds	r0, #12
 8007382:	f000 fd11 	bl	8007da8 <memcpy>
 8007386:	4621      	mov	r1, r4
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff ffa5 	bl	80072d8 <_Bfree>
 800738e:	4644      	mov	r4, r8
 8007390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007394:	3501      	adds	r5, #1
 8007396:	615e      	str	r6, [r3, #20]
 8007398:	6125      	str	r5, [r4, #16]
 800739a:	4620      	mov	r0, r4
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	08008590 	.word	0x08008590
 80073a4:	080085a1 	.word	0x080085a1

080073a8 <__hi0bits>:
 80073a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073ac:	4603      	mov	r3, r0
 80073ae:	bf36      	itet	cc
 80073b0:	0403      	lslcc	r3, r0, #16
 80073b2:	2000      	movcs	r0, #0
 80073b4:	2010      	movcc	r0, #16
 80073b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ba:	bf3c      	itt	cc
 80073bc:	021b      	lslcc	r3, r3, #8
 80073be:	3008      	addcc	r0, #8
 80073c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073c4:	bf3c      	itt	cc
 80073c6:	011b      	lslcc	r3, r3, #4
 80073c8:	3004      	addcc	r0, #4
 80073ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ce:	bf3c      	itt	cc
 80073d0:	009b      	lslcc	r3, r3, #2
 80073d2:	3002      	addcc	r0, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	db05      	blt.n	80073e4 <__hi0bits+0x3c>
 80073d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80073dc:	f100 0001 	add.w	r0, r0, #1
 80073e0:	bf08      	it	eq
 80073e2:	2020      	moveq	r0, #32
 80073e4:	4770      	bx	lr

080073e6 <__lo0bits>:
 80073e6:	6803      	ldr	r3, [r0, #0]
 80073e8:	4602      	mov	r2, r0
 80073ea:	f013 0007 	ands.w	r0, r3, #7
 80073ee:	d00b      	beq.n	8007408 <__lo0bits+0x22>
 80073f0:	07d9      	lsls	r1, r3, #31
 80073f2:	d421      	bmi.n	8007438 <__lo0bits+0x52>
 80073f4:	0798      	lsls	r0, r3, #30
 80073f6:	bf49      	itett	mi
 80073f8:	085b      	lsrmi	r3, r3, #1
 80073fa:	089b      	lsrpl	r3, r3, #2
 80073fc:	2001      	movmi	r0, #1
 80073fe:	6013      	strmi	r3, [r2, #0]
 8007400:	bf5c      	itt	pl
 8007402:	6013      	strpl	r3, [r2, #0]
 8007404:	2002      	movpl	r0, #2
 8007406:	4770      	bx	lr
 8007408:	b299      	uxth	r1, r3
 800740a:	b909      	cbnz	r1, 8007410 <__lo0bits+0x2a>
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	2010      	movs	r0, #16
 8007410:	b2d9      	uxtb	r1, r3
 8007412:	b909      	cbnz	r1, 8007418 <__lo0bits+0x32>
 8007414:	3008      	adds	r0, #8
 8007416:	0a1b      	lsrs	r3, r3, #8
 8007418:	0719      	lsls	r1, r3, #28
 800741a:	bf04      	itt	eq
 800741c:	091b      	lsreq	r3, r3, #4
 800741e:	3004      	addeq	r0, #4
 8007420:	0799      	lsls	r1, r3, #30
 8007422:	bf04      	itt	eq
 8007424:	089b      	lsreq	r3, r3, #2
 8007426:	3002      	addeq	r0, #2
 8007428:	07d9      	lsls	r1, r3, #31
 800742a:	d403      	bmi.n	8007434 <__lo0bits+0x4e>
 800742c:	085b      	lsrs	r3, r3, #1
 800742e:	f100 0001 	add.w	r0, r0, #1
 8007432:	d003      	beq.n	800743c <__lo0bits+0x56>
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	4770      	bx	lr
 8007438:	2000      	movs	r0, #0
 800743a:	4770      	bx	lr
 800743c:	2020      	movs	r0, #32
 800743e:	4770      	bx	lr

08007440 <__i2b>:
 8007440:	b510      	push	{r4, lr}
 8007442:	460c      	mov	r4, r1
 8007444:	2101      	movs	r1, #1
 8007446:	f7ff ff07 	bl	8007258 <_Balloc>
 800744a:	4602      	mov	r2, r0
 800744c:	b928      	cbnz	r0, 800745a <__i2b+0x1a>
 800744e:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <__i2b+0x24>)
 8007450:	4805      	ldr	r0, [pc, #20]	@ (8007468 <__i2b+0x28>)
 8007452:	f240 1145 	movw	r1, #325	@ 0x145
 8007456:	f000 fcb5 	bl	8007dc4 <__assert_func>
 800745a:	2301      	movs	r3, #1
 800745c:	6144      	str	r4, [r0, #20]
 800745e:	6103      	str	r3, [r0, #16]
 8007460:	bd10      	pop	{r4, pc}
 8007462:	bf00      	nop
 8007464:	08008590 	.word	0x08008590
 8007468:	080085a1 	.word	0x080085a1

0800746c <__multiply>:
 800746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	4617      	mov	r7, r2
 8007472:	690a      	ldr	r2, [r1, #16]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	429a      	cmp	r2, r3
 8007478:	bfa8      	it	ge
 800747a:	463b      	movge	r3, r7
 800747c:	4689      	mov	r9, r1
 800747e:	bfa4      	itt	ge
 8007480:	460f      	movge	r7, r1
 8007482:	4699      	movge	r9, r3
 8007484:	693d      	ldr	r5, [r7, #16]
 8007486:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6879      	ldr	r1, [r7, #4]
 800748e:	eb05 060a 	add.w	r6, r5, sl
 8007492:	42b3      	cmp	r3, r6
 8007494:	b085      	sub	sp, #20
 8007496:	bfb8      	it	lt
 8007498:	3101      	addlt	r1, #1
 800749a:	f7ff fedd 	bl	8007258 <_Balloc>
 800749e:	b930      	cbnz	r0, 80074ae <__multiply+0x42>
 80074a0:	4602      	mov	r2, r0
 80074a2:	4b41      	ldr	r3, [pc, #260]	@ (80075a8 <__multiply+0x13c>)
 80074a4:	4841      	ldr	r0, [pc, #260]	@ (80075ac <__multiply+0x140>)
 80074a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074aa:	f000 fc8b 	bl	8007dc4 <__assert_func>
 80074ae:	f100 0414 	add.w	r4, r0, #20
 80074b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80074b6:	4623      	mov	r3, r4
 80074b8:	2200      	movs	r2, #0
 80074ba:	4573      	cmp	r3, lr
 80074bc:	d320      	bcc.n	8007500 <__multiply+0x94>
 80074be:	f107 0814 	add.w	r8, r7, #20
 80074c2:	f109 0114 	add.w	r1, r9, #20
 80074c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80074ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80074ce:	9302      	str	r3, [sp, #8]
 80074d0:	1beb      	subs	r3, r5, r7
 80074d2:	3b15      	subs	r3, #21
 80074d4:	f023 0303 	bic.w	r3, r3, #3
 80074d8:	3304      	adds	r3, #4
 80074da:	3715      	adds	r7, #21
 80074dc:	42bd      	cmp	r5, r7
 80074de:	bf38      	it	cc
 80074e0:	2304      	movcc	r3, #4
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	9b02      	ldr	r3, [sp, #8]
 80074e6:	9103      	str	r1, [sp, #12]
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d80c      	bhi.n	8007506 <__multiply+0x9a>
 80074ec:	2e00      	cmp	r6, #0
 80074ee:	dd03      	ble.n	80074f8 <__multiply+0x8c>
 80074f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d055      	beq.n	80075a4 <__multiply+0x138>
 80074f8:	6106      	str	r6, [r0, #16]
 80074fa:	b005      	add	sp, #20
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	f843 2b04 	str.w	r2, [r3], #4
 8007504:	e7d9      	b.n	80074ba <__multiply+0x4e>
 8007506:	f8b1 a000 	ldrh.w	sl, [r1]
 800750a:	f1ba 0f00 	cmp.w	sl, #0
 800750e:	d01f      	beq.n	8007550 <__multiply+0xe4>
 8007510:	46c4      	mov	ip, r8
 8007512:	46a1      	mov	r9, r4
 8007514:	2700      	movs	r7, #0
 8007516:	f85c 2b04 	ldr.w	r2, [ip], #4
 800751a:	f8d9 3000 	ldr.w	r3, [r9]
 800751e:	fa1f fb82 	uxth.w	fp, r2
 8007522:	b29b      	uxth	r3, r3
 8007524:	fb0a 330b 	mla	r3, sl, fp, r3
 8007528:	443b      	add	r3, r7
 800752a:	f8d9 7000 	ldr.w	r7, [r9]
 800752e:	0c12      	lsrs	r2, r2, #16
 8007530:	0c3f      	lsrs	r7, r7, #16
 8007532:	fb0a 7202 	mla	r2, sl, r2, r7
 8007536:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800753a:	b29b      	uxth	r3, r3
 800753c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007540:	4565      	cmp	r5, ip
 8007542:	f849 3b04 	str.w	r3, [r9], #4
 8007546:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800754a:	d8e4      	bhi.n	8007516 <__multiply+0xaa>
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	50e7      	str	r7, [r4, r3]
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007556:	3104      	adds	r1, #4
 8007558:	f1b9 0f00 	cmp.w	r9, #0
 800755c:	d020      	beq.n	80075a0 <__multiply+0x134>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	4647      	mov	r7, r8
 8007562:	46a4      	mov	ip, r4
 8007564:	f04f 0a00 	mov.w	sl, #0
 8007568:	f8b7 b000 	ldrh.w	fp, [r7]
 800756c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007570:	fb09 220b 	mla	r2, r9, fp, r2
 8007574:	4452      	add	r2, sl
 8007576:	b29b      	uxth	r3, r3
 8007578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800757c:	f84c 3b04 	str.w	r3, [ip], #4
 8007580:	f857 3b04 	ldr.w	r3, [r7], #4
 8007584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007588:	f8bc 3000 	ldrh.w	r3, [ip]
 800758c:	fb09 330a 	mla	r3, r9, sl, r3
 8007590:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007594:	42bd      	cmp	r5, r7
 8007596:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800759a:	d8e5      	bhi.n	8007568 <__multiply+0xfc>
 800759c:	9a01      	ldr	r2, [sp, #4]
 800759e:	50a3      	str	r3, [r4, r2]
 80075a0:	3404      	adds	r4, #4
 80075a2:	e79f      	b.n	80074e4 <__multiply+0x78>
 80075a4:	3e01      	subs	r6, #1
 80075a6:	e7a1      	b.n	80074ec <__multiply+0x80>
 80075a8:	08008590 	.word	0x08008590
 80075ac:	080085a1 	.word	0x080085a1

080075b0 <__pow5mult>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	4615      	mov	r5, r2
 80075b6:	f012 0203 	ands.w	r2, r2, #3
 80075ba:	4607      	mov	r7, r0
 80075bc:	460e      	mov	r6, r1
 80075be:	d007      	beq.n	80075d0 <__pow5mult+0x20>
 80075c0:	4c25      	ldr	r4, [pc, #148]	@ (8007658 <__pow5mult+0xa8>)
 80075c2:	3a01      	subs	r2, #1
 80075c4:	2300      	movs	r3, #0
 80075c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075ca:	f7ff fea7 	bl	800731c <__multadd>
 80075ce:	4606      	mov	r6, r0
 80075d0:	10ad      	asrs	r5, r5, #2
 80075d2:	d03d      	beq.n	8007650 <__pow5mult+0xa0>
 80075d4:	69fc      	ldr	r4, [r7, #28]
 80075d6:	b97c      	cbnz	r4, 80075f8 <__pow5mult+0x48>
 80075d8:	2010      	movs	r0, #16
 80075da:	f7ff fd87 	bl	80070ec <malloc>
 80075de:	4602      	mov	r2, r0
 80075e0:	61f8      	str	r0, [r7, #28]
 80075e2:	b928      	cbnz	r0, 80075f0 <__pow5mult+0x40>
 80075e4:	4b1d      	ldr	r3, [pc, #116]	@ (800765c <__pow5mult+0xac>)
 80075e6:	481e      	ldr	r0, [pc, #120]	@ (8007660 <__pow5mult+0xb0>)
 80075e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80075ec:	f000 fbea 	bl	8007dc4 <__assert_func>
 80075f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075f4:	6004      	str	r4, [r0, #0]
 80075f6:	60c4      	str	r4, [r0, #12]
 80075f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007600:	b94c      	cbnz	r4, 8007616 <__pow5mult+0x66>
 8007602:	f240 2171 	movw	r1, #625	@ 0x271
 8007606:	4638      	mov	r0, r7
 8007608:	f7ff ff1a 	bl	8007440 <__i2b>
 800760c:	2300      	movs	r3, #0
 800760e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007612:	4604      	mov	r4, r0
 8007614:	6003      	str	r3, [r0, #0]
 8007616:	f04f 0900 	mov.w	r9, #0
 800761a:	07eb      	lsls	r3, r5, #31
 800761c:	d50a      	bpl.n	8007634 <__pow5mult+0x84>
 800761e:	4631      	mov	r1, r6
 8007620:	4622      	mov	r2, r4
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ff22 	bl	800746c <__multiply>
 8007628:	4631      	mov	r1, r6
 800762a:	4680      	mov	r8, r0
 800762c:	4638      	mov	r0, r7
 800762e:	f7ff fe53 	bl	80072d8 <_Bfree>
 8007632:	4646      	mov	r6, r8
 8007634:	106d      	asrs	r5, r5, #1
 8007636:	d00b      	beq.n	8007650 <__pow5mult+0xa0>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	b938      	cbnz	r0, 800764c <__pow5mult+0x9c>
 800763c:	4622      	mov	r2, r4
 800763e:	4621      	mov	r1, r4
 8007640:	4638      	mov	r0, r7
 8007642:	f7ff ff13 	bl	800746c <__multiply>
 8007646:	6020      	str	r0, [r4, #0]
 8007648:	f8c0 9000 	str.w	r9, [r0]
 800764c:	4604      	mov	r4, r0
 800764e:	e7e4      	b.n	800761a <__pow5mult+0x6a>
 8007650:	4630      	mov	r0, r6
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	bf00      	nop
 8007658:	08008654 	.word	0x08008654
 800765c:	08008521 	.word	0x08008521
 8007660:	080085a1 	.word	0x080085a1

08007664 <__lshift>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	460c      	mov	r4, r1
 800766a:	6849      	ldr	r1, [r1, #4]
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	4607      	mov	r7, r0
 8007676:	4691      	mov	r9, r2
 8007678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800767c:	f108 0601 	add.w	r6, r8, #1
 8007680:	42b3      	cmp	r3, r6
 8007682:	db0b      	blt.n	800769c <__lshift+0x38>
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff fde7 	bl	8007258 <_Balloc>
 800768a:	4605      	mov	r5, r0
 800768c:	b948      	cbnz	r0, 80076a2 <__lshift+0x3e>
 800768e:	4602      	mov	r2, r0
 8007690:	4b28      	ldr	r3, [pc, #160]	@ (8007734 <__lshift+0xd0>)
 8007692:	4829      	ldr	r0, [pc, #164]	@ (8007738 <__lshift+0xd4>)
 8007694:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007698:	f000 fb94 	bl	8007dc4 <__assert_func>
 800769c:	3101      	adds	r1, #1
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	e7ee      	b.n	8007680 <__lshift+0x1c>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f100 0114 	add.w	r1, r0, #20
 80076a8:	f100 0210 	add.w	r2, r0, #16
 80076ac:	4618      	mov	r0, r3
 80076ae:	4553      	cmp	r3, sl
 80076b0:	db33      	blt.n	800771a <__lshift+0xb6>
 80076b2:	6920      	ldr	r0, [r4, #16]
 80076b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076b8:	f104 0314 	add.w	r3, r4, #20
 80076bc:	f019 091f 	ands.w	r9, r9, #31
 80076c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076c8:	d02b      	beq.n	8007722 <__lshift+0xbe>
 80076ca:	f1c9 0e20 	rsb	lr, r9, #32
 80076ce:	468a      	mov	sl, r1
 80076d0:	2200      	movs	r2, #0
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	fa00 f009 	lsl.w	r0, r0, r9
 80076d8:	4310      	orrs	r0, r2
 80076da:	f84a 0b04 	str.w	r0, [sl], #4
 80076de:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e2:	459c      	cmp	ip, r3
 80076e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80076e8:	d8f3      	bhi.n	80076d2 <__lshift+0x6e>
 80076ea:	ebac 0304 	sub.w	r3, ip, r4
 80076ee:	3b15      	subs	r3, #21
 80076f0:	f023 0303 	bic.w	r3, r3, #3
 80076f4:	3304      	adds	r3, #4
 80076f6:	f104 0015 	add.w	r0, r4, #21
 80076fa:	4560      	cmp	r0, ip
 80076fc:	bf88      	it	hi
 80076fe:	2304      	movhi	r3, #4
 8007700:	50ca      	str	r2, [r1, r3]
 8007702:	b10a      	cbz	r2, 8007708 <__lshift+0xa4>
 8007704:	f108 0602 	add.w	r6, r8, #2
 8007708:	3e01      	subs	r6, #1
 800770a:	4638      	mov	r0, r7
 800770c:	612e      	str	r6, [r5, #16]
 800770e:	4621      	mov	r1, r4
 8007710:	f7ff fde2 	bl	80072d8 <_Bfree>
 8007714:	4628      	mov	r0, r5
 8007716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771a:	f842 0f04 	str.w	r0, [r2, #4]!
 800771e:	3301      	adds	r3, #1
 8007720:	e7c5      	b.n	80076ae <__lshift+0x4a>
 8007722:	3904      	subs	r1, #4
 8007724:	f853 2b04 	ldr.w	r2, [r3], #4
 8007728:	f841 2f04 	str.w	r2, [r1, #4]!
 800772c:	459c      	cmp	ip, r3
 800772e:	d8f9      	bhi.n	8007724 <__lshift+0xc0>
 8007730:	e7ea      	b.n	8007708 <__lshift+0xa4>
 8007732:	bf00      	nop
 8007734:	08008590 	.word	0x08008590
 8007738:	080085a1 	.word	0x080085a1

0800773c <__mcmp>:
 800773c:	690a      	ldr	r2, [r1, #16]
 800773e:	4603      	mov	r3, r0
 8007740:	6900      	ldr	r0, [r0, #16]
 8007742:	1a80      	subs	r0, r0, r2
 8007744:	b530      	push	{r4, r5, lr}
 8007746:	d10e      	bne.n	8007766 <__mcmp+0x2a>
 8007748:	3314      	adds	r3, #20
 800774a:	3114      	adds	r1, #20
 800774c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007750:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800775c:	4295      	cmp	r5, r2
 800775e:	d003      	beq.n	8007768 <__mcmp+0x2c>
 8007760:	d205      	bcs.n	800776e <__mcmp+0x32>
 8007762:	f04f 30ff 	mov.w	r0, #4294967295
 8007766:	bd30      	pop	{r4, r5, pc}
 8007768:	42a3      	cmp	r3, r4
 800776a:	d3f3      	bcc.n	8007754 <__mcmp+0x18>
 800776c:	e7fb      	b.n	8007766 <__mcmp+0x2a>
 800776e:	2001      	movs	r0, #1
 8007770:	e7f9      	b.n	8007766 <__mcmp+0x2a>
	...

08007774 <__mdiff>:
 8007774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	4689      	mov	r9, r1
 800777a:	4606      	mov	r6, r0
 800777c:	4611      	mov	r1, r2
 800777e:	4648      	mov	r0, r9
 8007780:	4614      	mov	r4, r2
 8007782:	f7ff ffdb 	bl	800773c <__mcmp>
 8007786:	1e05      	subs	r5, r0, #0
 8007788:	d112      	bne.n	80077b0 <__mdiff+0x3c>
 800778a:	4629      	mov	r1, r5
 800778c:	4630      	mov	r0, r6
 800778e:	f7ff fd63 	bl	8007258 <_Balloc>
 8007792:	4602      	mov	r2, r0
 8007794:	b928      	cbnz	r0, 80077a2 <__mdiff+0x2e>
 8007796:	4b3f      	ldr	r3, [pc, #252]	@ (8007894 <__mdiff+0x120>)
 8007798:	f240 2137 	movw	r1, #567	@ 0x237
 800779c:	483e      	ldr	r0, [pc, #248]	@ (8007898 <__mdiff+0x124>)
 800779e:	f000 fb11 	bl	8007dc4 <__assert_func>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077a8:	4610      	mov	r0, r2
 80077aa:	b003      	add	sp, #12
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	bfbc      	itt	lt
 80077b2:	464b      	movlt	r3, r9
 80077b4:	46a1      	movlt	r9, r4
 80077b6:	4630      	mov	r0, r6
 80077b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077bc:	bfba      	itte	lt
 80077be:	461c      	movlt	r4, r3
 80077c0:	2501      	movlt	r5, #1
 80077c2:	2500      	movge	r5, #0
 80077c4:	f7ff fd48 	bl	8007258 <_Balloc>
 80077c8:	4602      	mov	r2, r0
 80077ca:	b918      	cbnz	r0, 80077d4 <__mdiff+0x60>
 80077cc:	4b31      	ldr	r3, [pc, #196]	@ (8007894 <__mdiff+0x120>)
 80077ce:	f240 2145 	movw	r1, #581	@ 0x245
 80077d2:	e7e3      	b.n	800779c <__mdiff+0x28>
 80077d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077d8:	6926      	ldr	r6, [r4, #16]
 80077da:	60c5      	str	r5, [r0, #12]
 80077dc:	f109 0310 	add.w	r3, r9, #16
 80077e0:	f109 0514 	add.w	r5, r9, #20
 80077e4:	f104 0e14 	add.w	lr, r4, #20
 80077e8:	f100 0b14 	add.w	fp, r0, #20
 80077ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80077f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	46d9      	mov	r9, fp
 80077f8:	f04f 0c00 	mov.w	ip, #0
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007802:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	fa1f f38a 	uxth.w	r3, sl
 800780c:	4619      	mov	r1, r3
 800780e:	b283      	uxth	r3, r0
 8007810:	1acb      	subs	r3, r1, r3
 8007812:	0c00      	lsrs	r0, r0, #16
 8007814:	4463      	add	r3, ip
 8007816:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800781a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800781e:	b29b      	uxth	r3, r3
 8007820:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007824:	4576      	cmp	r6, lr
 8007826:	f849 3b04 	str.w	r3, [r9], #4
 800782a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800782e:	d8e5      	bhi.n	80077fc <__mdiff+0x88>
 8007830:	1b33      	subs	r3, r6, r4
 8007832:	3b15      	subs	r3, #21
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	3415      	adds	r4, #21
 800783a:	3304      	adds	r3, #4
 800783c:	42a6      	cmp	r6, r4
 800783e:	bf38      	it	cc
 8007840:	2304      	movcc	r3, #4
 8007842:	441d      	add	r5, r3
 8007844:	445b      	add	r3, fp
 8007846:	461e      	mov	r6, r3
 8007848:	462c      	mov	r4, r5
 800784a:	4544      	cmp	r4, r8
 800784c:	d30e      	bcc.n	800786c <__mdiff+0xf8>
 800784e:	f108 0103 	add.w	r1, r8, #3
 8007852:	1b49      	subs	r1, r1, r5
 8007854:	f021 0103 	bic.w	r1, r1, #3
 8007858:	3d03      	subs	r5, #3
 800785a:	45a8      	cmp	r8, r5
 800785c:	bf38      	it	cc
 800785e:	2100      	movcc	r1, #0
 8007860:	440b      	add	r3, r1
 8007862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007866:	b191      	cbz	r1, 800788e <__mdiff+0x11a>
 8007868:	6117      	str	r7, [r2, #16]
 800786a:	e79d      	b.n	80077a8 <__mdiff+0x34>
 800786c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007870:	46e6      	mov	lr, ip
 8007872:	0c08      	lsrs	r0, r1, #16
 8007874:	fa1c fc81 	uxtah	ip, ip, r1
 8007878:	4471      	add	r1, lr
 800787a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800787e:	b289      	uxth	r1, r1
 8007880:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007884:	f846 1b04 	str.w	r1, [r6], #4
 8007888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800788c:	e7dd      	b.n	800784a <__mdiff+0xd6>
 800788e:	3f01      	subs	r7, #1
 8007890:	e7e7      	b.n	8007862 <__mdiff+0xee>
 8007892:	bf00      	nop
 8007894:	08008590 	.word	0x08008590
 8007898:	080085a1 	.word	0x080085a1

0800789c <__d2b>:
 800789c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	460f      	mov	r7, r1
 80078a2:	2101      	movs	r1, #1
 80078a4:	ec59 8b10 	vmov	r8, r9, d0
 80078a8:	4616      	mov	r6, r2
 80078aa:	f7ff fcd5 	bl	8007258 <_Balloc>
 80078ae:	4604      	mov	r4, r0
 80078b0:	b930      	cbnz	r0, 80078c0 <__d2b+0x24>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4b23      	ldr	r3, [pc, #140]	@ (8007944 <__d2b+0xa8>)
 80078b6:	4824      	ldr	r0, [pc, #144]	@ (8007948 <__d2b+0xac>)
 80078b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80078bc:	f000 fa82 	bl	8007dc4 <__assert_func>
 80078c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078c8:	b10d      	cbz	r5, 80078ce <__d2b+0x32>
 80078ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	f1b8 0300 	subs.w	r3, r8, #0
 80078d4:	d023      	beq.n	800791e <__d2b+0x82>
 80078d6:	4668      	mov	r0, sp
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	f7ff fd84 	bl	80073e6 <__lo0bits>
 80078de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078e2:	b1d0      	cbz	r0, 800791a <__d2b+0x7e>
 80078e4:	f1c0 0320 	rsb	r3, r0, #32
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	430b      	orrs	r3, r1
 80078ee:	40c2      	lsrs	r2, r0
 80078f0:	6163      	str	r3, [r4, #20]
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	9b01      	ldr	r3, [sp, #4]
 80078f6:	61a3      	str	r3, [r4, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bf0c      	ite	eq
 80078fc:	2201      	moveq	r2, #1
 80078fe:	2202      	movne	r2, #2
 8007900:	6122      	str	r2, [r4, #16]
 8007902:	b1a5      	cbz	r5, 800792e <__d2b+0x92>
 8007904:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007908:	4405      	add	r5, r0
 800790a:	603d      	str	r5, [r7, #0]
 800790c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007910:	6030      	str	r0, [r6, #0]
 8007912:	4620      	mov	r0, r4
 8007914:	b003      	add	sp, #12
 8007916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800791a:	6161      	str	r1, [r4, #20]
 800791c:	e7ea      	b.n	80078f4 <__d2b+0x58>
 800791e:	a801      	add	r0, sp, #4
 8007920:	f7ff fd61 	bl	80073e6 <__lo0bits>
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	3020      	adds	r0, #32
 800792a:	2201      	movs	r2, #1
 800792c:	e7e8      	b.n	8007900 <__d2b+0x64>
 800792e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007932:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007936:	6038      	str	r0, [r7, #0]
 8007938:	6918      	ldr	r0, [r3, #16]
 800793a:	f7ff fd35 	bl	80073a8 <__hi0bits>
 800793e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007942:	e7e5      	b.n	8007910 <__d2b+0x74>
 8007944:	08008590 	.word	0x08008590
 8007948:	080085a1 	.word	0x080085a1

0800794c <__ssputs_r>:
 800794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	688e      	ldr	r6, [r1, #8]
 8007952:	461f      	mov	r7, r3
 8007954:	42be      	cmp	r6, r7
 8007956:	680b      	ldr	r3, [r1, #0]
 8007958:	4682      	mov	sl, r0
 800795a:	460c      	mov	r4, r1
 800795c:	4690      	mov	r8, r2
 800795e:	d82d      	bhi.n	80079bc <__ssputs_r+0x70>
 8007960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007968:	d026      	beq.n	80079b8 <__ssputs_r+0x6c>
 800796a:	6965      	ldr	r5, [r4, #20]
 800796c:	6909      	ldr	r1, [r1, #16]
 800796e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007972:	eba3 0901 	sub.w	r9, r3, r1
 8007976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800797a:	1c7b      	adds	r3, r7, #1
 800797c:	444b      	add	r3, r9
 800797e:	106d      	asrs	r5, r5, #1
 8007980:	429d      	cmp	r5, r3
 8007982:	bf38      	it	cc
 8007984:	461d      	movcc	r5, r3
 8007986:	0553      	lsls	r3, r2, #21
 8007988:	d527      	bpl.n	80079da <__ssputs_r+0x8e>
 800798a:	4629      	mov	r1, r5
 800798c:	f7ff fbd8 	bl	8007140 <_malloc_r>
 8007990:	4606      	mov	r6, r0
 8007992:	b360      	cbz	r0, 80079ee <__ssputs_r+0xa2>
 8007994:	6921      	ldr	r1, [r4, #16]
 8007996:	464a      	mov	r2, r9
 8007998:	f000 fa06 	bl	8007da8 <memcpy>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a6:	81a3      	strh	r3, [r4, #12]
 80079a8:	6126      	str	r6, [r4, #16]
 80079aa:	6165      	str	r5, [r4, #20]
 80079ac:	444e      	add	r6, r9
 80079ae:	eba5 0509 	sub.w	r5, r5, r9
 80079b2:	6026      	str	r6, [r4, #0]
 80079b4:	60a5      	str	r5, [r4, #8]
 80079b6:	463e      	mov	r6, r7
 80079b8:	42be      	cmp	r6, r7
 80079ba:	d900      	bls.n	80079be <__ssputs_r+0x72>
 80079bc:	463e      	mov	r6, r7
 80079be:	6820      	ldr	r0, [r4, #0]
 80079c0:	4632      	mov	r2, r6
 80079c2:	4641      	mov	r1, r8
 80079c4:	f000 f9c6 	bl	8007d54 <memmove>
 80079c8:	68a3      	ldr	r3, [r4, #8]
 80079ca:	1b9b      	subs	r3, r3, r6
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	4433      	add	r3, r6
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	2000      	movs	r0, #0
 80079d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079da:	462a      	mov	r2, r5
 80079dc:	f000 fa36 	bl	8007e4c <_realloc_r>
 80079e0:	4606      	mov	r6, r0
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d1e0      	bne.n	80079a8 <__ssputs_r+0x5c>
 80079e6:	6921      	ldr	r1, [r4, #16]
 80079e8:	4650      	mov	r0, sl
 80079ea:	f7ff fb35 	bl	8007058 <_free_r>
 80079ee:	230c      	movs	r3, #12
 80079f0:	f8ca 3000 	str.w	r3, [sl]
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	e7e9      	b.n	80079d6 <__ssputs_r+0x8a>
	...

08007a04 <_svfiprintf_r>:
 8007a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a08:	4698      	mov	r8, r3
 8007a0a:	898b      	ldrh	r3, [r1, #12]
 8007a0c:	061b      	lsls	r3, r3, #24
 8007a0e:	b09d      	sub	sp, #116	@ 0x74
 8007a10:	4607      	mov	r7, r0
 8007a12:	460d      	mov	r5, r1
 8007a14:	4614      	mov	r4, r2
 8007a16:	d510      	bpl.n	8007a3a <_svfiprintf_r+0x36>
 8007a18:	690b      	ldr	r3, [r1, #16]
 8007a1a:	b973      	cbnz	r3, 8007a3a <_svfiprintf_r+0x36>
 8007a1c:	2140      	movs	r1, #64	@ 0x40
 8007a1e:	f7ff fb8f 	bl	8007140 <_malloc_r>
 8007a22:	6028      	str	r0, [r5, #0]
 8007a24:	6128      	str	r0, [r5, #16]
 8007a26:	b930      	cbnz	r0, 8007a36 <_svfiprintf_r+0x32>
 8007a28:	230c      	movs	r3, #12
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	b01d      	add	sp, #116	@ 0x74
 8007a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a36:	2340      	movs	r3, #64	@ 0x40
 8007a38:	616b      	str	r3, [r5, #20]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3e:	2320      	movs	r3, #32
 8007a40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a48:	2330      	movs	r3, #48	@ 0x30
 8007a4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007be8 <_svfiprintf_r+0x1e4>
 8007a4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a52:	f04f 0901 	mov.w	r9, #1
 8007a56:	4623      	mov	r3, r4
 8007a58:	469a      	mov	sl, r3
 8007a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a5e:	b10a      	cbz	r2, 8007a64 <_svfiprintf_r+0x60>
 8007a60:	2a25      	cmp	r2, #37	@ 0x25
 8007a62:	d1f9      	bne.n	8007a58 <_svfiprintf_r+0x54>
 8007a64:	ebba 0b04 	subs.w	fp, sl, r4
 8007a68:	d00b      	beq.n	8007a82 <_svfiprintf_r+0x7e>
 8007a6a:	465b      	mov	r3, fp
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff ff6b 	bl	800794c <__ssputs_r>
 8007a76:	3001      	adds	r0, #1
 8007a78:	f000 80a7 	beq.w	8007bca <_svfiprintf_r+0x1c6>
 8007a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a7e:	445a      	add	r2, fp
 8007a80:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a82:	f89a 3000 	ldrb.w	r3, [sl]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 809f 	beq.w	8007bca <_svfiprintf_r+0x1c6>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a96:	f10a 0a01 	add.w	sl, sl, #1
 8007a9a:	9304      	str	r3, [sp, #16]
 8007a9c:	9307      	str	r3, [sp, #28]
 8007a9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007aa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2205      	movs	r2, #5
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	484e      	ldr	r0, [pc, #312]	@ (8007be8 <_svfiprintf_r+0x1e4>)
 8007aae:	f7f8 fb97 	bl	80001e0 <memchr>
 8007ab2:	9a04      	ldr	r2, [sp, #16]
 8007ab4:	b9d8      	cbnz	r0, 8007aee <_svfiprintf_r+0xea>
 8007ab6:	06d0      	lsls	r0, r2, #27
 8007ab8:	bf44      	itt	mi
 8007aba:	2320      	movmi	r3, #32
 8007abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ac0:	0711      	lsls	r1, r2, #28
 8007ac2:	bf44      	itt	mi
 8007ac4:	232b      	movmi	r3, #43	@ 0x2b
 8007ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aca:	f89a 3000 	ldrb.w	r3, [sl]
 8007ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad0:	d015      	beq.n	8007afe <_svfiprintf_r+0xfa>
 8007ad2:	9a07      	ldr	r2, [sp, #28]
 8007ad4:	4654      	mov	r4, sl
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f04f 0c0a 	mov.w	ip, #10
 8007adc:	4621      	mov	r1, r4
 8007ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae2:	3b30      	subs	r3, #48	@ 0x30
 8007ae4:	2b09      	cmp	r3, #9
 8007ae6:	d94b      	bls.n	8007b80 <_svfiprintf_r+0x17c>
 8007ae8:	b1b0      	cbz	r0, 8007b18 <_svfiprintf_r+0x114>
 8007aea:	9207      	str	r2, [sp, #28]
 8007aec:	e014      	b.n	8007b18 <_svfiprintf_r+0x114>
 8007aee:	eba0 0308 	sub.w	r3, r0, r8
 8007af2:	fa09 f303 	lsl.w	r3, r9, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	46a2      	mov	sl, r4
 8007afc:	e7d2      	b.n	8007aa4 <_svfiprintf_r+0xa0>
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	1d19      	adds	r1, r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	9103      	str	r1, [sp, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfbb      	ittet	lt
 8007b0a:	425b      	neglt	r3, r3
 8007b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b10:	9307      	strge	r3, [sp, #28]
 8007b12:	9307      	strlt	r3, [sp, #28]
 8007b14:	bfb8      	it	lt
 8007b16:	9204      	strlt	r2, [sp, #16]
 8007b18:	7823      	ldrb	r3, [r4, #0]
 8007b1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b1c:	d10a      	bne.n	8007b34 <_svfiprintf_r+0x130>
 8007b1e:	7863      	ldrb	r3, [r4, #1]
 8007b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b22:	d132      	bne.n	8007b8a <_svfiprintf_r+0x186>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9203      	str	r2, [sp, #12]
 8007b2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b30:	3402      	adds	r4, #2
 8007b32:	9305      	str	r3, [sp, #20]
 8007b34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bf8 <_svfiprintf_r+0x1f4>
 8007b38:	7821      	ldrb	r1, [r4, #0]
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	4650      	mov	r0, sl
 8007b3e:	f7f8 fb4f 	bl	80001e0 <memchr>
 8007b42:	b138      	cbz	r0, 8007b54 <_svfiprintf_r+0x150>
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	eba0 000a 	sub.w	r0, r0, sl
 8007b4a:	2240      	movs	r2, #64	@ 0x40
 8007b4c:	4082      	lsls	r2, r0
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	3401      	adds	r4, #1
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b58:	4824      	ldr	r0, [pc, #144]	@ (8007bec <_svfiprintf_r+0x1e8>)
 8007b5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b5e:	2206      	movs	r2, #6
 8007b60:	f7f8 fb3e 	bl	80001e0 <memchr>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d036      	beq.n	8007bd6 <_svfiprintf_r+0x1d2>
 8007b68:	4b21      	ldr	r3, [pc, #132]	@ (8007bf0 <_svfiprintf_r+0x1ec>)
 8007b6a:	bb1b      	cbnz	r3, 8007bb4 <_svfiprintf_r+0x1b0>
 8007b6c:	9b03      	ldr	r3, [sp, #12]
 8007b6e:	3307      	adds	r3, #7
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	3308      	adds	r3, #8
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7a:	4433      	add	r3, r6
 8007b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b7e:	e76a      	b.n	8007a56 <_svfiprintf_r+0x52>
 8007b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b84:	460c      	mov	r4, r1
 8007b86:	2001      	movs	r0, #1
 8007b88:	e7a8      	b.n	8007adc <_svfiprintf_r+0xd8>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	3401      	adds	r4, #1
 8007b8e:	9305      	str	r3, [sp, #20]
 8007b90:	4619      	mov	r1, r3
 8007b92:	f04f 0c0a 	mov.w	ip, #10
 8007b96:	4620      	mov	r0, r4
 8007b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b9c:	3a30      	subs	r2, #48	@ 0x30
 8007b9e:	2a09      	cmp	r2, #9
 8007ba0:	d903      	bls.n	8007baa <_svfiprintf_r+0x1a6>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0c6      	beq.n	8007b34 <_svfiprintf_r+0x130>
 8007ba6:	9105      	str	r1, [sp, #20]
 8007ba8:	e7c4      	b.n	8007b34 <_svfiprintf_r+0x130>
 8007baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bae:	4604      	mov	r4, r0
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e7f0      	b.n	8007b96 <_svfiprintf_r+0x192>
 8007bb4:	ab03      	add	r3, sp, #12
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	462a      	mov	r2, r5
 8007bba:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf4 <_svfiprintf_r+0x1f0>)
 8007bbc:	a904      	add	r1, sp, #16
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	f7fd fe94 	bl	80058ec <_printf_float>
 8007bc4:	1c42      	adds	r2, r0, #1
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	d1d6      	bne.n	8007b78 <_svfiprintf_r+0x174>
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	065b      	lsls	r3, r3, #25
 8007bce:	f53f af2d 	bmi.w	8007a2c <_svfiprintf_r+0x28>
 8007bd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bd4:	e72c      	b.n	8007a30 <_svfiprintf_r+0x2c>
 8007bd6:	ab03      	add	r3, sp, #12
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	462a      	mov	r2, r5
 8007bdc:	4b05      	ldr	r3, [pc, #20]	@ (8007bf4 <_svfiprintf_r+0x1f0>)
 8007bde:	a904      	add	r1, sp, #16
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7fe f91b 	bl	8005e1c <_printf_i>
 8007be6:	e7ed      	b.n	8007bc4 <_svfiprintf_r+0x1c0>
 8007be8:	080085fa 	.word	0x080085fa
 8007bec:	08008604 	.word	0x08008604
 8007bf0:	080058ed 	.word	0x080058ed
 8007bf4:	0800794d 	.word	0x0800794d
 8007bf8:	08008600 	.word	0x08008600

08007bfc <__sflush_r>:
 8007bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c04:	0716      	lsls	r6, r2, #28
 8007c06:	4605      	mov	r5, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	d454      	bmi.n	8007cb6 <__sflush_r+0xba>
 8007c0c:	684b      	ldr	r3, [r1, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dc02      	bgt.n	8007c18 <__sflush_r+0x1c>
 8007c12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dd48      	ble.n	8007caa <__sflush_r+0xae>
 8007c18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d045      	beq.n	8007caa <__sflush_r+0xae>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c24:	682f      	ldr	r7, [r5, #0]
 8007c26:	6a21      	ldr	r1, [r4, #32]
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	d030      	beq.n	8007c8e <__sflush_r+0x92>
 8007c2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	0759      	lsls	r1, r3, #29
 8007c32:	d505      	bpl.n	8007c40 <__sflush_r+0x44>
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	1ad2      	subs	r2, r2, r3
 8007c38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c3a:	b10b      	cbz	r3, 8007c40 <__sflush_r+0x44>
 8007c3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	2300      	movs	r3, #0
 8007c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c44:	6a21      	ldr	r1, [r4, #32]
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b0      	blx	r6
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	d106      	bne.n	8007c5e <__sflush_r+0x62>
 8007c50:	6829      	ldr	r1, [r5, #0]
 8007c52:	291d      	cmp	r1, #29
 8007c54:	d82b      	bhi.n	8007cae <__sflush_r+0xb2>
 8007c56:	4a2a      	ldr	r2, [pc, #168]	@ (8007d00 <__sflush_r+0x104>)
 8007c58:	40ca      	lsrs	r2, r1
 8007c5a:	07d6      	lsls	r6, r2, #31
 8007c5c:	d527      	bpl.n	8007cae <__sflush_r+0xb2>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	6062      	str	r2, [r4, #4]
 8007c62:	04d9      	lsls	r1, r3, #19
 8007c64:	6922      	ldr	r2, [r4, #16]
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	d504      	bpl.n	8007c74 <__sflush_r+0x78>
 8007c6a:	1c42      	adds	r2, r0, #1
 8007c6c:	d101      	bne.n	8007c72 <__sflush_r+0x76>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b903      	cbnz	r3, 8007c74 <__sflush_r+0x78>
 8007c72:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c76:	602f      	str	r7, [r5, #0]
 8007c78:	b1b9      	cbz	r1, 8007caa <__sflush_r+0xae>
 8007c7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	d002      	beq.n	8007c88 <__sflush_r+0x8c>
 8007c82:	4628      	mov	r0, r5
 8007c84:	f7ff f9e8 	bl	8007058 <_free_r>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c8c:	e00d      	b.n	8007caa <__sflush_r+0xae>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b0      	blx	r6
 8007c94:	4602      	mov	r2, r0
 8007c96:	1c50      	adds	r0, r2, #1
 8007c98:	d1c9      	bne.n	8007c2e <__sflush_r+0x32>
 8007c9a:	682b      	ldr	r3, [r5, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0c6      	beq.n	8007c2e <__sflush_r+0x32>
 8007ca0:	2b1d      	cmp	r3, #29
 8007ca2:	d001      	beq.n	8007ca8 <__sflush_r+0xac>
 8007ca4:	2b16      	cmp	r3, #22
 8007ca6:	d11e      	bne.n	8007ce6 <__sflush_r+0xea>
 8007ca8:	602f      	str	r7, [r5, #0]
 8007caa:	2000      	movs	r0, #0
 8007cac:	e022      	b.n	8007cf4 <__sflush_r+0xf8>
 8007cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	e01b      	b.n	8007cee <__sflush_r+0xf2>
 8007cb6:	690f      	ldr	r7, [r1, #16]
 8007cb8:	2f00      	cmp	r7, #0
 8007cba:	d0f6      	beq.n	8007caa <__sflush_r+0xae>
 8007cbc:	0793      	lsls	r3, r2, #30
 8007cbe:	680e      	ldr	r6, [r1, #0]
 8007cc0:	bf08      	it	eq
 8007cc2:	694b      	ldreq	r3, [r1, #20]
 8007cc4:	600f      	str	r7, [r1, #0]
 8007cc6:	bf18      	it	ne
 8007cc8:	2300      	movne	r3, #0
 8007cca:	eba6 0807 	sub.w	r8, r6, r7
 8007cce:	608b      	str	r3, [r1, #8]
 8007cd0:	f1b8 0f00 	cmp.w	r8, #0
 8007cd4:	dde9      	ble.n	8007caa <__sflush_r+0xae>
 8007cd6:	6a21      	ldr	r1, [r4, #32]
 8007cd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007cda:	4643      	mov	r3, r8
 8007cdc:	463a      	mov	r2, r7
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b0      	blx	r6
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	dc08      	bgt.n	8007cf8 <__sflush_r+0xfc>
 8007ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf8:	4407      	add	r7, r0
 8007cfa:	eba8 0800 	sub.w	r8, r8, r0
 8007cfe:	e7e7      	b.n	8007cd0 <__sflush_r+0xd4>
 8007d00:	20400001 	.word	0x20400001

08007d04 <_fflush_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	690b      	ldr	r3, [r1, #16]
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b913      	cbnz	r3, 8007d14 <_fflush_r+0x10>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	4628      	mov	r0, r5
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	b118      	cbz	r0, 8007d1e <_fflush_r+0x1a>
 8007d16:	6a03      	ldr	r3, [r0, #32]
 8007d18:	b90b      	cbnz	r3, 8007d1e <_fflush_r+0x1a>
 8007d1a:	f7fe fa29 	bl	8006170 <__sinit>
 8007d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0f3      	beq.n	8007d0e <_fflush_r+0xa>
 8007d26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d28:	07d0      	lsls	r0, r2, #31
 8007d2a:	d404      	bmi.n	8007d36 <_fflush_r+0x32>
 8007d2c:	0599      	lsls	r1, r3, #22
 8007d2e:	d402      	bmi.n	8007d36 <_fflush_r+0x32>
 8007d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d32:	f7fe fb36 	bl	80063a2 <__retarget_lock_acquire_recursive>
 8007d36:	4628      	mov	r0, r5
 8007d38:	4621      	mov	r1, r4
 8007d3a:	f7ff ff5f 	bl	8007bfc <__sflush_r>
 8007d3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d40:	07da      	lsls	r2, r3, #31
 8007d42:	4605      	mov	r5, r0
 8007d44:	d4e4      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	059b      	lsls	r3, r3, #22
 8007d4a:	d4e1      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d4e:	f7fe fb29 	bl	80063a4 <__retarget_lock_release_recursive>
 8007d52:	e7dd      	b.n	8007d10 <_fflush_r+0xc>

08007d54 <memmove>:
 8007d54:	4288      	cmp	r0, r1
 8007d56:	b510      	push	{r4, lr}
 8007d58:	eb01 0402 	add.w	r4, r1, r2
 8007d5c:	d902      	bls.n	8007d64 <memmove+0x10>
 8007d5e:	4284      	cmp	r4, r0
 8007d60:	4623      	mov	r3, r4
 8007d62:	d807      	bhi.n	8007d74 <memmove+0x20>
 8007d64:	1e43      	subs	r3, r0, #1
 8007d66:	42a1      	cmp	r1, r4
 8007d68:	d008      	beq.n	8007d7c <memmove+0x28>
 8007d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d72:	e7f8      	b.n	8007d66 <memmove+0x12>
 8007d74:	4402      	add	r2, r0
 8007d76:	4601      	mov	r1, r0
 8007d78:	428a      	cmp	r2, r1
 8007d7a:	d100      	bne.n	8007d7e <memmove+0x2a>
 8007d7c:	bd10      	pop	{r4, pc}
 8007d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d86:	e7f7      	b.n	8007d78 <memmove+0x24>

08007d88 <_sbrk_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4d06      	ldr	r5, [pc, #24]	@ (8007da4 <_sbrk_r+0x1c>)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	f7fa fb00 	bl	8002398 <_sbrk>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_sbrk_r+0x1a>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_sbrk_r+0x1a>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	200004ac 	.word	0x200004ac

08007da8 <memcpy>:
 8007da8:	440a      	add	r2, r1
 8007daa:	4291      	cmp	r1, r2
 8007dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8007db0:	d100      	bne.n	8007db4 <memcpy+0xc>
 8007db2:	4770      	bx	lr
 8007db4:	b510      	push	{r4, lr}
 8007db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dbe:	4291      	cmp	r1, r2
 8007dc0:	d1f9      	bne.n	8007db6 <memcpy+0xe>
 8007dc2:	bd10      	pop	{r4, pc}

08007dc4 <__assert_func>:
 8007dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dc6:	4614      	mov	r4, r2
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4b09      	ldr	r3, [pc, #36]	@ (8007df0 <__assert_func+0x2c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4605      	mov	r5, r0
 8007dd0:	68d8      	ldr	r0, [r3, #12]
 8007dd2:	b14c      	cbz	r4, 8007de8 <__assert_func+0x24>
 8007dd4:	4b07      	ldr	r3, [pc, #28]	@ (8007df4 <__assert_func+0x30>)
 8007dd6:	9100      	str	r1, [sp, #0]
 8007dd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ddc:	4906      	ldr	r1, [pc, #24]	@ (8007df8 <__assert_func+0x34>)
 8007dde:	462b      	mov	r3, r5
 8007de0:	f000 f870 	bl	8007ec4 <fiprintf>
 8007de4:	f000 f880 	bl	8007ee8 <abort>
 8007de8:	4b04      	ldr	r3, [pc, #16]	@ (8007dfc <__assert_func+0x38>)
 8007dea:	461c      	mov	r4, r3
 8007dec:	e7f3      	b.n	8007dd6 <__assert_func+0x12>
 8007dee:	bf00      	nop
 8007df0:	20000018 	.word	0x20000018
 8007df4:	08008615 	.word	0x08008615
 8007df8:	08008622 	.word	0x08008622
 8007dfc:	08008650 	.word	0x08008650

08007e00 <_calloc_r>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	fba1 5402 	umull	r5, r4, r1, r2
 8007e06:	b934      	cbnz	r4, 8007e16 <_calloc_r+0x16>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7ff f999 	bl	8007140 <_malloc_r>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	b928      	cbnz	r0, 8007e1e <_calloc_r+0x1e>
 8007e12:	4630      	mov	r0, r6
 8007e14:	bd70      	pop	{r4, r5, r6, pc}
 8007e16:	220c      	movs	r2, #12
 8007e18:	6002      	str	r2, [r0, #0]
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	e7f9      	b.n	8007e12 <_calloc_r+0x12>
 8007e1e:	462a      	mov	r2, r5
 8007e20:	4621      	mov	r1, r4
 8007e22:	f7fe fa40 	bl	80062a6 <memset>
 8007e26:	e7f4      	b.n	8007e12 <_calloc_r+0x12>

08007e28 <__ascii_mbtowc>:
 8007e28:	b082      	sub	sp, #8
 8007e2a:	b901      	cbnz	r1, 8007e2e <__ascii_mbtowc+0x6>
 8007e2c:	a901      	add	r1, sp, #4
 8007e2e:	b142      	cbz	r2, 8007e42 <__ascii_mbtowc+0x1a>
 8007e30:	b14b      	cbz	r3, 8007e46 <__ascii_mbtowc+0x1e>
 8007e32:	7813      	ldrb	r3, [r2, #0]
 8007e34:	600b      	str	r3, [r1, #0]
 8007e36:	7812      	ldrb	r2, [r2, #0]
 8007e38:	1e10      	subs	r0, r2, #0
 8007e3a:	bf18      	it	ne
 8007e3c:	2001      	movne	r0, #1
 8007e3e:	b002      	add	sp, #8
 8007e40:	4770      	bx	lr
 8007e42:	4610      	mov	r0, r2
 8007e44:	e7fb      	b.n	8007e3e <__ascii_mbtowc+0x16>
 8007e46:	f06f 0001 	mvn.w	r0, #1
 8007e4a:	e7f8      	b.n	8007e3e <__ascii_mbtowc+0x16>

08007e4c <_realloc_r>:
 8007e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e50:	4607      	mov	r7, r0
 8007e52:	4614      	mov	r4, r2
 8007e54:	460d      	mov	r5, r1
 8007e56:	b921      	cbnz	r1, 8007e62 <_realloc_r+0x16>
 8007e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	f7ff b96f 	b.w	8007140 <_malloc_r>
 8007e62:	b92a      	cbnz	r2, 8007e70 <_realloc_r+0x24>
 8007e64:	f7ff f8f8 	bl	8007058 <_free_r>
 8007e68:	4625      	mov	r5, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e70:	f000 f841 	bl	8007ef6 <_malloc_usable_size_r>
 8007e74:	4284      	cmp	r4, r0
 8007e76:	4606      	mov	r6, r0
 8007e78:	d802      	bhi.n	8007e80 <_realloc_r+0x34>
 8007e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e7e:	d8f4      	bhi.n	8007e6a <_realloc_r+0x1e>
 8007e80:	4621      	mov	r1, r4
 8007e82:	4638      	mov	r0, r7
 8007e84:	f7ff f95c 	bl	8007140 <_malloc_r>
 8007e88:	4680      	mov	r8, r0
 8007e8a:	b908      	cbnz	r0, 8007e90 <_realloc_r+0x44>
 8007e8c:	4645      	mov	r5, r8
 8007e8e:	e7ec      	b.n	8007e6a <_realloc_r+0x1e>
 8007e90:	42b4      	cmp	r4, r6
 8007e92:	4622      	mov	r2, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	bf28      	it	cs
 8007e98:	4632      	movcs	r2, r6
 8007e9a:	f7ff ff85 	bl	8007da8 <memcpy>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff f8d9 	bl	8007058 <_free_r>
 8007ea6:	e7f1      	b.n	8007e8c <_realloc_r+0x40>

08007ea8 <__ascii_wctomb>:
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4608      	mov	r0, r1
 8007eac:	b141      	cbz	r1, 8007ec0 <__ascii_wctomb+0x18>
 8007eae:	2aff      	cmp	r2, #255	@ 0xff
 8007eb0:	d904      	bls.n	8007ebc <__ascii_wctomb+0x14>
 8007eb2:	228a      	movs	r2, #138	@ 0x8a
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eba:	4770      	bx	lr
 8007ebc:	700a      	strb	r2, [r1, #0]
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	4770      	bx	lr
	...

08007ec4 <fiprintf>:
 8007ec4:	b40e      	push	{r1, r2, r3}
 8007ec6:	b503      	push	{r0, r1, lr}
 8007ec8:	4601      	mov	r1, r0
 8007eca:	ab03      	add	r3, sp, #12
 8007ecc:	4805      	ldr	r0, [pc, #20]	@ (8007ee4 <fiprintf+0x20>)
 8007ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed2:	6800      	ldr	r0, [r0, #0]
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	f000 f83f 	bl	8007f58 <_vfiprintf_r>
 8007eda:	b002      	add	sp, #8
 8007edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ee0:	b003      	add	sp, #12
 8007ee2:	4770      	bx	lr
 8007ee4:	20000018 	.word	0x20000018

08007ee8 <abort>:
 8007ee8:	b508      	push	{r3, lr}
 8007eea:	2006      	movs	r0, #6
 8007eec:	f000 fa08 	bl	8008300 <raise>
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	f7fa f9d9 	bl	80022a8 <_exit>

08007ef6 <_malloc_usable_size_r>:
 8007ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007efa:	1f18      	subs	r0, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfbc      	itt	lt
 8007f00:	580b      	ldrlt	r3, [r1, r0]
 8007f02:	18c0      	addlt	r0, r0, r3
 8007f04:	4770      	bx	lr

08007f06 <__sfputc_r>:
 8007f06:	6893      	ldr	r3, [r2, #8]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	b410      	push	{r4}
 8007f0e:	6093      	str	r3, [r2, #8]
 8007f10:	da08      	bge.n	8007f24 <__sfputc_r+0x1e>
 8007f12:	6994      	ldr	r4, [r2, #24]
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	db01      	blt.n	8007f1c <__sfputc_r+0x16>
 8007f18:	290a      	cmp	r1, #10
 8007f1a:	d103      	bne.n	8007f24 <__sfputc_r+0x1e>
 8007f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f20:	f000 b932 	b.w	8008188 <__swbuf_r>
 8007f24:	6813      	ldr	r3, [r2, #0]
 8007f26:	1c58      	adds	r0, r3, #1
 8007f28:	6010      	str	r0, [r2, #0]
 8007f2a:	7019      	strb	r1, [r3, #0]
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <__sfputs_r>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	4606      	mov	r6, r0
 8007f38:	460f      	mov	r7, r1
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	18d5      	adds	r5, r2, r3
 8007f3e:	42ac      	cmp	r4, r5
 8007f40:	d101      	bne.n	8007f46 <__sfputs_r+0x12>
 8007f42:	2000      	movs	r0, #0
 8007f44:	e007      	b.n	8007f56 <__sfputs_r+0x22>
 8007f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7ff ffda 	bl	8007f06 <__sfputc_r>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	d1f3      	bne.n	8007f3e <__sfputs_r+0xa>
 8007f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f58 <_vfiprintf_r>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	460d      	mov	r5, r1
 8007f5e:	b09d      	sub	sp, #116	@ 0x74
 8007f60:	4614      	mov	r4, r2
 8007f62:	4698      	mov	r8, r3
 8007f64:	4606      	mov	r6, r0
 8007f66:	b118      	cbz	r0, 8007f70 <_vfiprintf_r+0x18>
 8007f68:	6a03      	ldr	r3, [r0, #32]
 8007f6a:	b90b      	cbnz	r3, 8007f70 <_vfiprintf_r+0x18>
 8007f6c:	f7fe f900 	bl	8006170 <__sinit>
 8007f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f72:	07d9      	lsls	r1, r3, #31
 8007f74:	d405      	bmi.n	8007f82 <_vfiprintf_r+0x2a>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_vfiprintf_r+0x2a>
 8007f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f7e:	f7fe fa10 	bl	80063a2 <__retarget_lock_acquire_recursive>
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	071b      	lsls	r3, r3, #28
 8007f86:	d501      	bpl.n	8007f8c <_vfiprintf_r+0x34>
 8007f88:	692b      	ldr	r3, [r5, #16]
 8007f8a:	b99b      	cbnz	r3, 8007fb4 <_vfiprintf_r+0x5c>
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f000 f938 	bl	8008204 <__swsetup_r>
 8007f94:	b170      	cbz	r0, 8007fb4 <_vfiprintf_r+0x5c>
 8007f96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f98:	07dc      	lsls	r4, r3, #31
 8007f9a:	d504      	bpl.n	8007fa6 <_vfiprintf_r+0x4e>
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	b01d      	add	sp, #116	@ 0x74
 8007fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa6:	89ab      	ldrh	r3, [r5, #12]
 8007fa8:	0598      	lsls	r0, r3, #22
 8007faa:	d4f7      	bmi.n	8007f9c <_vfiprintf_r+0x44>
 8007fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fae:	f7fe f9f9 	bl	80063a4 <__retarget_lock_release_recursive>
 8007fb2:	e7f3      	b.n	8007f9c <_vfiprintf_r+0x44>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb8:	2320      	movs	r3, #32
 8007fba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fc2:	2330      	movs	r3, #48	@ 0x30
 8007fc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008174 <_vfiprintf_r+0x21c>
 8007fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fcc:	f04f 0901 	mov.w	r9, #1
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	469a      	mov	sl, r3
 8007fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fd8:	b10a      	cbz	r2, 8007fde <_vfiprintf_r+0x86>
 8007fda:	2a25      	cmp	r2, #37	@ 0x25
 8007fdc:	d1f9      	bne.n	8007fd2 <_vfiprintf_r+0x7a>
 8007fde:	ebba 0b04 	subs.w	fp, sl, r4
 8007fe2:	d00b      	beq.n	8007ffc <_vfiprintf_r+0xa4>
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff ffa2 	bl	8007f34 <__sfputs_r>
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	f000 80a7 	beq.w	8008144 <_vfiprintf_r+0x1ec>
 8007ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff8:	445a      	add	r2, fp
 8007ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 809f 	beq.w	8008144 <_vfiprintf_r+0x1ec>
 8008006:	2300      	movs	r3, #0
 8008008:	f04f 32ff 	mov.w	r2, #4294967295
 800800c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008010:	f10a 0a01 	add.w	sl, sl, #1
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800801c:	931a      	str	r3, [sp, #104]	@ 0x68
 800801e:	4654      	mov	r4, sl
 8008020:	2205      	movs	r2, #5
 8008022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008026:	4853      	ldr	r0, [pc, #332]	@ (8008174 <_vfiprintf_r+0x21c>)
 8008028:	f7f8 f8da 	bl	80001e0 <memchr>
 800802c:	9a04      	ldr	r2, [sp, #16]
 800802e:	b9d8      	cbnz	r0, 8008068 <_vfiprintf_r+0x110>
 8008030:	06d1      	lsls	r1, r2, #27
 8008032:	bf44      	itt	mi
 8008034:	2320      	movmi	r3, #32
 8008036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800803a:	0713      	lsls	r3, r2, #28
 800803c:	bf44      	itt	mi
 800803e:	232b      	movmi	r3, #43	@ 0x2b
 8008040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008044:	f89a 3000 	ldrb.w	r3, [sl]
 8008048:	2b2a      	cmp	r3, #42	@ 0x2a
 800804a:	d015      	beq.n	8008078 <_vfiprintf_r+0x120>
 800804c:	9a07      	ldr	r2, [sp, #28]
 800804e:	4654      	mov	r4, sl
 8008050:	2000      	movs	r0, #0
 8008052:	f04f 0c0a 	mov.w	ip, #10
 8008056:	4621      	mov	r1, r4
 8008058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800805c:	3b30      	subs	r3, #48	@ 0x30
 800805e:	2b09      	cmp	r3, #9
 8008060:	d94b      	bls.n	80080fa <_vfiprintf_r+0x1a2>
 8008062:	b1b0      	cbz	r0, 8008092 <_vfiprintf_r+0x13a>
 8008064:	9207      	str	r2, [sp, #28]
 8008066:	e014      	b.n	8008092 <_vfiprintf_r+0x13a>
 8008068:	eba0 0308 	sub.w	r3, r0, r8
 800806c:	fa09 f303 	lsl.w	r3, r9, r3
 8008070:	4313      	orrs	r3, r2
 8008072:	9304      	str	r3, [sp, #16]
 8008074:	46a2      	mov	sl, r4
 8008076:	e7d2      	b.n	800801e <_vfiprintf_r+0xc6>
 8008078:	9b03      	ldr	r3, [sp, #12]
 800807a:	1d19      	adds	r1, r3, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	9103      	str	r1, [sp, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	bfbb      	ittet	lt
 8008084:	425b      	neglt	r3, r3
 8008086:	f042 0202 	orrlt.w	r2, r2, #2
 800808a:	9307      	strge	r3, [sp, #28]
 800808c:	9307      	strlt	r3, [sp, #28]
 800808e:	bfb8      	it	lt
 8008090:	9204      	strlt	r2, [sp, #16]
 8008092:	7823      	ldrb	r3, [r4, #0]
 8008094:	2b2e      	cmp	r3, #46	@ 0x2e
 8008096:	d10a      	bne.n	80080ae <_vfiprintf_r+0x156>
 8008098:	7863      	ldrb	r3, [r4, #1]
 800809a:	2b2a      	cmp	r3, #42	@ 0x2a
 800809c:	d132      	bne.n	8008104 <_vfiprintf_r+0x1ac>
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	1d1a      	adds	r2, r3, #4
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	9203      	str	r2, [sp, #12]
 80080a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080aa:	3402      	adds	r4, #2
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008184 <_vfiprintf_r+0x22c>
 80080b2:	7821      	ldrb	r1, [r4, #0]
 80080b4:	2203      	movs	r2, #3
 80080b6:	4650      	mov	r0, sl
 80080b8:	f7f8 f892 	bl	80001e0 <memchr>
 80080bc:	b138      	cbz	r0, 80080ce <_vfiprintf_r+0x176>
 80080be:	9b04      	ldr	r3, [sp, #16]
 80080c0:	eba0 000a 	sub.w	r0, r0, sl
 80080c4:	2240      	movs	r2, #64	@ 0x40
 80080c6:	4082      	lsls	r2, r0
 80080c8:	4313      	orrs	r3, r2
 80080ca:	3401      	adds	r4, #1
 80080cc:	9304      	str	r3, [sp, #16]
 80080ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d2:	4829      	ldr	r0, [pc, #164]	@ (8008178 <_vfiprintf_r+0x220>)
 80080d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080d8:	2206      	movs	r2, #6
 80080da:	f7f8 f881 	bl	80001e0 <memchr>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d03f      	beq.n	8008162 <_vfiprintf_r+0x20a>
 80080e2:	4b26      	ldr	r3, [pc, #152]	@ (800817c <_vfiprintf_r+0x224>)
 80080e4:	bb1b      	cbnz	r3, 800812e <_vfiprintf_r+0x1d6>
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	3307      	adds	r3, #7
 80080ea:	f023 0307 	bic.w	r3, r3, #7
 80080ee:	3308      	adds	r3, #8
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f4:	443b      	add	r3, r7
 80080f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080f8:	e76a      	b.n	8007fd0 <_vfiprintf_r+0x78>
 80080fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80080fe:	460c      	mov	r4, r1
 8008100:	2001      	movs	r0, #1
 8008102:	e7a8      	b.n	8008056 <_vfiprintf_r+0xfe>
 8008104:	2300      	movs	r3, #0
 8008106:	3401      	adds	r4, #1
 8008108:	9305      	str	r3, [sp, #20]
 800810a:	4619      	mov	r1, r3
 800810c:	f04f 0c0a 	mov.w	ip, #10
 8008110:	4620      	mov	r0, r4
 8008112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008116:	3a30      	subs	r2, #48	@ 0x30
 8008118:	2a09      	cmp	r2, #9
 800811a:	d903      	bls.n	8008124 <_vfiprintf_r+0x1cc>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0c6      	beq.n	80080ae <_vfiprintf_r+0x156>
 8008120:	9105      	str	r1, [sp, #20]
 8008122:	e7c4      	b.n	80080ae <_vfiprintf_r+0x156>
 8008124:	fb0c 2101 	mla	r1, ip, r1, r2
 8008128:	4604      	mov	r4, r0
 800812a:	2301      	movs	r3, #1
 800812c:	e7f0      	b.n	8008110 <_vfiprintf_r+0x1b8>
 800812e:	ab03      	add	r3, sp, #12
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	462a      	mov	r2, r5
 8008134:	4b12      	ldr	r3, [pc, #72]	@ (8008180 <_vfiprintf_r+0x228>)
 8008136:	a904      	add	r1, sp, #16
 8008138:	4630      	mov	r0, r6
 800813a:	f7fd fbd7 	bl	80058ec <_printf_float>
 800813e:	4607      	mov	r7, r0
 8008140:	1c78      	adds	r0, r7, #1
 8008142:	d1d6      	bne.n	80080f2 <_vfiprintf_r+0x19a>
 8008144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008146:	07d9      	lsls	r1, r3, #31
 8008148:	d405      	bmi.n	8008156 <_vfiprintf_r+0x1fe>
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	059a      	lsls	r2, r3, #22
 800814e:	d402      	bmi.n	8008156 <_vfiprintf_r+0x1fe>
 8008150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008152:	f7fe f927 	bl	80063a4 <__retarget_lock_release_recursive>
 8008156:	89ab      	ldrh	r3, [r5, #12]
 8008158:	065b      	lsls	r3, r3, #25
 800815a:	f53f af1f 	bmi.w	8007f9c <_vfiprintf_r+0x44>
 800815e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008160:	e71e      	b.n	8007fa0 <_vfiprintf_r+0x48>
 8008162:	ab03      	add	r3, sp, #12
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	462a      	mov	r2, r5
 8008168:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <_vfiprintf_r+0x228>)
 800816a:	a904      	add	r1, sp, #16
 800816c:	4630      	mov	r0, r6
 800816e:	f7fd fe55 	bl	8005e1c <_printf_i>
 8008172:	e7e4      	b.n	800813e <_vfiprintf_r+0x1e6>
 8008174:	080085fa 	.word	0x080085fa
 8008178:	08008604 	.word	0x08008604
 800817c:	080058ed 	.word	0x080058ed
 8008180:	08007f35 	.word	0x08007f35
 8008184:	08008600 	.word	0x08008600

08008188 <__swbuf_r>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	460e      	mov	r6, r1
 800818c:	4614      	mov	r4, r2
 800818e:	4605      	mov	r5, r0
 8008190:	b118      	cbz	r0, 800819a <__swbuf_r+0x12>
 8008192:	6a03      	ldr	r3, [r0, #32]
 8008194:	b90b      	cbnz	r3, 800819a <__swbuf_r+0x12>
 8008196:	f7fd ffeb 	bl	8006170 <__sinit>
 800819a:	69a3      	ldr	r3, [r4, #24]
 800819c:	60a3      	str	r3, [r4, #8]
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	071a      	lsls	r2, r3, #28
 80081a2:	d501      	bpl.n	80081a8 <__swbuf_r+0x20>
 80081a4:	6923      	ldr	r3, [r4, #16]
 80081a6:	b943      	cbnz	r3, 80081ba <__swbuf_r+0x32>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 f82a 	bl	8008204 <__swsetup_r>
 80081b0:	b118      	cbz	r0, 80081ba <__swbuf_r+0x32>
 80081b2:	f04f 37ff 	mov.w	r7, #4294967295
 80081b6:	4638      	mov	r0, r7
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	6922      	ldr	r2, [r4, #16]
 80081be:	1a98      	subs	r0, r3, r2
 80081c0:	6963      	ldr	r3, [r4, #20]
 80081c2:	b2f6      	uxtb	r6, r6
 80081c4:	4283      	cmp	r3, r0
 80081c6:	4637      	mov	r7, r6
 80081c8:	dc05      	bgt.n	80081d6 <__swbuf_r+0x4e>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f7ff fd99 	bl	8007d04 <_fflush_r>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d1ed      	bne.n	80081b2 <__swbuf_r+0x2a>
 80081d6:	68a3      	ldr	r3, [r4, #8]
 80081d8:	3b01      	subs	r3, #1
 80081da:	60a3      	str	r3, [r4, #8]
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	6022      	str	r2, [r4, #0]
 80081e2:	701e      	strb	r6, [r3, #0]
 80081e4:	6962      	ldr	r2, [r4, #20]
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d004      	beq.n	80081f6 <__swbuf_r+0x6e>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	07db      	lsls	r3, r3, #31
 80081f0:	d5e1      	bpl.n	80081b6 <__swbuf_r+0x2e>
 80081f2:	2e0a      	cmp	r6, #10
 80081f4:	d1df      	bne.n	80081b6 <__swbuf_r+0x2e>
 80081f6:	4621      	mov	r1, r4
 80081f8:	4628      	mov	r0, r5
 80081fa:	f7ff fd83 	bl	8007d04 <_fflush_r>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d0d9      	beq.n	80081b6 <__swbuf_r+0x2e>
 8008202:	e7d6      	b.n	80081b2 <__swbuf_r+0x2a>

08008204 <__swsetup_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4b29      	ldr	r3, [pc, #164]	@ (80082ac <__swsetup_r+0xa8>)
 8008208:	4605      	mov	r5, r0
 800820a:	6818      	ldr	r0, [r3, #0]
 800820c:	460c      	mov	r4, r1
 800820e:	b118      	cbz	r0, 8008218 <__swsetup_r+0x14>
 8008210:	6a03      	ldr	r3, [r0, #32]
 8008212:	b90b      	cbnz	r3, 8008218 <__swsetup_r+0x14>
 8008214:	f7fd ffac 	bl	8006170 <__sinit>
 8008218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821c:	0719      	lsls	r1, r3, #28
 800821e:	d422      	bmi.n	8008266 <__swsetup_r+0x62>
 8008220:	06da      	lsls	r2, r3, #27
 8008222:	d407      	bmi.n	8008234 <__swsetup_r+0x30>
 8008224:	2209      	movs	r2, #9
 8008226:	602a      	str	r2, [r5, #0]
 8008228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	f04f 30ff 	mov.w	r0, #4294967295
 8008232:	e033      	b.n	800829c <__swsetup_r+0x98>
 8008234:	0758      	lsls	r0, r3, #29
 8008236:	d512      	bpl.n	800825e <__swsetup_r+0x5a>
 8008238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800823a:	b141      	cbz	r1, 800824e <__swsetup_r+0x4a>
 800823c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008240:	4299      	cmp	r1, r3
 8008242:	d002      	beq.n	800824a <__swsetup_r+0x46>
 8008244:	4628      	mov	r0, r5
 8008246:	f7fe ff07 	bl	8007058 <_free_r>
 800824a:	2300      	movs	r3, #0
 800824c:	6363      	str	r3, [r4, #52]	@ 0x34
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	2300      	movs	r3, #0
 8008258:	6063      	str	r3, [r4, #4]
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	f043 0308 	orr.w	r3, r3, #8
 8008264:	81a3      	strh	r3, [r4, #12]
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	b94b      	cbnz	r3, 800827e <__swsetup_r+0x7a>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008274:	d003      	beq.n	800827e <__swsetup_r+0x7a>
 8008276:	4621      	mov	r1, r4
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f883 	bl	8008384 <__smakebuf_r>
 800827e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008282:	f013 0201 	ands.w	r2, r3, #1
 8008286:	d00a      	beq.n	800829e <__swsetup_r+0x9a>
 8008288:	2200      	movs	r2, #0
 800828a:	60a2      	str	r2, [r4, #8]
 800828c:	6962      	ldr	r2, [r4, #20]
 800828e:	4252      	negs	r2, r2
 8008290:	61a2      	str	r2, [r4, #24]
 8008292:	6922      	ldr	r2, [r4, #16]
 8008294:	b942      	cbnz	r2, 80082a8 <__swsetup_r+0xa4>
 8008296:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800829a:	d1c5      	bne.n	8008228 <__swsetup_r+0x24>
 800829c:	bd38      	pop	{r3, r4, r5, pc}
 800829e:	0799      	lsls	r1, r3, #30
 80082a0:	bf58      	it	pl
 80082a2:	6962      	ldrpl	r2, [r4, #20]
 80082a4:	60a2      	str	r2, [r4, #8]
 80082a6:	e7f4      	b.n	8008292 <__swsetup_r+0x8e>
 80082a8:	2000      	movs	r0, #0
 80082aa:	e7f7      	b.n	800829c <__swsetup_r+0x98>
 80082ac:	20000018 	.word	0x20000018

080082b0 <_raise_r>:
 80082b0:	291f      	cmp	r1, #31
 80082b2:	b538      	push	{r3, r4, r5, lr}
 80082b4:	4605      	mov	r5, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	d904      	bls.n	80082c4 <_raise_r+0x14>
 80082ba:	2316      	movs	r3, #22
 80082bc:	6003      	str	r3, [r0, #0]
 80082be:	f04f 30ff 	mov.w	r0, #4294967295
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80082c6:	b112      	cbz	r2, 80082ce <_raise_r+0x1e>
 80082c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082cc:	b94b      	cbnz	r3, 80082e2 <_raise_r+0x32>
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 f830 	bl	8008334 <_getpid_r>
 80082d4:	4622      	mov	r2, r4
 80082d6:	4601      	mov	r1, r0
 80082d8:	4628      	mov	r0, r5
 80082da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082de:	f000 b817 	b.w	8008310 <_kill_r>
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d00a      	beq.n	80082fc <_raise_r+0x4c>
 80082e6:	1c59      	adds	r1, r3, #1
 80082e8:	d103      	bne.n	80082f2 <_raise_r+0x42>
 80082ea:	2316      	movs	r3, #22
 80082ec:	6003      	str	r3, [r0, #0]
 80082ee:	2001      	movs	r0, #1
 80082f0:	e7e7      	b.n	80082c2 <_raise_r+0x12>
 80082f2:	2100      	movs	r1, #0
 80082f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082f8:	4620      	mov	r0, r4
 80082fa:	4798      	blx	r3
 80082fc:	2000      	movs	r0, #0
 80082fe:	e7e0      	b.n	80082c2 <_raise_r+0x12>

08008300 <raise>:
 8008300:	4b02      	ldr	r3, [pc, #8]	@ (800830c <raise+0xc>)
 8008302:	4601      	mov	r1, r0
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	f7ff bfd3 	b.w	80082b0 <_raise_r>
 800830a:	bf00      	nop
 800830c:	20000018 	.word	0x20000018

08008310 <_kill_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d07      	ldr	r5, [pc, #28]	@ (8008330 <_kill_r+0x20>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	4611      	mov	r1, r2
 800831c:	602b      	str	r3, [r5, #0]
 800831e:	f7f9 ffb3 	bl	8002288 <_kill>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	d102      	bne.n	800832c <_kill_r+0x1c>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	b103      	cbz	r3, 800832c <_kill_r+0x1c>
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	bd38      	pop	{r3, r4, r5, pc}
 800832e:	bf00      	nop
 8008330:	200004ac 	.word	0x200004ac

08008334 <_getpid_r>:
 8008334:	f7f9 bfa0 	b.w	8002278 <_getpid>

08008338 <__swhatbuf_r>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	460c      	mov	r4, r1
 800833c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008340:	2900      	cmp	r1, #0
 8008342:	b096      	sub	sp, #88	@ 0x58
 8008344:	4615      	mov	r5, r2
 8008346:	461e      	mov	r6, r3
 8008348:	da0d      	bge.n	8008366 <__swhatbuf_r+0x2e>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008350:	f04f 0100 	mov.w	r1, #0
 8008354:	bf14      	ite	ne
 8008356:	2340      	movne	r3, #64	@ 0x40
 8008358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800835c:	2000      	movs	r0, #0
 800835e:	6031      	str	r1, [r6, #0]
 8008360:	602b      	str	r3, [r5, #0]
 8008362:	b016      	add	sp, #88	@ 0x58
 8008364:	bd70      	pop	{r4, r5, r6, pc}
 8008366:	466a      	mov	r2, sp
 8008368:	f000 f848 	bl	80083fc <_fstat_r>
 800836c:	2800      	cmp	r0, #0
 800836e:	dbec      	blt.n	800834a <__swhatbuf_r+0x12>
 8008370:	9901      	ldr	r1, [sp, #4]
 8008372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800837a:	4259      	negs	r1, r3
 800837c:	4159      	adcs	r1, r3
 800837e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008382:	e7eb      	b.n	800835c <__swhatbuf_r+0x24>

08008384 <__smakebuf_r>:
 8008384:	898b      	ldrh	r3, [r1, #12]
 8008386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008388:	079d      	lsls	r5, r3, #30
 800838a:	4606      	mov	r6, r0
 800838c:	460c      	mov	r4, r1
 800838e:	d507      	bpl.n	80083a0 <__smakebuf_r+0x1c>
 8008390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	6123      	str	r3, [r4, #16]
 8008398:	2301      	movs	r3, #1
 800839a:	6163      	str	r3, [r4, #20]
 800839c:	b003      	add	sp, #12
 800839e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a0:	ab01      	add	r3, sp, #4
 80083a2:	466a      	mov	r2, sp
 80083a4:	f7ff ffc8 	bl	8008338 <__swhatbuf_r>
 80083a8:	9f00      	ldr	r7, [sp, #0]
 80083aa:	4605      	mov	r5, r0
 80083ac:	4639      	mov	r1, r7
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7fe fec6 	bl	8007140 <_malloc_r>
 80083b4:	b948      	cbnz	r0, 80083ca <__smakebuf_r+0x46>
 80083b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ba:	059a      	lsls	r2, r3, #22
 80083bc:	d4ee      	bmi.n	800839c <__smakebuf_r+0x18>
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	f043 0302 	orr.w	r3, r3, #2
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	e7e2      	b.n	8008390 <__smakebuf_r+0xc>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	6020      	str	r0, [r4, #0]
 80083ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d2:	81a3      	strh	r3, [r4, #12]
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083da:	b15b      	cbz	r3, 80083f4 <__smakebuf_r+0x70>
 80083dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083e0:	4630      	mov	r0, r6
 80083e2:	f000 f81d 	bl	8008420 <_isatty_r>
 80083e6:	b128      	cbz	r0, 80083f4 <__smakebuf_r+0x70>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f023 0303 	bic.w	r3, r3, #3
 80083ee:	f043 0301 	orr.w	r3, r3, #1
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	431d      	orrs	r5, r3
 80083f8:	81a5      	strh	r5, [r4, #12]
 80083fa:	e7cf      	b.n	800839c <__smakebuf_r+0x18>

080083fc <_fstat_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d07      	ldr	r5, [pc, #28]	@ (800841c <_fstat_r+0x20>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	4611      	mov	r1, r2
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	f7f9 ff9d 	bl	8002348 <_fstat>
 800840e:	1c43      	adds	r3, r0, #1
 8008410:	d102      	bne.n	8008418 <_fstat_r+0x1c>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	b103      	cbz	r3, 8008418 <_fstat_r+0x1c>
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	bd38      	pop	{r3, r4, r5, pc}
 800841a:	bf00      	nop
 800841c:	200004ac 	.word	0x200004ac

08008420 <_isatty_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d06      	ldr	r5, [pc, #24]	@ (800843c <_isatty_r+0x1c>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7f9 ff9c 	bl	8002368 <_isatty>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_isatty_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_isatty_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	200004ac 	.word	0x200004ac

08008440 <_init>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	bf00      	nop
 8008444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008446:	bc08      	pop	{r3}
 8008448:	469e      	mov	lr, r3
 800844a:	4770      	bx	lr

0800844c <_fini>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr
